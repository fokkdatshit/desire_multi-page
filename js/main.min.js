/*!
 * jQuery JavaScript Library v3.6.0
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright OpenJS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2021-03-02T17:08Z
 */
!function(e,t){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,(function(e,t){"use strict";var n=[],i=Object.getPrototypeOf,o=n.slice,r=n.flat?function(e){return n.flat.call(e)}:function(e){return n.concat.apply([],e)},s=n.push,a=n.indexOf,l={},c=l.toString,u=l.hasOwnProperty,d=u.toString,p=d.call(Object),f={},h=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType&&"function"!=typeof e.item},g=function(e){return null!=e&&e===e.window},m=e.document,y={type:!0,src:!0,nonce:!0,noModule:!0};function v(e,t,n){var i,o,r=(n=n||m).createElement("script");if(r.text=e,t)for(i in y)(o=t[i]||t.getAttribute&&t.getAttribute(i))&&r.setAttribute(i,o);n.head.appendChild(r).parentNode.removeChild(r)}function b(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?l[c.call(e)]||"object":typeof e}var w=function(e,t){return new w.fn.init(e,t)};function x(e){var t=!!e&&"length"in e&&e.length,n=b(e);return!h(e)&&!g(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}w.fn=w.prototype={jquery:"3.6.0",constructor:w,length:0,toArray:function(){return o.call(this)},get:function(e){return null==e?o.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=w.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return w.each(this,e)},map:function(e){return this.pushStack(w.map(this,(function(t,n){return e.call(t,n,t)})))},slice:function(){return this.pushStack(o.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(w.grep(this,(function(e,t){return(t+1)%2})))},odd:function(){return this.pushStack(w.grep(this,(function(e,t){return t%2})))},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:s,sort:n.sort,splice:n.splice},w.extend=w.fn.extend=function(){var e,t,n,i,o,r,s=arguments[0]||{},a=1,l=arguments.length,c=!1;for("boolean"==typeof s&&(c=s,s=arguments[a]||{},a++),"object"==typeof s||h(s)||(s={}),a===l&&(s=this,a--);a<l;a++)if(null!=(e=arguments[a]))for(t in e)i=e[t],"__proto__"!==t&&s!==i&&(c&&i&&(w.isPlainObject(i)||(o=Array.isArray(i)))?(n=s[t],r=o&&!Array.isArray(n)?[]:o||w.isPlainObject(n)?n:{},o=!1,s[t]=w.extend(c,r,i)):void 0!==i&&(s[t]=i));return s},w.extend({expando:"jQuery"+("3.6.0"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==c.call(e))&&(!(t=i(e))||"function"==typeof(n=u.call(t,"constructor")&&t.constructor)&&d.call(n)===p)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t,n){v(e,{nonce:t&&t.nonce},n)},each:function(e,t){var n,i=0;if(x(e))for(n=e.length;i<n&&!1!==t.call(e[i],i,e[i]);i++);else for(i in e)if(!1===t.call(e[i],i,e[i]))break;return e},makeArray:function(e,t){var n=t||[];return null!=e&&(x(Object(e))?w.merge(n,"string"==typeof e?[e]:e):s.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:a.call(t,e,n)},merge:function(e,t){for(var n=+t.length,i=0,o=e.length;i<n;i++)e[o++]=t[i];return e.length=o,e},grep:function(e,t,n){for(var i=[],o=0,r=e.length,s=!n;o<r;o++)!t(e[o],o)!==s&&i.push(e[o]);return i},map:function(e,t,n){var i,o,s=0,a=[];if(x(e))for(i=e.length;s<i;s++)null!=(o=t(e[s],s,n))&&a.push(o);else for(s in e)null!=(o=t(e[s],s,n))&&a.push(o);return r(a)},guid:1,support:f}),"function"==typeof Symbol&&(w.fn[Symbol.iterator]=n[Symbol.iterator]),w.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(e,t){l["[object "+t+"]"]=t.toLowerCase()}));var C=
/*!
 * Sizzle CSS Selector Engine v2.3.6
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://js.foundation/
 *
 * Date: 2021-02-16
 */
function(e){var t,n,i,o,r,s,a,l,c,u,d,p,f,h,g,m,y,v,b,w="sizzle"+1*new Date,x=e.document,C=0,S=0,T=le(),A=le(),k=le(),D=le(),E=function(e,t){return e===t&&(d=!0),0},O={}.hasOwnProperty,I=[],N=I.pop,P=I.push,R=I.push,$=I.slice,M=function(e,t){for(var n=0,i=e.length;n<i;n++)if(e[n]===t)return n;return-1},j="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",L="[\\x20\\t\\r\\n\\f]",B="(?:\\\\[\\da-fA-F]{1,6}"+L+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",F="\\["+L+"*("+B+")(?:"+L+"*([*^$|!~]?=)"+L+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+B+"))|)"+L+"*\\]",H=":("+B+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+F+")*)|.*)\\)|)",q=new RegExp(L+"+","g"),_=new RegExp("^"+L+"+|((?:^|[^\\\\])(?:\\\\.)*)"+L+"+$","g"),W=new RegExp("^"+L+"*,"+L+"*"),z=new RegExp("^"+L+"*([>+~]|"+L+")"+L+"*"),U=new RegExp(L+"|>"),G=new RegExp(H),X=new RegExp("^"+B+"$"),Y={ID:new RegExp("^#("+B+")"),CLASS:new RegExp("^\\.("+B+")"),TAG:new RegExp("^("+B+"|[*])"),ATTR:new RegExp("^"+F),PSEUDO:new RegExp("^"+H),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+L+"*(even|odd|(([+-]|)(\\d*)n|)"+L+"*(?:([+-]|)"+L+"*(\\d+)|))"+L+"*\\)|)","i"),bool:new RegExp("^(?:"+j+")$","i"),needsContext:new RegExp("^"+L+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+L+"*((?:-\\d)?\\d*)"+L+"*\\)|)(?=[^-]|$)","i")},V=/HTML$/i,K=/^(?:input|select|textarea|button)$/i,Q=/^h\d$/i,Z=/^[^{]+\{\s*\[native \w/,J=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ee=/[+~]/,te=new RegExp("\\\\[\\da-fA-F]{1,6}"+L+"?|\\\\([^\\r\\n\\f])","g"),ne=function(e,t){var n="0x"+e.slice(1)-65536;return t||(n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320))},ie=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,oe=function(e,t){return t?"\0"===e?"ï¿½":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},re=function(){p()},se=we((function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()}),{dir:"parentNode",next:"legend"});try{R.apply(I=$.call(x.childNodes),x.childNodes),I[x.childNodes.length].nodeType}catch(e){R={apply:I.length?function(e,t){P.apply(e,$.call(t))}:function(e,t){for(var n=e.length,i=0;e[n++]=t[i++];);e.length=n-1}}}function ae(e,t,i,o){var r,a,c,u,d,h,y,v=t&&t.ownerDocument,x=t?t.nodeType:9;if(i=i||[],"string"!=typeof e||!e||1!==x&&9!==x&&11!==x)return i;if(!o&&(p(t),t=t||f,g)){if(11!==x&&(d=J.exec(e)))if(r=d[1]){if(9===x){if(!(c=t.getElementById(r)))return i;if(c.id===r)return i.push(c),i}else if(v&&(c=v.getElementById(r))&&b(t,c)&&c.id===r)return i.push(c),i}else{if(d[2])return R.apply(i,t.getElementsByTagName(e)),i;if((r=d[3])&&n.getElementsByClassName&&t.getElementsByClassName)return R.apply(i,t.getElementsByClassName(r)),i}if(n.qsa&&!D[e+" "]&&(!m||!m.test(e))&&(1!==x||"object"!==t.nodeName.toLowerCase())){if(y=e,v=t,1===x&&(U.test(e)||z.test(e))){for((v=ee.test(e)&&ye(t.parentNode)||t)===t&&n.scope||((u=t.getAttribute("id"))?u=u.replace(ie,oe):t.setAttribute("id",u=w)),a=(h=s(e)).length;a--;)h[a]=(u?"#"+u:":scope")+" "+be(h[a]);y=h.join(",")}try{return R.apply(i,v.querySelectorAll(y)),i}catch(t){D(e,!0)}finally{u===w&&t.removeAttribute("id")}}}return l(e.replace(_,"$1"),t,i,o)}function le(){var e=[];return function t(n,o){return e.push(n+" ")>i.cacheLength&&delete t[e.shift()],t[n+" "]=o}}function ce(e){return e[w]=!0,e}function ue(e){var t=f.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function de(e,t){for(var n=e.split("|"),o=n.length;o--;)i.attrHandle[n[o]]=t}function pe(e,t){var n=t&&e,i=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(i)return i;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function fe(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function he(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function ge(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&se(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function me(e){return ce((function(t){return t=+t,ce((function(n,i){for(var o,r=e([],n.length,t),s=r.length;s--;)n[o=r[s]]&&(n[o]=!(i[o]=n[o]))}))}))}function ye(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in n=ae.support={},r=ae.isXML=function(e){var t=e&&e.namespaceURI,n=e&&(e.ownerDocument||e).documentElement;return!V.test(t||n&&n.nodeName||"HTML")},p=ae.setDocument=function(e){var t,o,s=e?e.ownerDocument||e:x;return s!=f&&9===s.nodeType&&s.documentElement?(h=(f=s).documentElement,g=!r(f),x!=f&&(o=f.defaultView)&&o.top!==o&&(o.addEventListener?o.addEventListener("unload",re,!1):o.attachEvent&&o.attachEvent("onunload",re)),n.scope=ue((function(e){return h.appendChild(e).appendChild(f.createElement("div")),void 0!==e.querySelectorAll&&!e.querySelectorAll(":scope fieldset div").length})),n.attributes=ue((function(e){return e.className="i",!e.getAttribute("className")})),n.getElementsByTagName=ue((function(e){return e.appendChild(f.createComment("")),!e.getElementsByTagName("*").length})),n.getElementsByClassName=Z.test(f.getElementsByClassName),n.getById=ue((function(e){return h.appendChild(e).id=w,!f.getElementsByName||!f.getElementsByName(w).length})),n.getById?(i.filter.ID=function(e){var t=e.replace(te,ne);return function(e){return e.getAttribute("id")===t}},i.find.ID=function(e,t){if(void 0!==t.getElementById&&g){var n=t.getElementById(e);return n?[n]:[]}}):(i.filter.ID=function(e){var t=e.replace(te,ne);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},i.find.ID=function(e,t){if(void 0!==t.getElementById&&g){var n,i,o,r=t.getElementById(e);if(r){if((n=r.getAttributeNode("id"))&&n.value===e)return[r];for(o=t.getElementsByName(e),i=0;r=o[i++];)if((n=r.getAttributeNode("id"))&&n.value===e)return[r]}return[]}}),i.find.TAG=n.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,i=[],o=0,r=t.getElementsByTagName(e);if("*"===e){for(;n=r[o++];)1===n.nodeType&&i.push(n);return i}return r},i.find.CLASS=n.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&g)return t.getElementsByClassName(e)},y=[],m=[],(n.qsa=Z.test(f.querySelectorAll))&&(ue((function(e){var t;h.appendChild(e).innerHTML="<a id='"+w+"'></a><select id='"+w+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&m.push("[*^$]="+L+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||m.push("\\["+L+"*(?:value|"+j+")"),e.querySelectorAll("[id~="+w+"-]").length||m.push("~="),(t=f.createElement("input")).setAttribute("name",""),e.appendChild(t),e.querySelectorAll("[name='']").length||m.push("\\["+L+"*name"+L+"*="+L+"*(?:''|\"\")"),e.querySelectorAll(":checked").length||m.push(":checked"),e.querySelectorAll("a#"+w+"+*").length||m.push(".#.+[+~]"),e.querySelectorAll("\\\f"),m.push("[\\r\\n\\f]")})),ue((function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=f.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&m.push("name"+L+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&m.push(":enabled",":disabled"),h.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&m.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),m.push(",.*:")}))),(n.matchesSelector=Z.test(v=h.matches||h.webkitMatchesSelector||h.mozMatchesSelector||h.oMatchesSelector||h.msMatchesSelector))&&ue((function(e){n.disconnectedMatch=v.call(e,"*"),v.call(e,"[s!='']:x"),y.push("!=",H)})),m=m.length&&new RegExp(m.join("|")),y=y.length&&new RegExp(y.join("|")),t=Z.test(h.compareDocumentPosition),b=t||Z.test(h.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,i=t&&t.parentNode;return e===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):e.compareDocumentPosition&&16&e.compareDocumentPosition(i)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},E=t?function(e,t){if(e===t)return d=!0,0;var i=!e.compareDocumentPosition-!t.compareDocumentPosition;return i||(1&(i=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===i?e==f||e.ownerDocument==x&&b(x,e)?-1:t==f||t.ownerDocument==x&&b(x,t)?1:u?M(u,e)-M(u,t):0:4&i?-1:1)}:function(e,t){if(e===t)return d=!0,0;var n,i=0,o=e.parentNode,r=t.parentNode,s=[e],a=[t];if(!o||!r)return e==f?-1:t==f?1:o?-1:r?1:u?M(u,e)-M(u,t):0;if(o===r)return pe(e,t);for(n=e;n=n.parentNode;)s.unshift(n);for(n=t;n=n.parentNode;)a.unshift(n);for(;s[i]===a[i];)i++;return i?pe(s[i],a[i]):s[i]==x?-1:a[i]==x?1:0},f):f},ae.matches=function(e,t){return ae(e,null,null,t)},ae.matchesSelector=function(e,t){if(p(e),n.matchesSelector&&g&&!D[t+" "]&&(!y||!y.test(t))&&(!m||!m.test(t)))try{var i=v.call(e,t);if(i||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return i}catch(e){D(t,!0)}return ae(t,f,null,[e]).length>0},ae.contains=function(e,t){return(e.ownerDocument||e)!=f&&p(e),b(e,t)},ae.attr=function(e,t){(e.ownerDocument||e)!=f&&p(e);var o=i.attrHandle[t.toLowerCase()],r=o&&O.call(i.attrHandle,t.toLowerCase())?o(e,t,!g):void 0;return void 0!==r?r:n.attributes||!g?e.getAttribute(t):(r=e.getAttributeNode(t))&&r.specified?r.value:null},ae.escape=function(e){return(e+"").replace(ie,oe)},ae.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},ae.uniqueSort=function(e){var t,i=[],o=0,r=0;if(d=!n.detectDuplicates,u=!n.sortStable&&e.slice(0),e.sort(E),d){for(;t=e[r++];)t===e[r]&&(o=i.push(r));for(;o--;)e.splice(i[o],1)}return u=null,e},o=ae.getText=function(e){var t,n="",i=0,r=e.nodeType;if(r){if(1===r||9===r||11===r){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=o(e)}else if(3===r||4===r)return e.nodeValue}else for(;t=e[i++];)n+=o(t);return n},(i=ae.selectors={cacheLength:50,createPseudo:ce,match:Y,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(te,ne),e[3]=(e[3]||e[4]||e[5]||"").replace(te,ne),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||ae.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&ae.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return Y.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&G.test(n)&&(t=s(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(te,ne).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=T[e+" "];return t||(t=new RegExp("(^|"+L+")"+e+"("+L+"|$)"))&&T(e,(function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")}))},ATTR:function(e,t,n){return function(i){var o=ae.attr(i,e);return null==o?"!="===t:!t||(o+="","="===t?o===n:"!="===t?o!==n:"^="===t?n&&0===o.indexOf(n):"*="===t?n&&o.indexOf(n)>-1:"$="===t?n&&o.slice(-n.length)===n:"~="===t?(" "+o.replace(q," ")+" ").indexOf(n)>-1:"|="===t&&(o===n||o.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,i,o){var r="nth"!==e.slice(0,3),s="last"!==e.slice(-4),a="of-type"===t;return 1===i&&0===o?function(e){return!!e.parentNode}:function(t,n,l){var c,u,d,p,f,h,g=r!==s?"nextSibling":"previousSibling",m=t.parentNode,y=a&&t.nodeName.toLowerCase(),v=!l&&!a,b=!1;if(m){if(r){for(;g;){for(p=t;p=p[g];)if(a?p.nodeName.toLowerCase()===y:1===p.nodeType)return!1;h=g="only"===e&&!h&&"nextSibling"}return!0}if(h=[s?m.firstChild:m.lastChild],s&&v){for(b=(f=(c=(u=(d=(p=m)[w]||(p[w]={}))[p.uniqueID]||(d[p.uniqueID]={}))[e]||[])[0]===C&&c[1])&&c[2],p=f&&m.childNodes[f];p=++f&&p&&p[g]||(b=f=0)||h.pop();)if(1===p.nodeType&&++b&&p===t){u[e]=[C,f,b];break}}else if(v&&(b=f=(c=(u=(d=(p=t)[w]||(p[w]={}))[p.uniqueID]||(d[p.uniqueID]={}))[e]||[])[0]===C&&c[1]),!1===b)for(;(p=++f&&p&&p[g]||(b=f=0)||h.pop())&&((a?p.nodeName.toLowerCase()!==y:1!==p.nodeType)||!++b||(v&&((u=(d=p[w]||(p[w]={}))[p.uniqueID]||(d[p.uniqueID]={}))[e]=[C,b]),p!==t)););return(b-=o)===i||b%i==0&&b/i>=0}}},PSEUDO:function(e,t){var n,o=i.pseudos[e]||i.setFilters[e.toLowerCase()]||ae.error("unsupported pseudo: "+e);return o[w]?o(t):o.length>1?(n=[e,e,"",t],i.setFilters.hasOwnProperty(e.toLowerCase())?ce((function(e,n){for(var i,r=o(e,t),s=r.length;s--;)e[i=M(e,r[s])]=!(n[i]=r[s])})):function(e){return o(e,0,n)}):o}},pseudos:{not:ce((function(e){var t=[],n=[],i=a(e.replace(_,"$1"));return i[w]?ce((function(e,t,n,o){for(var r,s=i(e,null,o,[]),a=e.length;a--;)(r=s[a])&&(e[a]=!(t[a]=r))})):function(e,o,r){return t[0]=e,i(t,null,r,n),t[0]=null,!n.pop()}})),has:ce((function(e){return function(t){return ae(e,t).length>0}})),contains:ce((function(e){return e=e.replace(te,ne),function(t){return(t.textContent||o(t)).indexOf(e)>-1}})),lang:ce((function(e){return X.test(e||"")||ae.error("unsupported lang: "+e),e=e.replace(te,ne).toLowerCase(),function(t){var n;do{if(n=g?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}})),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===h},focus:function(e){return e===f.activeElement&&(!f.hasFocus||f.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:ge(!1),disabled:ge(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!i.pseudos.empty(e)},header:function(e){return Q.test(e.nodeName)},input:function(e){return K.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:me((function(){return[0]})),last:me((function(e,t){return[t-1]})),eq:me((function(e,t,n){return[n<0?n+t:n]})),even:me((function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e})),odd:me((function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e})),lt:me((function(e,t,n){for(var i=n<0?n+t:n>t?t:n;--i>=0;)e.push(i);return e})),gt:me((function(e,t,n){for(var i=n<0?n+t:n;++i<t;)e.push(i);return e}))}}).pseudos.nth=i.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})i.pseudos[t]=fe(t);for(t in{submit:!0,reset:!0})i.pseudos[t]=he(t);function ve(){}function be(e){for(var t=0,n=e.length,i="";t<n;t++)i+=e[t].value;return i}function we(e,t,n){var i=t.dir,o=t.next,r=o||i,s=n&&"parentNode"===r,a=S++;return t.first?function(t,n,o){for(;t=t[i];)if(1===t.nodeType||s)return e(t,n,o);return!1}:function(t,n,l){var c,u,d,p=[C,a];if(l){for(;t=t[i];)if((1===t.nodeType||s)&&e(t,n,l))return!0}else for(;t=t[i];)if(1===t.nodeType||s)if(u=(d=t[w]||(t[w]={}))[t.uniqueID]||(d[t.uniqueID]={}),o&&o===t.nodeName.toLowerCase())t=t[i]||t;else{if((c=u[r])&&c[0]===C&&c[1]===a)return p[2]=c[2];if(u[r]=p,p[2]=e(t,n,l))return!0}return!1}}function xe(e){return e.length>1?function(t,n,i){for(var o=e.length;o--;)if(!e[o](t,n,i))return!1;return!0}:e[0]}function Ce(e,t,n,i,o){for(var r,s=[],a=0,l=e.length,c=null!=t;a<l;a++)(r=e[a])&&(n&&!n(r,i,o)||(s.push(r),c&&t.push(a)));return s}function Se(e,t,n,i,o,r){return i&&!i[w]&&(i=Se(i)),o&&!o[w]&&(o=Se(o,r)),ce((function(r,s,a,l){var c,u,d,p=[],f=[],h=s.length,g=r||function(e,t,n){for(var i=0,o=t.length;i<o;i++)ae(e,t[i],n);return n}(t||"*",a.nodeType?[a]:a,[]),m=!e||!r&&t?g:Ce(g,p,e,a,l),y=n?o||(r?e:h||i)?[]:s:m;if(n&&n(m,y,a,l),i)for(c=Ce(y,f),i(c,[],a,l),u=c.length;u--;)(d=c[u])&&(y[f[u]]=!(m[f[u]]=d));if(r){if(o||e){if(o){for(c=[],u=y.length;u--;)(d=y[u])&&c.push(m[u]=d);o(null,y=[],c,l)}for(u=y.length;u--;)(d=y[u])&&(c=o?M(r,d):p[u])>-1&&(r[c]=!(s[c]=d))}}else y=Ce(y===s?y.splice(h,y.length):y),o?o(null,s,y,l):R.apply(s,y)}))}function Te(e){for(var t,n,o,r=e.length,s=i.relative[e[0].type],a=s||i.relative[" "],l=s?1:0,u=we((function(e){return e===t}),a,!0),d=we((function(e){return M(t,e)>-1}),a,!0),p=[function(e,n,i){var o=!s&&(i||n!==c)||((t=n).nodeType?u(e,n,i):d(e,n,i));return t=null,o}];l<r;l++)if(n=i.relative[e[l].type])p=[we(xe(p),n)];else{if((n=i.filter[e[l].type].apply(null,e[l].matches))[w]){for(o=++l;o<r&&!i.relative[e[o].type];o++);return Se(l>1&&xe(p),l>1&&be(e.slice(0,l-1).concat({value:" "===e[l-2].type?"*":""})).replace(_,"$1"),n,l<o&&Te(e.slice(l,o)),o<r&&Te(e=e.slice(o)),o<r&&be(e))}p.push(n)}return xe(p)}return ve.prototype=i.filters=i.pseudos,i.setFilters=new ve,s=ae.tokenize=function(e,t){var n,o,r,s,a,l,c,u=A[e+" "];if(u)return t?0:u.slice(0);for(a=e,l=[],c=i.preFilter;a;){for(s in n&&!(o=W.exec(a))||(o&&(a=a.slice(o[0].length)||a),l.push(r=[])),n=!1,(o=z.exec(a))&&(n=o.shift(),r.push({value:n,type:o[0].replace(_," ")}),a=a.slice(n.length)),i.filter)!(o=Y[s].exec(a))||c[s]&&!(o=c[s](o))||(n=o.shift(),r.push({value:n,type:s,matches:o}),a=a.slice(n.length));if(!n)break}return t?a.length:a?ae.error(e):A(e,l).slice(0)},a=ae.compile=function(e,t){var n,o=[],r=[],a=k[e+" "];if(!a){for(t||(t=s(e)),n=t.length;n--;)(a=Te(t[n]))[w]?o.push(a):r.push(a);(a=k(e,function(e,t){var n=t.length>0,o=e.length>0,r=function(r,s,a,l,u){var d,h,m,y=0,v="0",b=r&&[],w=[],x=c,S=r||o&&i.find.TAG("*",u),T=C+=null==x?1:Math.random()||.1,A=S.length;for(u&&(c=s==f||s||u);v!==A&&null!=(d=S[v]);v++){if(o&&d){for(h=0,s||d.ownerDocument==f||(p(d),a=!g);m=e[h++];)if(m(d,s||f,a)){l.push(d);break}u&&(C=T)}n&&((d=!m&&d)&&y--,r&&b.push(d))}if(y+=v,n&&v!==y){for(h=0;m=t[h++];)m(b,w,s,a);if(r){if(y>0)for(;v--;)b[v]||w[v]||(w[v]=N.call(l));w=Ce(w)}R.apply(l,w),u&&!r&&w.length>0&&y+t.length>1&&ae.uniqueSort(l)}return u&&(C=T,c=x),b};return n?ce(r):r}(r,o))).selector=e}return a},l=ae.select=function(e,t,n,o){var r,l,c,u,d,p="function"==typeof e&&e,f=!o&&s(e=p.selector||e);if(n=n||[],1===f.length){if((l=f[0]=f[0].slice(0)).length>2&&"ID"===(c=l[0]).type&&9===t.nodeType&&g&&i.relative[l[1].type]){if(!(t=(i.find.ID(c.matches[0].replace(te,ne),t)||[])[0]))return n;p&&(t=t.parentNode),e=e.slice(l.shift().value.length)}for(r=Y.needsContext.test(e)?0:l.length;r--&&(c=l[r],!i.relative[u=c.type]);)if((d=i.find[u])&&(o=d(c.matches[0].replace(te,ne),ee.test(l[0].type)&&ye(t.parentNode)||t))){if(l.splice(r,1),!(e=o.length&&be(l)))return R.apply(n,o),n;break}}return(p||a(e,f))(o,t,!g,n,!t||ee.test(e)&&ye(t.parentNode)||t),n},n.sortStable=w.split("").sort(E).join("")===w,n.detectDuplicates=!!d,p(),n.sortDetached=ue((function(e){return 1&e.compareDocumentPosition(f.createElement("fieldset"))})),ue((function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")}))||de("type|href|height|width",(function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)})),n.attributes&&ue((function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")}))||de("value",(function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue})),ue((function(e){return null==e.getAttribute("disabled")}))||de(j,(function(e,t,n){var i;if(!n)return!0===e[t]?t.toLowerCase():(i=e.getAttributeNode(t))&&i.specified?i.value:null})),ae}(e);w.find=C,w.expr=C.selectors,w.expr[":"]=w.expr.pseudos,w.uniqueSort=w.unique=C.uniqueSort,w.text=C.getText,w.isXMLDoc=C.isXML,w.contains=C.contains,w.escapeSelector=C.escape;var S=function(e,t,n){for(var i=[],o=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(o&&w(e).is(n))break;i.push(e)}return i},T=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},A=w.expr.match.needsContext;function k(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var D=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function E(e,t,n){return h(t)?w.grep(e,(function(e,i){return!!t.call(e,i,e)!==n})):t.nodeType?w.grep(e,(function(e){return e===t!==n})):"string"!=typeof t?w.grep(e,(function(e){return a.call(t,e)>-1!==n})):w.filter(t,e,n)}w.filter=function(e,t,n){var i=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===i.nodeType?w.find.matchesSelector(i,e)?[i]:[]:w.find.matches(e,w.grep(t,(function(e){return 1===e.nodeType})))},w.fn.extend({find:function(e){var t,n,i=this.length,o=this;if("string"!=typeof e)return this.pushStack(w(e).filter((function(){for(t=0;t<i;t++)if(w.contains(o[t],this))return!0})));for(n=this.pushStack([]),t=0;t<i;t++)w.find(e,o[t],n);return i>1?w.uniqueSort(n):n},filter:function(e){return this.pushStack(E(this,e||[],!1))},not:function(e){return this.pushStack(E(this,e||[],!0))},is:function(e){return!!E(this,"string"==typeof e&&A.test(e)?w(e):e||[],!1).length}});var O,I=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(w.fn.init=function(e,t,n){var i,o;if(!e)return this;if(n=n||O,"string"==typeof e){if(!(i="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:I.exec(e))||!i[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(i[1]){if(t=t instanceof w?t[0]:t,w.merge(this,w.parseHTML(i[1],t&&t.nodeType?t.ownerDocument||t:m,!0)),D.test(i[1])&&w.isPlainObject(t))for(i in t)h(this[i])?this[i](t[i]):this.attr(i,t[i]);return this}return(o=m.getElementById(i[2]))&&(this[0]=o,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):h(e)?void 0!==n.ready?n.ready(e):e(w):w.makeArray(e,this)}).prototype=w.fn,O=w(m);var N=/^(?:parents|prev(?:Until|All))/,P={children:!0,contents:!0,next:!0,prev:!0};function R(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}w.fn.extend({has:function(e){var t=w(e,this),n=t.length;return this.filter((function(){for(var e=0;e<n;e++)if(w.contains(this,t[e]))return!0}))},closest:function(e,t){var n,i=0,o=this.length,r=[],s="string"!=typeof e&&w(e);if(!A.test(e))for(;i<o;i++)for(n=this[i];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&w.find.matchesSelector(n,e))){r.push(n);break}return this.pushStack(r.length>1?w.uniqueSort(r):r)},index:function(e){return e?"string"==typeof e?a.call(w(e),this[0]):a.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(w.uniqueSort(w.merge(this.get(),w(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),w.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return S(e,"parentNode")},parentsUntil:function(e,t,n){return S(e,"parentNode",n)},next:function(e){return R(e,"nextSibling")},prev:function(e){return R(e,"previousSibling")},nextAll:function(e){return S(e,"nextSibling")},prevAll:function(e){return S(e,"previousSibling")},nextUntil:function(e,t,n){return S(e,"nextSibling",n)},prevUntil:function(e,t,n){return S(e,"previousSibling",n)},siblings:function(e){return T((e.parentNode||{}).firstChild,e)},children:function(e){return T(e.firstChild)},contents:function(e){return null!=e.contentDocument&&i(e.contentDocument)?e.contentDocument:(k(e,"template")&&(e=e.content||e),w.merge([],e.childNodes))}},(function(e,t){w.fn[e]=function(n,i){var o=w.map(this,t,n);return"Until"!==e.slice(-5)&&(i=n),i&&"string"==typeof i&&(o=w.filter(i,o)),this.length>1&&(P[e]||w.uniqueSort(o),N.test(e)&&o.reverse()),this.pushStack(o)}}));var $=/[^\x20\t\r\n\f]+/g;function M(e){return e}function j(e){throw e}function L(e,t,n,i){var o;try{e&&h(o=e.promise)?o.call(e).done(t).fail(n):e&&h(o=e.then)?o.call(e,t,n):t.apply(void 0,[e].slice(i))}catch(e){n.apply(void 0,[e])}}w.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return w.each(e.match($)||[],(function(e,n){t[n]=!0})),t}(e):w.extend({},e);var t,n,i,o,r=[],s=[],a=-1,l=function(){for(o=o||e.once,i=t=!0;s.length;a=-1)for(n=s.shift();++a<r.length;)!1===r[a].apply(n[0],n[1])&&e.stopOnFalse&&(a=r.length,n=!1);e.memory||(n=!1),t=!1,o&&(r=n?[]:"")},c={add:function(){return r&&(n&&!t&&(a=r.length-1,s.push(n)),function t(n){w.each(n,(function(n,i){h(i)?e.unique&&c.has(i)||r.push(i):i&&i.length&&"string"!==b(i)&&t(i)}))}(arguments),n&&!t&&l()),this},remove:function(){return w.each(arguments,(function(e,t){for(var n;(n=w.inArray(t,r,n))>-1;)r.splice(n,1),n<=a&&a--})),this},has:function(e){return e?w.inArray(e,r)>-1:r.length>0},empty:function(){return r&&(r=[]),this},disable:function(){return o=s=[],r=n="",this},disabled:function(){return!r},lock:function(){return o=s=[],n||t||(r=n=""),this},locked:function(){return!!o},fireWith:function(e,n){return o||(n=[e,(n=n||[]).slice?n.slice():n],s.push(n),t||l()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!i}};return c},w.extend({Deferred:function(t){var n=[["notify","progress",w.Callbacks("memory"),w.Callbacks("memory"),2],["resolve","done",w.Callbacks("once memory"),w.Callbacks("once memory"),0,"resolved"],["reject","fail",w.Callbacks("once memory"),w.Callbacks("once memory"),1,"rejected"]],i="pending",o={state:function(){return i},always:function(){return r.done(arguments).fail(arguments),this},catch:function(e){return o.then(null,e)},pipe:function(){var e=arguments;return w.Deferred((function(t){w.each(n,(function(n,i){var o=h(e[i[4]])&&e[i[4]];r[i[1]]((function(){var e=o&&o.apply(this,arguments);e&&h(e.promise)?e.promise().progress(t.notify).done(t.resolve).fail(t.reject):t[i[0]+"With"](this,o?[e]:arguments)}))})),e=null})).promise()},then:function(t,i,o){var r=0;function s(t,n,i,o){return function(){var a=this,l=arguments,c=function(){var e,c;if(!(t<r)){if((e=i.apply(a,l))===n.promise())throw new TypeError("Thenable self-resolution");c=e&&("object"==typeof e||"function"==typeof e)&&e.then,h(c)?o?c.call(e,s(r,n,M,o),s(r,n,j,o)):(r++,c.call(e,s(r,n,M,o),s(r,n,j,o),s(r,n,M,n.notifyWith))):(i!==M&&(a=void 0,l=[e]),(o||n.resolveWith)(a,l))}},u=o?c:function(){try{c()}catch(e){w.Deferred.exceptionHook&&w.Deferred.exceptionHook(e,u.stackTrace),t+1>=r&&(i!==j&&(a=void 0,l=[e]),n.rejectWith(a,l))}};t?u():(w.Deferred.getStackHook&&(u.stackTrace=w.Deferred.getStackHook()),e.setTimeout(u))}}return w.Deferred((function(e){n[0][3].add(s(0,e,h(o)?o:M,e.notifyWith)),n[1][3].add(s(0,e,h(t)?t:M)),n[2][3].add(s(0,e,h(i)?i:j))})).promise()},promise:function(e){return null!=e?w.extend(e,o):o}},r={};return w.each(n,(function(e,t){var s=t[2],a=t[5];o[t[1]]=s.add,a&&s.add((function(){i=a}),n[3-e][2].disable,n[3-e][3].disable,n[0][2].lock,n[0][3].lock),s.add(t[3].fire),r[t[0]]=function(){return r[t[0]+"With"](this===r?void 0:this,arguments),this},r[t[0]+"With"]=s.fireWith})),o.promise(r),t&&t.call(r,r),r},when:function(e){var t=arguments.length,n=t,i=Array(n),r=o.call(arguments),s=w.Deferred(),a=function(e){return function(n){i[e]=this,r[e]=arguments.length>1?o.call(arguments):n,--t||s.resolveWith(i,r)}};if(t<=1&&(L(e,s.done(a(n)).resolve,s.reject,!t),"pending"===s.state()||h(r[n]&&r[n].then)))return s.then();for(;n--;)L(r[n],a(n),s.reject);return s.promise()}});var B=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;w.Deferred.exceptionHook=function(t,n){e.console&&e.console.warn&&t&&B.test(t.name)&&e.console.warn("jQuery.Deferred exception: "+t.message,t.stack,n)},w.readyException=function(t){e.setTimeout((function(){throw t}))};var F=w.Deferred();function H(){m.removeEventListener("DOMContentLoaded",H),e.removeEventListener("load",H),w.ready()}w.fn.ready=function(e){return F.then(e).catch((function(e){w.readyException(e)})),this},w.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--w.readyWait:w.isReady)||(w.isReady=!0,!0!==e&&--w.readyWait>0||F.resolveWith(m,[w]))}}),w.ready.then=F.then,"complete"===m.readyState||"loading"!==m.readyState&&!m.documentElement.doScroll?e.setTimeout(w.ready):(m.addEventListener("DOMContentLoaded",H),e.addEventListener("load",H));var q=function(e,t,n,i,o,r,s){var a=0,l=e.length,c=null==n;if("object"===b(n))for(a in o=!0,n)q(e,t,a,n[a],!0,r,s);else if(void 0!==i&&(o=!0,h(i)||(s=!0),c&&(s?(t.call(e,i),t=null):(c=t,t=function(e,t,n){return c.call(w(e),n)})),t))for(;a<l;a++)t(e[a],n,s?i:i.call(e[a],a,t(e[a],n)));return o?e:c?t.call(e):l?t(e[0],n):r},_=/^-ms-/,W=/-([a-z])/g;function z(e,t){return t.toUpperCase()}function U(e){return e.replace(_,"ms-").replace(W,z)}var G=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function X(){this.expando=w.expando+X.uid++}X.uid=1,X.prototype={cache:function(e){var t=e[this.expando];return t||(t={},G(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var i,o=this.cache(e);if("string"==typeof t)o[U(t)]=n;else for(i in t)o[U(i)]=t[i];return o},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][U(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,i=e[this.expando];if(void 0!==i){if(void 0!==t){n=(t=Array.isArray(t)?t.map(U):(t=U(t))in i?[t]:t.match($)||[]).length;for(;n--;)delete i[t[n]]}(void 0===t||w.isEmptyObject(i))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!w.isEmptyObject(t)}};var Y=new X,V=new X,K=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Q=/[A-Z]/g;function Z(e,t,n){var i;if(void 0===n&&1===e.nodeType)if(i="data-"+t.replace(Q,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(i))){try{n=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:K.test(e)?JSON.parse(e):e)}(n)}catch(e){}V.set(e,t,n)}else n=void 0;return n}w.extend({hasData:function(e){return V.hasData(e)||Y.hasData(e)},data:function(e,t,n){return V.access(e,t,n)},removeData:function(e,t){V.remove(e,t)},_data:function(e,t,n){return Y.access(e,t,n)},_removeData:function(e,t){Y.remove(e,t)}}),w.fn.extend({data:function(e,t){var n,i,o,r=this[0],s=r&&r.attributes;if(void 0===e){if(this.length&&(o=V.get(r),1===r.nodeType&&!Y.get(r,"hasDataAttrs"))){for(n=s.length;n--;)s[n]&&0===(i=s[n].name).indexOf("data-")&&(i=U(i.slice(5)),Z(r,i,o[i]));Y.set(r,"hasDataAttrs",!0)}return o}return"object"==typeof e?this.each((function(){V.set(this,e)})):q(this,(function(t){var n;if(r&&void 0===t)return void 0!==(n=V.get(r,e))||void 0!==(n=Z(r,e))?n:void 0;this.each((function(){V.set(this,e,t)}))}),null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each((function(){V.remove(this,e)}))}}),w.extend({queue:function(e,t,n){var i;if(e)return t=(t||"fx")+"queue",i=Y.get(e,t),n&&(!i||Array.isArray(n)?i=Y.access(e,t,w.makeArray(n)):i.push(n)),i||[]},dequeue:function(e,t){t=t||"fx";var n=w.queue(e,t),i=n.length,o=n.shift(),r=w._queueHooks(e,t);"inprogress"===o&&(o=n.shift(),i--),o&&("fx"===t&&n.unshift("inprogress"),delete r.stop,o.call(e,(function(){w.dequeue(e,t)}),r)),!i&&r&&r.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return Y.get(e,n)||Y.access(e,n,{empty:w.Callbacks("once memory").add((function(){Y.remove(e,[t+"queue",n])}))})}}),w.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?w.queue(this[0],e):void 0===t?this:this.each((function(){var n=w.queue(this,e,t);w._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&w.dequeue(this,e)}))},dequeue:function(e){return this.each((function(){w.dequeue(this,e)}))},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,i=1,o=w.Deferred(),r=this,s=this.length,a=function(){--i||o.resolveWith(r,[r])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";s--;)(n=Y.get(r[s],e+"queueHooks"))&&n.empty&&(i++,n.empty.add(a));return a(),o.promise(t)}});var J=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,ee=new RegExp("^(?:([+-])=|)("+J+")([a-z%]*)$","i"),te=["Top","Right","Bottom","Left"],ne=m.documentElement,ie=function(e){return w.contains(e.ownerDocument,e)},oe={composed:!0};ne.getRootNode&&(ie=function(e){return w.contains(e.ownerDocument,e)||e.getRootNode(oe)===e.ownerDocument});var re=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&ie(e)&&"none"===w.css(e,"display")};function se(e,t,n,i){var o,r,s=20,a=i?function(){return i.cur()}:function(){return w.css(e,t,"")},l=a(),c=n&&n[3]||(w.cssNumber[t]?"":"px"),u=e.nodeType&&(w.cssNumber[t]||"px"!==c&&+l)&&ee.exec(w.css(e,t));if(u&&u[3]!==c){for(l/=2,c=c||u[3],u=+l||1;s--;)w.style(e,t,u+c),(1-r)*(1-(r=a()/l||.5))<=0&&(s=0),u/=r;u*=2,w.style(e,t,u+c),n=n||[]}return n&&(u=+u||+l||0,o=n[1]?u+(n[1]+1)*n[2]:+n[2],i&&(i.unit=c,i.start=u,i.end=o)),o}var ae={};function le(e){var t,n=e.ownerDocument,i=e.nodeName,o=ae[i];return o||(t=n.body.appendChild(n.createElement(i)),o=w.css(t,"display"),t.parentNode.removeChild(t),"none"===o&&(o="block"),ae[i]=o,o)}function ce(e,t){for(var n,i,o=[],r=0,s=e.length;r<s;r++)(i=e[r]).style&&(n=i.style.display,t?("none"===n&&(o[r]=Y.get(i,"display")||null,o[r]||(i.style.display="")),""===i.style.display&&re(i)&&(o[r]=le(i))):"none"!==n&&(o[r]="none",Y.set(i,"display",n)));for(r=0;r<s;r++)null!=o[r]&&(e[r].style.display=o[r]);return e}w.fn.extend({show:function(){return ce(this,!0)},hide:function(){return ce(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each((function(){re(this)?w(this).show():w(this).hide()}))}});var ue,de,pe=/^(?:checkbox|radio)$/i,fe=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,he=/^$|^module$|\/(?:java|ecma)script/i;ue=m.createDocumentFragment().appendChild(m.createElement("div")),(de=m.createElement("input")).setAttribute("type","radio"),de.setAttribute("checked","checked"),de.setAttribute("name","t"),ue.appendChild(de),f.checkClone=ue.cloneNode(!0).cloneNode(!0).lastChild.checked,ue.innerHTML="<textarea>x</textarea>",f.noCloneChecked=!!ue.cloneNode(!0).lastChild.defaultValue,ue.innerHTML="<option></option>",f.option=!!ue.lastChild;var ge={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function me(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&k(e,t)?w.merge([e],n):n}function ye(e,t){for(var n=0,i=e.length;n<i;n++)Y.set(e[n],"globalEval",!t||Y.get(t[n],"globalEval"))}ge.tbody=ge.tfoot=ge.colgroup=ge.caption=ge.thead,ge.th=ge.td,f.option||(ge.optgroup=ge.option=[1,"<select multiple='multiple'>","</select>"]);var ve=/<|&#?\w+;/;function be(e,t,n,i,o){for(var r,s,a,l,c,u,d=t.createDocumentFragment(),p=[],f=0,h=e.length;f<h;f++)if((r=e[f])||0===r)if("object"===b(r))w.merge(p,r.nodeType?[r]:r);else if(ve.test(r)){for(s=s||d.appendChild(t.createElement("div")),a=(fe.exec(r)||["",""])[1].toLowerCase(),l=ge[a]||ge._default,s.innerHTML=l[1]+w.htmlPrefilter(r)+l[2],u=l[0];u--;)s=s.lastChild;w.merge(p,s.childNodes),(s=d.firstChild).textContent=""}else p.push(t.createTextNode(r));for(d.textContent="",f=0;r=p[f++];)if(i&&w.inArray(r,i)>-1)o&&o.push(r);else if(c=ie(r),s=me(d.appendChild(r),"script"),c&&ye(s),n)for(u=0;r=s[u++];)he.test(r.type||"")&&n.push(r);return d}var we=/^([^.]*)(?:\.(.+)|)/;function xe(){return!0}function Ce(){return!1}function Se(e,t){return e===function(){try{return m.activeElement}catch(e){}}()==("focus"===t)}function Te(e,t,n,i,o,r){var s,a;if("object"==typeof t){for(a in"string"!=typeof n&&(i=i||n,n=void 0),t)Te(e,a,n,i,t[a],r);return e}if(null==i&&null==o?(o=n,i=n=void 0):null==o&&("string"==typeof n?(o=i,i=void 0):(o=i,i=n,n=void 0)),!1===o)o=Ce;else if(!o)return e;return 1===r&&(s=o,(o=function(e){return w().off(e),s.apply(this,arguments)}).guid=s.guid||(s.guid=w.guid++)),e.each((function(){w.event.add(this,t,o,i,n)}))}function Ae(e,t,n){n?(Y.set(e,t,!1),w.event.add(e,t,{namespace:!1,handler:function(e){var i,r,s=Y.get(this,t);if(1&e.isTrigger&&this[t]){if(s.length)(w.event.special[t]||{}).delegateType&&e.stopPropagation();else if(s=o.call(arguments),Y.set(this,t,s),i=n(this,t),this[t](),s!==(r=Y.get(this,t))||i?Y.set(this,t,!1):r={},s!==r)return e.stopImmediatePropagation(),e.preventDefault(),r&&r.value}else s.length&&(Y.set(this,t,{value:w.event.trigger(w.extend(s[0],w.Event.prototype),s.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===Y.get(e,t)&&w.event.add(e,t,xe)}w.event={global:{},add:function(e,t,n,i,o){var r,s,a,l,c,u,d,p,f,h,g,m=Y.get(e);if(G(e))for(n.handler&&(n=(r=n).handler,o=r.selector),o&&w.find.matchesSelector(ne,o),n.guid||(n.guid=w.guid++),(l=m.events)||(l=m.events=Object.create(null)),(s=m.handle)||(s=m.handle=function(t){return void 0!==w&&w.event.triggered!==t.type?w.event.dispatch.apply(e,arguments):void 0}),c=(t=(t||"").match($)||[""]).length;c--;)f=g=(a=we.exec(t[c])||[])[1],h=(a[2]||"").split(".").sort(),f&&(d=w.event.special[f]||{},f=(o?d.delegateType:d.bindType)||f,d=w.event.special[f]||{},u=w.extend({type:f,origType:g,data:i,handler:n,guid:n.guid,selector:o,needsContext:o&&w.expr.match.needsContext.test(o),namespace:h.join(".")},r),(p=l[f])||((p=l[f]=[]).delegateCount=0,d.setup&&!1!==d.setup.call(e,i,h,s)||e.addEventListener&&e.addEventListener(f,s)),d.add&&(d.add.call(e,u),u.handler.guid||(u.handler.guid=n.guid)),o?p.splice(p.delegateCount++,0,u):p.push(u),w.event.global[f]=!0)},remove:function(e,t,n,i,o){var r,s,a,l,c,u,d,p,f,h,g,m=Y.hasData(e)&&Y.get(e);if(m&&(l=m.events)){for(c=(t=(t||"").match($)||[""]).length;c--;)if(f=g=(a=we.exec(t[c])||[])[1],h=(a[2]||"").split(".").sort(),f){for(d=w.event.special[f]||{},p=l[f=(i?d.delegateType:d.bindType)||f]||[],a=a[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=r=p.length;r--;)u=p[r],!o&&g!==u.origType||n&&n.guid!==u.guid||a&&!a.test(u.namespace)||i&&i!==u.selector&&("**"!==i||!u.selector)||(p.splice(r,1),u.selector&&p.delegateCount--,d.remove&&d.remove.call(e,u));s&&!p.length&&(d.teardown&&!1!==d.teardown.call(e,h,m.handle)||w.removeEvent(e,f,m.handle),delete l[f])}else for(f in l)w.event.remove(e,f+t[c],n,i,!0);w.isEmptyObject(l)&&Y.remove(e,"handle events")}},dispatch:function(e){var t,n,i,o,r,s,a=new Array(arguments.length),l=w.event.fix(e),c=(Y.get(this,"events")||Object.create(null))[l.type]||[],u=w.event.special[l.type]||{};for(a[0]=l,t=1;t<arguments.length;t++)a[t]=arguments[t];if(l.delegateTarget=this,!u.preDispatch||!1!==u.preDispatch.call(this,l)){for(s=w.event.handlers.call(this,l,c),t=0;(o=s[t++])&&!l.isPropagationStopped();)for(l.currentTarget=o.elem,n=0;(r=o.handlers[n++])&&!l.isImmediatePropagationStopped();)l.rnamespace&&!1!==r.namespace&&!l.rnamespace.test(r.namespace)||(l.handleObj=r,l.data=r.data,void 0!==(i=((w.event.special[r.origType]||{}).handle||r.handler).apply(o.elem,a))&&!1===(l.result=i)&&(l.preventDefault(),l.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,l),l.result}},handlers:function(e,t){var n,i,o,r,s,a=[],l=t.delegateCount,c=e.target;if(l&&c.nodeType&&!("click"===e.type&&e.button>=1))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==e.type||!0!==c.disabled)){for(r=[],s={},n=0;n<l;n++)void 0===s[o=(i=t[n]).selector+" "]&&(s[o]=i.needsContext?w(o,this).index(c)>-1:w.find(o,this,null,[c]).length),s[o]&&r.push(i);r.length&&a.push({elem:c,handlers:r})}return c=this,l<t.length&&a.push({elem:c,handlers:t.slice(l)}),a},addProp:function(e,t){Object.defineProperty(w.Event.prototype,e,{enumerable:!0,configurable:!0,get:h(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[w.expando]?e:new w.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return pe.test(t.type)&&t.click&&k(t,"input")&&Ae(t,"click",xe),!1},trigger:function(e){var t=this||e;return pe.test(t.type)&&t.click&&k(t,"input")&&Ae(t,"click"),!0},_default:function(e){var t=e.target;return pe.test(t.type)&&t.click&&k(t,"input")&&Y.get(t,"click")||k(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},w.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},w.Event=function(e,t){if(!(this instanceof w.Event))return new w.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?xe:Ce,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&w.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[w.expando]=!0},w.Event.prototype={constructor:w.Event,isDefaultPrevented:Ce,isPropagationStopped:Ce,isImmediatePropagationStopped:Ce,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=xe,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=xe,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=xe,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},w.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:!0},w.event.addProp),w.each({focus:"focusin",blur:"focusout"},(function(e,t){w.event.special[e]={setup:function(){return Ae(this,e,Se),!1},trigger:function(){return Ae(this,e),!0},_default:function(){return!0},delegateType:t}})),w.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(e,t){w.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,i=this,o=e.relatedTarget,r=e.handleObj;return o&&(o===i||w.contains(i,o))||(e.type=r.origType,n=r.handler.apply(this,arguments),e.type=t),n}}})),w.fn.extend({on:function(e,t,n,i){return Te(this,e,t,n,i)},one:function(e,t,n,i){return Te(this,e,t,n,i,1)},off:function(e,t,n){var i,o;if(e&&e.preventDefault&&e.handleObj)return i=e.handleObj,w(e.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof e){for(o in e)this.off(o,t,e[o]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=Ce),this.each((function(){w.event.remove(this,e,n,t)}))}});var ke=/<script|<style|<link/i,De=/checked\s*(?:[^=]|=\s*.checked.)/i,Ee=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Oe(e,t){return k(e,"table")&&k(11!==t.nodeType?t:t.firstChild,"tr")&&w(e).children("tbody")[0]||e}function Ie(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Ne(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Pe(e,t){var n,i,o,r,s,a;if(1===t.nodeType){if(Y.hasData(e)&&(a=Y.get(e).events))for(o in Y.remove(t,"handle events"),a)for(n=0,i=a[o].length;n<i;n++)w.event.add(t,o,a[o][n]);V.hasData(e)&&(r=V.access(e),s=w.extend({},r),V.set(t,s))}}function Re(e,t){var n=t.nodeName.toLowerCase();"input"===n&&pe.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function $e(e,t,n,i){t=r(t);var o,s,a,l,c,u,d=0,p=e.length,g=p-1,m=t[0],y=h(m);if(y||p>1&&"string"==typeof m&&!f.checkClone&&De.test(m))return e.each((function(o){var r=e.eq(o);y&&(t[0]=m.call(this,o,r.html())),$e(r,t,n,i)}));if(p&&(s=(o=be(t,e[0].ownerDocument,!1,e,i)).firstChild,1===o.childNodes.length&&(o=s),s||i)){for(l=(a=w.map(me(o,"script"),Ie)).length;d<p;d++)c=o,d!==g&&(c=w.clone(c,!0,!0),l&&w.merge(a,me(c,"script"))),n.call(e[d],c,d);if(l)for(u=a[a.length-1].ownerDocument,w.map(a,Ne),d=0;d<l;d++)c=a[d],he.test(c.type||"")&&!Y.access(c,"globalEval")&&w.contains(u,c)&&(c.src&&"module"!==(c.type||"").toLowerCase()?w._evalUrl&&!c.noModule&&w._evalUrl(c.src,{nonce:c.nonce||c.getAttribute("nonce")},u):v(c.textContent.replace(Ee,""),c,u))}return e}function Me(e,t,n){for(var i,o=t?w.filter(t,e):e,r=0;null!=(i=o[r]);r++)n||1!==i.nodeType||w.cleanData(me(i)),i.parentNode&&(n&&ie(i)&&ye(me(i,"script")),i.parentNode.removeChild(i));return e}w.extend({htmlPrefilter:function(e){return e},clone:function(e,t,n){var i,o,r,s,a=e.cloneNode(!0),l=ie(e);if(!(f.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||w.isXMLDoc(e)))for(s=me(a),i=0,o=(r=me(e)).length;i<o;i++)Re(r[i],s[i]);if(t)if(n)for(r=r||me(e),s=s||me(a),i=0,o=r.length;i<o;i++)Pe(r[i],s[i]);else Pe(e,a);return(s=me(a,"script")).length>0&&ye(s,!l&&me(e,"script")),a},cleanData:function(e){for(var t,n,i,o=w.event.special,r=0;void 0!==(n=e[r]);r++)if(G(n)){if(t=n[Y.expando]){if(t.events)for(i in t.events)o[i]?w.event.remove(n,i):w.removeEvent(n,i,t.handle);n[Y.expando]=void 0}n[V.expando]&&(n[V.expando]=void 0)}}}),w.fn.extend({detach:function(e){return Me(this,e,!0)},remove:function(e){return Me(this,e)},text:function(e){return q(this,(function(e){return void 0===e?w.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)}))}),null,e,arguments.length)},append:function(){return $e(this,arguments,(function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Oe(this,e).appendChild(e)}))},prepend:function(){return $e(this,arguments,(function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Oe(this,e);t.insertBefore(e,t.firstChild)}}))},before:function(){return $e(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this)}))},after:function(){return $e(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)}))},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(w.cleanData(me(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map((function(){return w.clone(this,e,t)}))},html:function(e){return q(this,(function(e){var t=this[0]||{},n=0,i=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!ke.test(e)&&!ge[(fe.exec(e)||["",""])[1].toLowerCase()]){e=w.htmlPrefilter(e);try{for(;n<i;n++)1===(t=this[n]||{}).nodeType&&(w.cleanData(me(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)}),null,e,arguments.length)},replaceWith:function(){var e=[];return $e(this,arguments,(function(t){var n=this.parentNode;w.inArray(this,e)<0&&(w.cleanData(me(this)),n&&n.replaceChild(t,this))}),e)}}),w.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(e,t){w.fn[e]=function(e){for(var n,i=[],o=w(e),r=o.length-1,a=0;a<=r;a++)n=a===r?this:this.clone(!0),w(o[a])[t](n),s.apply(i,n.get());return this.pushStack(i)}}));var je=new RegExp("^("+J+")(?!px)[a-z%]+$","i"),Le=function(t){var n=t.ownerDocument.defaultView;return n&&n.opener||(n=e),n.getComputedStyle(t)},Be=function(e,t,n){var i,o,r={};for(o in t)r[o]=e.style[o],e.style[o]=t[o];for(o in i=n.call(e),t)e.style[o]=r[o];return i},Fe=new RegExp(te.join("|"),"i");function He(e,t,n){var i,o,r,s,a=e.style;return(n=n||Le(e))&&(""!==(s=n.getPropertyValue(t)||n[t])||ie(e)||(s=w.style(e,t)),!f.pixelBoxStyles()&&je.test(s)&&Fe.test(t)&&(i=a.width,o=a.minWidth,r=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=n.width,a.width=i,a.minWidth=o,a.maxWidth=r)),void 0!==s?s+"":s}function qe(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function t(){if(u){c.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",u.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",ne.appendChild(c).appendChild(u);var t=e.getComputedStyle(u);i="1%"!==t.top,l=12===n(t.marginLeft),u.style.right="60%",s=36===n(t.right),o=36===n(t.width),u.style.position="absolute",r=12===n(u.offsetWidth/3),ne.removeChild(c),u=null}}function n(e){return Math.round(parseFloat(e))}var i,o,r,s,a,l,c=m.createElement("div"),u=m.createElement("div");u.style&&(u.style.backgroundClip="content-box",u.cloneNode(!0).style.backgroundClip="",f.clearCloneStyle="content-box"===u.style.backgroundClip,w.extend(f,{boxSizingReliable:function(){return t(),o},pixelBoxStyles:function(){return t(),s},pixelPosition:function(){return t(),i},reliableMarginLeft:function(){return t(),l},scrollboxSize:function(){return t(),r},reliableTrDimensions:function(){var t,n,i,o;return null==a&&(t=m.createElement("table"),n=m.createElement("tr"),i=m.createElement("div"),t.style.cssText="position:absolute;left:-11111px;border-collapse:separate",n.style.cssText="border:1px solid",n.style.height="1px",i.style.height="9px",i.style.display="block",ne.appendChild(t).appendChild(n).appendChild(i),o=e.getComputedStyle(n),a=parseInt(o.height,10)+parseInt(o.borderTopWidth,10)+parseInt(o.borderBottomWidth,10)===n.offsetHeight,ne.removeChild(t)),a}}))}();var _e=["Webkit","Moz","ms"],We=m.createElement("div").style,ze={};function Ue(e){var t=w.cssProps[e]||ze[e];return t||(e in We?e:ze[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),n=_e.length;n--;)if((e=_e[n]+t)in We)return e}(e)||e)}var Ge=/^(none|table(?!-c[ea]).+)/,Xe=/^--/,Ye={position:"absolute",visibility:"hidden",display:"block"},Ve={letterSpacing:"0",fontWeight:"400"};function Ke(e,t,n){var i=ee.exec(t);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):t}function Qe(e,t,n,i,o,r){var s="width"===t?1:0,a=0,l=0;if(n===(i?"border":"content"))return 0;for(;s<4;s+=2)"margin"===n&&(l+=w.css(e,n+te[s],!0,o)),i?("content"===n&&(l-=w.css(e,"padding"+te[s],!0,o)),"margin"!==n&&(l-=w.css(e,"border"+te[s]+"Width",!0,o))):(l+=w.css(e,"padding"+te[s],!0,o),"padding"!==n?l+=w.css(e,"border"+te[s]+"Width",!0,o):a+=w.css(e,"border"+te[s]+"Width",!0,o));return!i&&r>=0&&(l+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-r-l-a-.5))||0),l}function Ze(e,t,n){var i=Le(e),o=(!f.boxSizingReliable()||n)&&"border-box"===w.css(e,"boxSizing",!1,i),r=o,s=He(e,t,i),a="offset"+t[0].toUpperCase()+t.slice(1);if(je.test(s)){if(!n)return s;s="auto"}return(!f.boxSizingReliable()&&o||!f.reliableTrDimensions()&&k(e,"tr")||"auto"===s||!parseFloat(s)&&"inline"===w.css(e,"display",!1,i))&&e.getClientRects().length&&(o="border-box"===w.css(e,"boxSizing",!1,i),(r=a in e)&&(s=e[a])),(s=parseFloat(s)||0)+Qe(e,t,n||(o?"border":"content"),r,i,s)+"px"}function Je(e,t,n,i,o){return new Je.prototype.init(e,t,n,i,o)}w.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=He(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,i){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var o,r,s,a=U(t),l=Xe.test(t),c=e.style;if(l||(t=Ue(a)),s=w.cssHooks[t]||w.cssHooks[a],void 0===n)return s&&"get"in s&&void 0!==(o=s.get(e,!1,i))?o:c[t];"string"===(r=typeof n)&&(o=ee.exec(n))&&o[1]&&(n=se(e,t,o),r="number"),null!=n&&n==n&&("number"!==r||l||(n+=o&&o[3]||(w.cssNumber[a]?"":"px")),f.clearCloneStyle||""!==n||0!==t.indexOf("background")||(c[t]="inherit"),s&&"set"in s&&void 0===(n=s.set(e,n,i))||(l?c.setProperty(t,n):c[t]=n))}},css:function(e,t,n,i){var o,r,s,a=U(t);return Xe.test(t)||(t=Ue(a)),(s=w.cssHooks[t]||w.cssHooks[a])&&"get"in s&&(o=s.get(e,!0,n)),void 0===o&&(o=He(e,t,i)),"normal"===o&&t in Ve&&(o=Ve[t]),""===n||n?(r=parseFloat(o),!0===n||isFinite(r)?r||0:o):o}}),w.each(["height","width"],(function(e,t){w.cssHooks[t]={get:function(e,n,i){if(n)return!Ge.test(w.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?Ze(e,t,i):Be(e,Ye,(function(){return Ze(e,t,i)}))},set:function(e,n,i){var o,r=Le(e),s=!f.scrollboxSize()&&"absolute"===r.position,a=(s||i)&&"border-box"===w.css(e,"boxSizing",!1,r),l=i?Qe(e,t,i,a,r):0;return a&&s&&(l-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(r[t])-Qe(e,t,"border",!1,r)-.5)),l&&(o=ee.exec(n))&&"px"!==(o[3]||"px")&&(e.style[t]=n,n=w.css(e,t)),Ke(0,n,l)}}})),w.cssHooks.marginLeft=qe(f.reliableMarginLeft,(function(e,t){if(t)return(parseFloat(He(e,"marginLeft"))||e.getBoundingClientRect().left-Be(e,{marginLeft:0},(function(){return e.getBoundingClientRect().left})))+"px"})),w.each({margin:"",padding:"",border:"Width"},(function(e,t){w.cssHooks[e+t]={expand:function(n){for(var i=0,o={},r="string"==typeof n?n.split(" "):[n];i<4;i++)o[e+te[i]+t]=r[i]||r[i-2]||r[0];return o}},"margin"!==e&&(w.cssHooks[e+t].set=Ke)})),w.fn.extend({css:function(e,t){return q(this,(function(e,t,n){var i,o,r={},s=0;if(Array.isArray(t)){for(i=Le(e),o=t.length;s<o;s++)r[t[s]]=w.css(e,t[s],!1,i);return r}return void 0!==n?w.style(e,t,n):w.css(e,t)}),e,t,arguments.length>1)}}),w.Tween=Je,Je.prototype={constructor:Je,init:function(e,t,n,i,o,r){this.elem=e,this.prop=n,this.easing=o||w.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=i,this.unit=r||(w.cssNumber[n]?"":"px")},cur:function(){var e=Je.propHooks[this.prop];return e&&e.get?e.get(this):Je.propHooks._default.get(this)},run:function(e){var t,n=Je.propHooks[this.prop];return this.options.duration?this.pos=t=w.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):Je.propHooks._default.set(this),this}},Je.prototype.init.prototype=Je.prototype,Je.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=w.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){w.fx.step[e.prop]?w.fx.step[e.prop](e):1!==e.elem.nodeType||!w.cssHooks[e.prop]&&null==e.elem.style[Ue(e.prop)]?e.elem[e.prop]=e.now:w.style(e.elem,e.prop,e.now+e.unit)}}},Je.propHooks.scrollTop=Je.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},w.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},w.fx=Je.prototype.init,w.fx.step={};var et,tt,nt=/^(?:toggle|show|hide)$/,it=/queueHooks$/;function ot(){tt&&(!1===m.hidden&&e.requestAnimationFrame?e.requestAnimationFrame(ot):e.setTimeout(ot,w.fx.interval),w.fx.tick())}function rt(){return e.setTimeout((function(){et=void 0})),et=Date.now()}function st(e,t){var n,i=0,o={height:e};for(t=t?1:0;i<4;i+=2-t)o["margin"+(n=te[i])]=o["padding"+n]=e;return t&&(o.opacity=o.width=e),o}function at(e,t,n){for(var i,o=(lt.tweeners[t]||[]).concat(lt.tweeners["*"]),r=0,s=o.length;r<s;r++)if(i=o[r].call(n,t,e))return i}function lt(e,t,n){var i,o,r=0,s=lt.prefilters.length,a=w.Deferred().always((function(){delete l.elem})),l=function(){if(o)return!1;for(var t=et||rt(),n=Math.max(0,c.startTime+c.duration-t),i=1-(n/c.duration||0),r=0,s=c.tweens.length;r<s;r++)c.tweens[r].run(i);return a.notifyWith(e,[c,i,n]),i<1&&s?n:(s||a.notifyWith(e,[c,1,0]),a.resolveWith(e,[c]),!1)},c=a.promise({elem:e,props:w.extend({},t),opts:w.extend(!0,{specialEasing:{},easing:w.easing._default},n),originalProperties:t,originalOptions:n,startTime:et||rt(),duration:n.duration,tweens:[],createTween:function(t,n){var i=w.Tween(e,c.opts,t,n,c.opts.specialEasing[t]||c.opts.easing);return c.tweens.push(i),i},stop:function(t){var n=0,i=t?c.tweens.length:0;if(o)return this;for(o=!0;n<i;n++)c.tweens[n].run(1);return t?(a.notifyWith(e,[c,1,0]),a.resolveWith(e,[c,t])):a.rejectWith(e,[c,t]),this}}),u=c.props;for(!function(e,t){var n,i,o,r,s;for(n in e)if(o=t[i=U(n)],r=e[n],Array.isArray(r)&&(o=r[1],r=e[n]=r[0]),n!==i&&(e[i]=r,delete e[n]),(s=w.cssHooks[i])&&"expand"in s)for(n in r=s.expand(r),delete e[i],r)n in e||(e[n]=r[n],t[n]=o);else t[i]=o}(u,c.opts.specialEasing);r<s;r++)if(i=lt.prefilters[r].call(c,e,u,c.opts))return h(i.stop)&&(w._queueHooks(c.elem,c.opts.queue).stop=i.stop.bind(i)),i;return w.map(u,at,c),h(c.opts.start)&&c.opts.start.call(e,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),w.fx.timer(w.extend(l,{elem:e,anim:c,queue:c.opts.queue})),c}w.Animation=w.extend(lt,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return se(n.elem,e,ee.exec(t),n),n}]},tweener:function(e,t){h(e)?(t=e,e=["*"]):e=e.match($);for(var n,i=0,o=e.length;i<o;i++)n=e[i],lt.tweeners[n]=lt.tweeners[n]||[],lt.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var i,o,r,s,a,l,c,u,d="width"in t||"height"in t,p=this,f={},h=e.style,g=e.nodeType&&re(e),m=Y.get(e,"fxshow");for(i in n.queue||(null==(s=w._queueHooks(e,"fx")).unqueued&&(s.unqueued=0,a=s.empty.fire,s.empty.fire=function(){s.unqueued||a()}),s.unqueued++,p.always((function(){p.always((function(){s.unqueued--,w.queue(e,"fx").length||s.empty.fire()}))}))),t)if(o=t[i],nt.test(o)){if(delete t[i],r=r||"toggle"===o,o===(g?"hide":"show")){if("show"!==o||!m||void 0===m[i])continue;g=!0}f[i]=m&&m[i]||w.style(e,i)}if((l=!w.isEmptyObject(t))||!w.isEmptyObject(f))for(i in d&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],null==(c=m&&m.display)&&(c=Y.get(e,"display")),"none"===(u=w.css(e,"display"))&&(c?u=c:(ce([e],!0),c=e.style.display||c,u=w.css(e,"display"),ce([e]))),("inline"===u||"inline-block"===u&&null!=c)&&"none"===w.css(e,"float")&&(l||(p.done((function(){h.display=c})),null==c&&(u=h.display,c="none"===u?"":u)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",p.always((function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]}))),l=!1,f)l||(m?"hidden"in m&&(g=m.hidden):m=Y.access(e,"fxshow",{display:c}),r&&(m.hidden=!g),g&&ce([e],!0),p.done((function(){for(i in g||ce([e]),Y.remove(e,"fxshow"),f)w.style(e,i,f[i])}))),l=at(g?m[i]:0,i,p),i in m||(m[i]=l.start,g&&(l.end=l.start,l.start=0))}],prefilter:function(e,t){t?lt.prefilters.unshift(e):lt.prefilters.push(e)}}),w.speed=function(e,t,n){var i=e&&"object"==typeof e?w.extend({},e):{complete:n||!n&&t||h(e)&&e,duration:e,easing:n&&t||t&&!h(t)&&t};return w.fx.off?i.duration=0:"number"!=typeof i.duration&&(i.duration in w.fx.speeds?i.duration=w.fx.speeds[i.duration]:i.duration=w.fx.speeds._default),null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){h(i.old)&&i.old.call(this),i.queue&&w.dequeue(this,i.queue)},i},w.fn.extend({fadeTo:function(e,t,n,i){return this.filter(re).css("opacity",0).show().end().animate({opacity:t},e,n,i)},animate:function(e,t,n,i){var o=w.isEmptyObject(e),r=w.speed(t,n,i),s=function(){var t=lt(this,w.extend({},e),r);(o||Y.get(this,"finish"))&&t.stop(!0)};return s.finish=s,o||!1===r.queue?this.each(s):this.queue(r.queue,s)},stop:function(e,t,n){var i=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&this.queue(e||"fx",[]),this.each((function(){var t=!0,o=null!=e&&e+"queueHooks",r=w.timers,s=Y.get(this);if(o)s[o]&&s[o].stop&&i(s[o]);else for(o in s)s[o]&&s[o].stop&&it.test(o)&&i(s[o]);for(o=r.length;o--;)r[o].elem!==this||null!=e&&r[o].queue!==e||(r[o].anim.stop(n),t=!1,r.splice(o,1));!t&&n||w.dequeue(this,e)}))},finish:function(e){return!1!==e&&(e=e||"fx"),this.each((function(){var t,n=Y.get(this),i=n[e+"queue"],o=n[e+"queueHooks"],r=w.timers,s=i?i.length:0;for(n.finish=!0,w.queue(this,e,[]),o&&o.stop&&o.stop.call(this,!0),t=r.length;t--;)r[t].elem===this&&r[t].queue===e&&(r[t].anim.stop(!0),r.splice(t,1));for(t=0;t<s;t++)i[t]&&i[t].finish&&i[t].finish.call(this);delete n.finish}))}}),w.each(["toggle","show","hide"],(function(e,t){var n=w.fn[t];w.fn[t]=function(e,i,o){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(st(t,!0),e,i,o)}})),w.each({slideDown:st("show"),slideUp:st("hide"),slideToggle:st("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(e,t){w.fn[e]=function(e,n,i){return this.animate(t,e,n,i)}})),w.timers=[],w.fx.tick=function(){var e,t=0,n=w.timers;for(et=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||w.fx.stop(),et=void 0},w.fx.timer=function(e){w.timers.push(e),w.fx.start()},w.fx.interval=13,w.fx.start=function(){tt||(tt=!0,ot())},w.fx.stop=function(){tt=null},w.fx.speeds={slow:600,fast:200,_default:400},w.fn.delay=function(t,n){return t=w.fx&&w.fx.speeds[t]||t,n=n||"fx",this.queue(n,(function(n,i){var o=e.setTimeout(n,t);i.stop=function(){e.clearTimeout(o)}}))},function(){var e=m.createElement("input"),t=m.createElement("select").appendChild(m.createElement("option"));e.type="checkbox",f.checkOn=""!==e.value,f.optSelected=t.selected,(e=m.createElement("input")).value="t",e.type="radio",f.radioValue="t"===e.value}();var ct,ut=w.expr.attrHandle;w.fn.extend({attr:function(e,t){return q(this,w.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each((function(){w.removeAttr(this,e)}))}}),w.extend({attr:function(e,t,n){var i,o,r=e.nodeType;if(3!==r&&8!==r&&2!==r)return void 0===e.getAttribute?w.prop(e,t,n):(1===r&&w.isXMLDoc(e)||(o=w.attrHooks[t.toLowerCase()]||(w.expr.match.bool.test(t)?ct:void 0)),void 0!==n?null===n?void w.removeAttr(e,t):o&&"set"in o&&void 0!==(i=o.set(e,n,t))?i:(e.setAttribute(t,n+""),n):o&&"get"in o&&null!==(i=o.get(e,t))?i:null==(i=w.find.attr(e,t))?void 0:i)},attrHooks:{type:{set:function(e,t){if(!f.radioValue&&"radio"===t&&k(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,i=0,o=t&&t.match($);if(o&&1===e.nodeType)for(;n=o[i++];)e.removeAttribute(n)}}),ct={set:function(e,t,n){return!1===t?w.removeAttr(e,n):e.setAttribute(n,n),n}},w.each(w.expr.match.bool.source.match(/\w+/g),(function(e,t){var n=ut[t]||w.find.attr;ut[t]=function(e,t,i){var o,r,s=t.toLowerCase();return i||(r=ut[s],ut[s]=o,o=null!=n(e,t,i)?s:null,ut[s]=r),o}}));var dt=/^(?:input|select|textarea|button)$/i,pt=/^(?:a|area)$/i;function ft(e){return(e.match($)||[]).join(" ")}function ht(e){return e.getAttribute&&e.getAttribute("class")||""}function gt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match($)||[]}w.fn.extend({prop:function(e,t){return q(this,w.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each((function(){delete this[w.propFix[e]||e]}))}}),w.extend({prop:function(e,t,n){var i,o,r=e.nodeType;if(3!==r&&8!==r&&2!==r)return 1===r&&w.isXMLDoc(e)||(t=w.propFix[t]||t,o=w.propHooks[t]),void 0!==n?o&&"set"in o&&void 0!==(i=o.set(e,n,t))?i:e[t]=n:o&&"get"in o&&null!==(i=o.get(e,t))?i:e[t]},propHooks:{tabIndex:{get:function(e){var t=w.find.attr(e,"tabindex");return t?parseInt(t,10):dt.test(e.nodeName)||pt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),f.optSelected||(w.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),w.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){w.propFix[this.toLowerCase()]=this})),w.fn.extend({addClass:function(e){var t,n,i,o,r,s,a,l=0;if(h(e))return this.each((function(t){w(this).addClass(e.call(this,t,ht(this)))}));if((t=gt(e)).length)for(;n=this[l++];)if(o=ht(n),i=1===n.nodeType&&" "+ft(o)+" "){for(s=0;r=t[s++];)i.indexOf(" "+r+" ")<0&&(i+=r+" ");o!==(a=ft(i))&&n.setAttribute("class",a)}return this},removeClass:function(e){var t,n,i,o,r,s,a,l=0;if(h(e))return this.each((function(t){w(this).removeClass(e.call(this,t,ht(this)))}));if(!arguments.length)return this.attr("class","");if((t=gt(e)).length)for(;n=this[l++];)if(o=ht(n),i=1===n.nodeType&&" "+ft(o)+" "){for(s=0;r=t[s++];)for(;i.indexOf(" "+r+" ")>-1;)i=i.replace(" "+r+" "," ");o!==(a=ft(i))&&n.setAttribute("class",a)}return this},toggleClass:function(e,t){var n=typeof e,i="string"===n||Array.isArray(e);return"boolean"==typeof t&&i?t?this.addClass(e):this.removeClass(e):h(e)?this.each((function(n){w(this).toggleClass(e.call(this,n,ht(this),t),t)})):this.each((function(){var t,o,r,s;if(i)for(o=0,r=w(this),s=gt(e);t=s[o++];)r.hasClass(t)?r.removeClass(t):r.addClass(t);else void 0!==e&&"boolean"!==n||((t=ht(this))&&Y.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":Y.get(this,"__className__")||""))}))},hasClass:function(e){var t,n,i=0;for(t=" "+e+" ";n=this[i++];)if(1===n.nodeType&&(" "+ft(ht(n))+" ").indexOf(t)>-1)return!0;return!1}});var mt=/\r/g;w.fn.extend({val:function(e){var t,n,i,o=this[0];return arguments.length?(i=h(e),this.each((function(n){var o;1===this.nodeType&&(null==(o=i?e.call(this,n,w(this).val()):e)?o="":"number"==typeof o?o+="":Array.isArray(o)&&(o=w.map(o,(function(e){return null==e?"":e+""}))),(t=w.valHooks[this.type]||w.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,o,"value")||(this.value=o))}))):o?(t=w.valHooks[o.type]||w.valHooks[o.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(o,"value"))?n:"string"==typeof(n=o.value)?n.replace(mt,""):null==n?"":n:void 0}}),w.extend({valHooks:{option:{get:function(e){var t=w.find.attr(e,"value");return null!=t?t:ft(w.text(e))}},select:{get:function(e){var t,n,i,o=e.options,r=e.selectedIndex,s="select-one"===e.type,a=s?null:[],l=s?r+1:o.length;for(i=r<0?l:s?r:0;i<l;i++)if(((n=o[i]).selected||i===r)&&!n.disabled&&(!n.parentNode.disabled||!k(n.parentNode,"optgroup"))){if(t=w(n).val(),s)return t;a.push(t)}return a},set:function(e,t){for(var n,i,o=e.options,r=w.makeArray(t),s=o.length;s--;)((i=o[s]).selected=w.inArray(w.valHooks.option.get(i),r)>-1)&&(n=!0);return n||(e.selectedIndex=-1),r}}}}),w.each(["radio","checkbox"],(function(){w.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=w.inArray(w(e).val(),t)>-1}},f.checkOn||(w.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})})),f.focusin="onfocusin"in e;var yt=/^(?:focusinfocus|focusoutblur)$/,vt=function(e){e.stopPropagation()};w.extend(w.event,{trigger:function(t,n,i,o){var r,s,a,l,c,d,p,f,y=[i||m],v=u.call(t,"type")?t.type:t,b=u.call(t,"namespace")?t.namespace.split("."):[];if(s=f=a=i=i||m,3!==i.nodeType&&8!==i.nodeType&&!yt.test(v+w.event.triggered)&&(v.indexOf(".")>-1&&(b=v.split("."),v=b.shift(),b.sort()),c=v.indexOf(":")<0&&"on"+v,(t=t[w.expando]?t:new w.Event(v,"object"==typeof t&&t)).isTrigger=o?2:3,t.namespace=b.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+b.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=i),n=null==n?[t]:w.makeArray(n,[t]),p=w.event.special[v]||{},o||!p.trigger||!1!==p.trigger.apply(i,n))){if(!o&&!p.noBubble&&!g(i)){for(l=p.delegateType||v,yt.test(l+v)||(s=s.parentNode);s;s=s.parentNode)y.push(s),a=s;a===(i.ownerDocument||m)&&y.push(a.defaultView||a.parentWindow||e)}for(r=0;(s=y[r++])&&!t.isPropagationStopped();)f=s,t.type=r>1?l:p.bindType||v,(d=(Y.get(s,"events")||Object.create(null))[t.type]&&Y.get(s,"handle"))&&d.apply(s,n),(d=c&&s[c])&&d.apply&&G(s)&&(t.result=d.apply(s,n),!1===t.result&&t.preventDefault());return t.type=v,o||t.isDefaultPrevented()||p._default&&!1!==p._default.apply(y.pop(),n)||!G(i)||c&&h(i[v])&&!g(i)&&((a=i[c])&&(i[c]=null),w.event.triggered=v,t.isPropagationStopped()&&f.addEventListener(v,vt),i[v](),t.isPropagationStopped()&&f.removeEventListener(v,vt),w.event.triggered=void 0,a&&(i[c]=a)),t.result}},simulate:function(e,t,n){var i=w.extend(new w.Event,n,{type:e,isSimulated:!0});w.event.trigger(i,null,t)}}),w.fn.extend({trigger:function(e,t){return this.each((function(){w.event.trigger(e,t,this)}))},triggerHandler:function(e,t){var n=this[0];if(n)return w.event.trigger(e,t,n,!0)}}),f.focusin||w.each({focus:"focusin",blur:"focusout"},(function(e,t){var n=function(e){w.event.simulate(t,e.target,w.event.fix(e))};w.event.special[t]={setup:function(){var i=this.ownerDocument||this.document||this,o=Y.access(i,t);o||i.addEventListener(e,n,!0),Y.access(i,t,(o||0)+1)},teardown:function(){var i=this.ownerDocument||this.document||this,o=Y.access(i,t)-1;o?Y.access(i,t,o):(i.removeEventListener(e,n,!0),Y.remove(i,t))}}}));var bt=e.location,wt={guid:Date.now()},xt=/\?/;w.parseXML=function(t){var n,i;if(!t||"string"!=typeof t)return null;try{n=(new e.DOMParser).parseFromString(t,"text/xml")}catch(e){}return i=n&&n.getElementsByTagName("parsererror")[0],n&&!i||w.error("Invalid XML: "+(i?w.map(i.childNodes,(function(e){return e.textContent})).join("\n"):t)),n};var Ct=/\[\]$/,St=/\r?\n/g,Tt=/^(?:submit|button|image|reset|file)$/i,At=/^(?:input|select|textarea|keygen)/i;function kt(e,t,n,i){var o;if(Array.isArray(t))w.each(t,(function(t,o){n||Ct.test(e)?i(e,o):kt(e+"["+("object"==typeof o&&null!=o?t:"")+"]",o,n,i)}));else if(n||"object"!==b(t))i(e,t);else for(o in t)kt(e+"["+o+"]",t[o],n,i)}w.param=function(e,t){var n,i=[],o=function(e,t){var n=h(t)?t():t;i[i.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(null==e)return"";if(Array.isArray(e)||e.jquery&&!w.isPlainObject(e))w.each(e,(function(){o(this.name,this.value)}));else for(n in e)kt(n,e[n],t,o);return i.join("&")},w.fn.extend({serialize:function(){return w.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var e=w.prop(this,"elements");return e?w.makeArray(e):this})).filter((function(){var e=this.type;return this.name&&!w(this).is(":disabled")&&At.test(this.nodeName)&&!Tt.test(e)&&(this.checked||!pe.test(e))})).map((function(e,t){var n=w(this).val();return null==n?null:Array.isArray(n)?w.map(n,(function(e){return{name:t.name,value:e.replace(St,"\r\n")}})):{name:t.name,value:n.replace(St,"\r\n")}})).get()}});var Dt=/%20/g,Et=/#.*$/,Ot=/([?&])_=[^&]*/,It=/^(.*?):[ \t]*([^\r\n]*)$/gm,Nt=/^(?:GET|HEAD)$/,Pt=/^\/\//,Rt={},$t={},Mt="*/".concat("*"),jt=m.createElement("a");function Lt(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var i,o=0,r=t.toLowerCase().match($)||[];if(h(n))for(;i=r[o++];)"+"===i[0]?(i=i.slice(1)||"*",(e[i]=e[i]||[]).unshift(n)):(e[i]=e[i]||[]).push(n)}}function Bt(e,t,n,i){var o={},r=e===$t;function s(a){var l;return o[a]=!0,w.each(e[a]||[],(function(e,a){var c=a(t,n,i);return"string"!=typeof c||r||o[c]?r?!(l=c):void 0:(t.dataTypes.unshift(c),s(c),!1)})),l}return s(t.dataTypes[0])||!o["*"]&&s("*")}function Ft(e,t){var n,i,o=w.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((o[n]?e:i||(i={}))[n]=t[n]);return i&&w.extend(!0,e,i),e}jt.href=bt.href,w.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:bt.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(bt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Mt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":w.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Ft(Ft(e,w.ajaxSettings),t):Ft(w.ajaxSettings,e)},ajaxPrefilter:Lt(Rt),ajaxTransport:Lt($t),ajax:function(t,n){"object"==typeof t&&(n=t,t=void 0),n=n||{};var i,o,r,s,a,l,c,u,d,p,f=w.ajaxSetup({},n),h=f.context||f,g=f.context&&(h.nodeType||h.jquery)?w(h):w.event,y=w.Deferred(),v=w.Callbacks("once memory"),b=f.statusCode||{},x={},C={},S="canceled",T={readyState:0,getResponseHeader:function(e){var t;if(c){if(!s)for(s={};t=It.exec(r);)s[t[1].toLowerCase()+" "]=(s[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=s[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return c?r:null},setRequestHeader:function(e,t){return null==c&&(e=C[e.toLowerCase()]=C[e.toLowerCase()]||e,x[e]=t),this},overrideMimeType:function(e){return null==c&&(f.mimeType=e),this},statusCode:function(e){var t;if(e)if(c)T.always(e[T.status]);else for(t in e)b[t]=[b[t],e[t]];return this},abort:function(e){var t=e||S;return i&&i.abort(t),A(0,t),this}};if(y.promise(T),f.url=((t||f.url||bt.href)+"").replace(Pt,bt.protocol+"//"),f.type=n.method||n.type||f.method||f.type,f.dataTypes=(f.dataType||"*").toLowerCase().match($)||[""],null==f.crossDomain){l=m.createElement("a");try{l.href=f.url,l.href=l.href,f.crossDomain=jt.protocol+"//"+jt.host!=l.protocol+"//"+l.host}catch(e){f.crossDomain=!0}}if(f.data&&f.processData&&"string"!=typeof f.data&&(f.data=w.param(f.data,f.traditional)),Bt(Rt,f,n,T),c)return T;for(d in(u=w.event&&f.global)&&0==w.active++&&w.event.trigger("ajaxStart"),f.type=f.type.toUpperCase(),f.hasContent=!Nt.test(f.type),o=f.url.replace(Et,""),f.hasContent?f.data&&f.processData&&0===(f.contentType||"").indexOf("application/x-www-form-urlencoded")&&(f.data=f.data.replace(Dt,"+")):(p=f.url.slice(o.length),f.data&&(f.processData||"string"==typeof f.data)&&(o+=(xt.test(o)?"&":"?")+f.data,delete f.data),!1===f.cache&&(o=o.replace(Ot,"$1"),p=(xt.test(o)?"&":"?")+"_="+wt.guid+++p),f.url=o+p),f.ifModified&&(w.lastModified[o]&&T.setRequestHeader("If-Modified-Since",w.lastModified[o]),w.etag[o]&&T.setRequestHeader("If-None-Match",w.etag[o])),(f.data&&f.hasContent&&!1!==f.contentType||n.contentType)&&T.setRequestHeader("Content-Type",f.contentType),T.setRequestHeader("Accept",f.dataTypes[0]&&f.accepts[f.dataTypes[0]]?f.accepts[f.dataTypes[0]]+("*"!==f.dataTypes[0]?", "+Mt+"; q=0.01":""):f.accepts["*"]),f.headers)T.setRequestHeader(d,f.headers[d]);if(f.beforeSend&&(!1===f.beforeSend.call(h,T,f)||c))return T.abort();if(S="abort",v.add(f.complete),T.done(f.success),T.fail(f.error),i=Bt($t,f,n,T)){if(T.readyState=1,u&&g.trigger("ajaxSend",[T,f]),c)return T;f.async&&f.timeout>0&&(a=e.setTimeout((function(){T.abort("timeout")}),f.timeout));try{c=!1,i.send(x,A)}catch(e){if(c)throw e;A(-1,e)}}else A(-1,"No Transport");function A(t,n,s,l){var d,p,m,x,C,S=n;c||(c=!0,a&&e.clearTimeout(a),i=void 0,r=l||"",T.readyState=t>0?4:0,d=t>=200&&t<300||304===t,s&&(x=function(e,t,n){for(var i,o,r,s,a=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=e.mimeType||t.getResponseHeader("Content-Type"));if(i)for(o in a)if(a[o]&&a[o].test(i)){l.unshift(o);break}if(l[0]in n)r=l[0];else{for(o in n){if(!l[0]||e.converters[o+" "+l[0]]){r=o;break}s||(s=o)}r=r||s}if(r)return r!==l[0]&&l.unshift(r),n[r]}(f,T,s)),!d&&w.inArray("script",f.dataTypes)>-1&&w.inArray("json",f.dataTypes)<0&&(f.converters["text script"]=function(){}),x=function(e,t,n,i){var o,r,s,a,l,c={},u=e.dataTypes.slice();if(u[1])for(s in e.converters)c[s.toLowerCase()]=e.converters[s];for(r=u.shift();r;)if(e.responseFields[r]&&(n[e.responseFields[r]]=t),!l&&i&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=r,r=u.shift())if("*"===r)r=l;else if("*"!==l&&l!==r){if(!(s=c[l+" "+r]||c["* "+r]))for(o in c)if((a=o.split(" "))[1]===r&&(s=c[l+" "+a[0]]||c["* "+a[0]])){!0===s?s=c[o]:!0!==c[o]&&(r=a[0],u.unshift(a[1]));break}if(!0!==s)if(s&&e.throws)t=s(t);else try{t=s(t)}catch(e){return{state:"parsererror",error:s?e:"No conversion from "+l+" to "+r}}}return{state:"success",data:t}}(f,x,T,d),d?(f.ifModified&&((C=T.getResponseHeader("Last-Modified"))&&(w.lastModified[o]=C),(C=T.getResponseHeader("etag"))&&(w.etag[o]=C)),204===t||"HEAD"===f.type?S="nocontent":304===t?S="notmodified":(S=x.state,p=x.data,d=!(m=x.error))):(m=S,!t&&S||(S="error",t<0&&(t=0))),T.status=t,T.statusText=(n||S)+"",d?y.resolveWith(h,[p,S,T]):y.rejectWith(h,[T,S,m]),T.statusCode(b),b=void 0,u&&g.trigger(d?"ajaxSuccess":"ajaxError",[T,f,d?p:m]),v.fireWith(h,[T,S]),u&&(g.trigger("ajaxComplete",[T,f]),--w.active||w.event.trigger("ajaxStop")))}return T},getJSON:function(e,t,n){return w.get(e,t,n,"json")},getScript:function(e,t){return w.get(e,void 0,t,"script")}}),w.each(["get","post"],(function(e,t){w[t]=function(e,n,i,o){return h(n)&&(o=o||i,i=n,n=void 0),w.ajax(w.extend({url:e,type:t,dataType:o,data:n,success:i},w.isPlainObject(e)&&e))}})),w.ajaxPrefilter((function(e){var t;for(t in e.headers)"content-type"===t.toLowerCase()&&(e.contentType=e.headers[t]||"")})),w._evalUrl=function(e,t,n){return w.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){w.globalEval(e,t,n)}})},w.fn.extend({wrapAll:function(e){var t;return this[0]&&(h(e)&&(e=e.call(this[0])),t=w(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map((function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e})).append(this)),this},wrapInner:function(e){return h(e)?this.each((function(t){w(this).wrapInner(e.call(this,t))})):this.each((function(){var t=w(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)}))},wrap:function(e){var t=h(e);return this.each((function(n){w(this).wrapAll(t?e.call(this,n):e)}))},unwrap:function(e){return this.parent(e).not("body").each((function(){w(this).replaceWith(this.childNodes)})),this}}),w.expr.pseudos.hidden=function(e){return!w.expr.pseudos.visible(e)},w.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},w.ajaxSettings.xhr=function(){try{return new e.XMLHttpRequest}catch(e){}};var Ht={0:200,1223:204},qt=w.ajaxSettings.xhr();f.cors=!!qt&&"withCredentials"in qt,f.ajax=qt=!!qt,w.ajaxTransport((function(t){var n,i;if(f.cors||qt&&!t.crossDomain)return{send:function(o,r){var s,a=t.xhr();if(a.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(s in t.xhrFields)a[s]=t.xhrFields[s];for(s in t.mimeType&&a.overrideMimeType&&a.overrideMimeType(t.mimeType),t.crossDomain||o["X-Requested-With"]||(o["X-Requested-With"]="XMLHttpRequest"),o)a.setRequestHeader(s,o[s]);n=function(e){return function(){n&&(n=i=a.onload=a.onerror=a.onabort=a.ontimeout=a.onreadystatechange=null,"abort"===e?a.abort():"error"===e?"number"!=typeof a.status?r(0,"error"):r(a.status,a.statusText):r(Ht[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=n(),i=a.onerror=a.ontimeout=n("error"),void 0!==a.onabort?a.onabort=i:a.onreadystatechange=function(){4===a.readyState&&e.setTimeout((function(){n&&i()}))},n=n("abort");try{a.send(t.hasContent&&t.data||null)}catch(e){if(n)throw e}},abort:function(){n&&n()}}})),w.ajaxPrefilter((function(e){e.crossDomain&&(e.contents.script=!1)})),w.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return w.globalEval(e),e}}}),w.ajaxPrefilter("script",(function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")})),w.ajaxTransport("script",(function(e){var t,n;if(e.crossDomain||e.scriptAttrs)return{send:function(i,o){t=w("<script>").attr(e.scriptAttrs||{}).prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&o("error"===e.type?404:200,e.type)}),m.head.appendChild(t[0])},abort:function(){n&&n()}}}));var _t,Wt=[],zt=/(=)\?(?=&|$)|\?\?/;w.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Wt.pop()||w.expando+"_"+wt.guid++;return this[e]=!0,e}}),w.ajaxPrefilter("json jsonp",(function(t,n,i){var o,r,s,a=!1!==t.jsonp&&(zt.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&zt.test(t.data)&&"data");if(a||"jsonp"===t.dataTypes[0])return o=t.jsonpCallback=h(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,a?t[a]=t[a].replace(zt,"$1"+o):!1!==t.jsonp&&(t.url+=(xt.test(t.url)?"&":"?")+t.jsonp+"="+o),t.converters["script json"]=function(){return s||w.error(o+" was not called"),s[0]},t.dataTypes[0]="json",r=e[o],e[o]=function(){s=arguments},i.always((function(){void 0===r?w(e).removeProp(o):e[o]=r,t[o]&&(t.jsonpCallback=n.jsonpCallback,Wt.push(o)),s&&h(r)&&r(s[0]),s=r=void 0})),"script"})),f.createHTMLDocument=((_t=m.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===_t.childNodes.length),w.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(f.createHTMLDocument?((i=(t=m.implementation.createHTMLDocument("")).createElement("base")).href=m.location.href,t.head.appendChild(i)):t=m),r=!n&&[],(o=D.exec(e))?[t.createElement(o[1])]:(o=be([e],t,r),r&&r.length&&w(r).remove(),w.merge([],o.childNodes)));var i,o,r},w.fn.load=function(e,t,n){var i,o,r,s=this,a=e.indexOf(" ");return a>-1&&(i=ft(e.slice(a)),e=e.slice(0,a)),h(t)?(n=t,t=void 0):t&&"object"==typeof t&&(o="POST"),s.length>0&&w.ajax({url:e,type:o||"GET",dataType:"html",data:t}).done((function(e){r=arguments,s.html(i?w("<div>").append(w.parseHTML(e)).find(i):e)})).always(n&&function(e,t){s.each((function(){n.apply(this,r||[e.responseText,t,e])}))}),this},w.expr.pseudos.animated=function(e){return w.grep(w.timers,(function(t){return e===t.elem})).length},w.offset={setOffset:function(e,t,n){var i,o,r,s,a,l,c=w.css(e,"position"),u=w(e),d={};"static"===c&&(e.style.position="relative"),a=u.offset(),r=w.css(e,"top"),l=w.css(e,"left"),("absolute"===c||"fixed"===c)&&(r+l).indexOf("auto")>-1?(s=(i=u.position()).top,o=i.left):(s=parseFloat(r)||0,o=parseFloat(l)||0),h(t)&&(t=t.call(e,n,w.extend({},a))),null!=t.top&&(d.top=t.top-a.top+s),null!=t.left&&(d.left=t.left-a.left+o),"using"in t?t.using.call(e,d):u.css(d)}},w.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each((function(t){w.offset.setOffset(this,e,t)}));var t,n,i=this[0];return i?i.getClientRects().length?(t=i.getBoundingClientRect(),n=i.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,i=this[0],o={top:0,left:0};if("fixed"===w.css(i,"position"))t=i.getBoundingClientRect();else{for(t=this.offset(),n=i.ownerDocument,e=i.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===w.css(e,"position");)e=e.parentNode;e&&e!==i&&1===e.nodeType&&((o=w(e).offset()).top+=w.css(e,"borderTopWidth",!0),o.left+=w.css(e,"borderLeftWidth",!0))}return{top:t.top-o.top-w.css(i,"marginTop",!0),left:t.left-o.left-w.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var e=this.offsetParent;e&&"static"===w.css(e,"position");)e=e.offsetParent;return e||ne}))}}),w.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(e,t){var n="pageYOffset"===t;w.fn[e]=function(i){return q(this,(function(e,i,o){var r;if(g(e)?r=e:9===e.nodeType&&(r=e.defaultView),void 0===o)return r?r[t]:e[i];r?r.scrollTo(n?r.pageXOffset:o,n?o:r.pageYOffset):e[i]=o}),e,i,arguments.length)}})),w.each(["top","left"],(function(e,t){w.cssHooks[t]=qe(f.pixelPosition,(function(e,n){if(n)return n=He(e,t),je.test(n)?w(e).position()[t]+"px":n}))})),w.each({Height:"height",Width:"width"},(function(e,t){w.each({padding:"inner"+e,content:t,"":"outer"+e},(function(n,i){w.fn[i]=function(o,r){var s=arguments.length&&(n||"boolean"!=typeof o),a=n||(!0===o||!0===r?"margin":"border");return q(this,(function(t,n,o){var r;return g(t)?0===i.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(r=t.documentElement,Math.max(t.body["scroll"+e],r["scroll"+e],t.body["offset"+e],r["offset"+e],r["client"+e])):void 0===o?w.css(t,n,a):w.style(t,n,o,a)}),t,s?o:void 0,s)}}))})),w.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(e,t){w.fn[t]=function(e){return this.on(t,e)}})),w.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,i){return this.on(t,e,n,i)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),w.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(e,t){w.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}));var Ut=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;w.proxy=function(e,t){var n,i,r;if("string"==typeof t&&(n=e[t],t=e,e=n),h(e))return i=o.call(arguments,2),(r=function(){return e.apply(t||this,i.concat(o.call(arguments)))}).guid=e.guid=e.guid||w.guid++,r},w.holdReady=function(e){e?w.readyWait++:w.ready(!0)},w.isArray=Array.isArray,w.parseJSON=JSON.parse,w.nodeName=k,w.isFunction=h,w.isWindow=g,w.camelCase=U,w.type=b,w.now=Date.now,w.isNumeric=function(e){var t=w.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},w.trim=function(e){return null==e?"":(e+"").replace(Ut,"")},"function"==typeof define&&define.amd&&define("jquery",[],(function(){return w}));var Gt=e.jQuery,Xt=e.$;return w.noConflict=function(t){return e.$===w&&(e.$=Xt),t&&e.jQuery===w&&(e.jQuery=Gt),w},void 0===t&&(e.jQuery=e.$=w),w})),function(e){"use strict";"function"==typeof define&&define.amd?define(["jquery"],e):"undefined"!=typeof exports?module.exports=e(require("jquery")):e(jQuery)}((function(e){"use strict";var t=window.Slick||{};(t=function(){var t=0;return function(n,i){var o,r=this;r.defaults={accessibility:!0,adaptiveHeight:!1,appendArrows:e(n),appendDots:e(n),arrows:!0,asNavFor:null,prevArrow:'<button class="slick-prev" aria-label="Previous" type="button">Previous</button>',nextArrow:'<button class="slick-next" aria-label="Next" type="button">Next</button>',autoplay:!1,autoplaySpeed:3e3,centerMode:!1,centerPadding:"50px",cssEase:"ease",customPaging:function(t,n){return e('<button type="button" />').text(n+1)},dots:!1,dotsClass:"slick-dots",draggable:!0,easing:"linear",edgeFriction:.35,fade:!1,focusOnSelect:!1,focusOnChange:!1,infinite:!0,initialSlide:0,lazyLoad:"ondemand",mobileFirst:!1,pauseOnHover:!0,pauseOnFocus:!0,pauseOnDotsHover:!1,respondTo:"window",responsive:null,rows:1,rtl:!1,slide:"",slidesPerRow:1,slidesToShow:1,slidesToScroll:1,speed:500,swipe:!0,swipeToSlide:!1,touchMove:!0,touchThreshold:5,useCSS:!0,useTransform:!0,variableWidth:!1,vertical:!1,verticalSwiping:!1,waitForAnimate:!0,zIndex:1e3},r.initials={animating:!1,dragging:!1,autoPlayTimer:null,currentDirection:0,currentLeft:null,currentSlide:0,direction:1,$dots:null,listWidth:null,listHeight:null,loadIndex:0,$nextArrow:null,$prevArrow:null,scrolling:!1,slideCount:null,slideWidth:null,$slideTrack:null,$slides:null,sliding:!1,slideOffset:0,swipeLeft:null,swiping:!1,$list:null,touchObject:{},transformsEnabled:!1,unslicked:!1},e.extend(r,r.initials),r.activeBreakpoint=null,r.animType=null,r.animProp=null,r.breakpoints=[],r.breakpointSettings=[],r.cssTransitions=!1,r.focussed=!1,r.interrupted=!1,r.hidden="hidden",r.paused=!0,r.positionProp=null,r.respondTo=null,r.rowCount=1,r.shouldClick=!0,r.$slider=e(n),r.$slidesCache=null,r.transformType=null,r.transitionType=null,r.visibilityChange="visibilitychange",r.windowWidth=0,r.windowTimer=null,o=e(n).data("slick")||{},r.options=e.extend({},r.defaults,i,o),r.currentSlide=r.options.initialSlide,r.originalSettings=r.options,void 0!==document.mozHidden?(r.hidden="mozHidden",r.visibilityChange="mozvisibilitychange"):void 0!==document.webkitHidden&&(r.hidden="webkitHidden",r.visibilityChange="webkitvisibilitychange"),r.autoPlay=e.proxy(r.autoPlay,r),r.autoPlayClear=e.proxy(r.autoPlayClear,r),r.autoPlayIterator=e.proxy(r.autoPlayIterator,r),r.changeSlide=e.proxy(r.changeSlide,r),r.clickHandler=e.proxy(r.clickHandler,r),r.selectHandler=e.proxy(r.selectHandler,r),r.setPosition=e.proxy(r.setPosition,r),r.swipeHandler=e.proxy(r.swipeHandler,r),r.dragHandler=e.proxy(r.dragHandler,r),r.keyHandler=e.proxy(r.keyHandler,r),r.instanceUid=t++,r.htmlExpr=/^(?:\s*(<[\w\W]+>)[^>]*)$/,r.registerBreakpoints(),r.init(!0)}}()).prototype.activateADA=function(){this.$slideTrack.find(".slick-active").attr({"aria-hidden":"false"}).find("a, input, button, select").attr({tabindex:"0"})},t.prototype.addSlide=t.prototype.slickAdd=function(t,n,i){var o=this;if("boolean"==typeof n)i=n,n=null;else if(n<0||n>=o.slideCount)return!1;o.unload(),"number"==typeof n?0===n&&0===o.$slides.length?e(t).appendTo(o.$slideTrack):i?e(t).insertBefore(o.$slides.eq(n)):e(t).insertAfter(o.$slides.eq(n)):!0===i?e(t).prependTo(o.$slideTrack):e(t).appendTo(o.$slideTrack),o.$slides=o.$slideTrack.children(this.options.slide),o.$slideTrack.children(this.options.slide).detach(),o.$slideTrack.append(o.$slides),o.$slides.each((function(t,n){e(n).attr("data-slick-index",t)})),o.$slidesCache=o.$slides,o.reinit()},t.prototype.animateHeight=function(){var e=this;if(1===e.options.slidesToShow&&!0===e.options.adaptiveHeight&&!1===e.options.vertical){var t=e.$slides.eq(e.currentSlide).outerHeight(!0);e.$list.animate({height:t},e.options.speed)}},t.prototype.animateSlide=function(t,n){var i={},o=this;o.animateHeight(),!0===o.options.rtl&&!1===o.options.vertical&&(t=-t),!1===o.transformsEnabled?!1===o.options.vertical?o.$slideTrack.animate({left:t},o.options.speed,o.options.easing,n):o.$slideTrack.animate({top:t},o.options.speed,o.options.easing,n):!1===o.cssTransitions?(!0===o.options.rtl&&(o.currentLeft=-o.currentLeft),e({animStart:o.currentLeft}).animate({animStart:t},{duration:o.options.speed,easing:o.options.easing,step:function(e){e=Math.ceil(e),!1===o.options.vertical?(i[o.animType]="translate("+e+"px, 0px)",o.$slideTrack.css(i)):(i[o.animType]="translate(0px,"+e+"px)",o.$slideTrack.css(i))},complete:function(){n&&n.call()}})):(o.applyTransition(),t=Math.ceil(t),!1===o.options.vertical?i[o.animType]="translate3d("+t+"px, 0px, 0px)":i[o.animType]="translate3d(0px,"+t+"px, 0px)",o.$slideTrack.css(i),n&&setTimeout((function(){o.disableTransition(),n.call()}),o.options.speed))},t.prototype.getNavTarget=function(){var t=this.options.asNavFor;return t&&null!==t&&(t=e(t).not(this.$slider)),t},t.prototype.asNavFor=function(t){var n=this.getNavTarget();null!==n&&"object"==typeof n&&n.each((function(){var n=e(this).slick("getSlick");n.unslicked||n.slideHandler(t,!0)}))},t.prototype.applyTransition=function(e){var t=this,n={};!1===t.options.fade?n[t.transitionType]=t.transformType+" "+t.options.speed+"ms "+t.options.cssEase:n[t.transitionType]="opacity "+t.options.speed+"ms "+t.options.cssEase,!1===t.options.fade?t.$slideTrack.css(n):t.$slides.eq(e).css(n)},t.prototype.autoPlay=function(){var e=this;e.autoPlayClear(),e.slideCount>e.options.slidesToShow&&(e.autoPlayTimer=setInterval(e.autoPlayIterator,e.options.autoplaySpeed))},t.prototype.autoPlayClear=function(){this.autoPlayTimer&&clearInterval(this.autoPlayTimer)},t.prototype.autoPlayIterator=function(){var e=this,t=e.currentSlide+e.options.slidesToScroll;e.paused||e.interrupted||e.focussed||(!1===e.options.infinite&&(1===e.direction&&e.currentSlide+1===e.slideCount-1?e.direction=0:0===e.direction&&(t=e.currentSlide-e.options.slidesToScroll,e.currentSlide-1==0&&(e.direction=1))),e.slideHandler(t))},t.prototype.buildArrows=function(){var t=this;!0===t.options.arrows&&(t.$prevArrow=e(t.options.prevArrow).addClass("slick-arrow"),t.$nextArrow=e(t.options.nextArrow).addClass("slick-arrow"),t.slideCount>t.options.slidesToShow?(t.$prevArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),t.$nextArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),t.htmlExpr.test(t.options.prevArrow)&&t.$prevArrow.prependTo(t.options.appendArrows),t.htmlExpr.test(t.options.nextArrow)&&t.$nextArrow.appendTo(t.options.appendArrows),!0!==t.options.infinite&&t.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true")):t.$prevArrow.add(t.$nextArrow).addClass("slick-hidden").attr({"aria-disabled":"true",tabindex:"-1"}))},t.prototype.buildDots=function(){var t,n,i=this;if(!0===i.options.dots){for(i.$slider.addClass("slick-dotted"),n=e("<ul />").addClass(i.options.dotsClass),t=0;t<=i.getDotCount();t+=1)n.append(e("<li />").append(i.options.customPaging.call(this,i,t)));i.$dots=n.appendTo(i.options.appendDots),i.$dots.find("li").first().addClass("slick-active")}},t.prototype.buildOut=function(){var t=this;t.$slides=t.$slider.children(t.options.slide+":not(.slick-cloned)").addClass("slick-slide"),t.slideCount=t.$slides.length,t.$slides.each((function(t,n){e(n).attr("data-slick-index",t).data("originalStyling",e(n).attr("style")||"")})),t.$slider.addClass("slick-slider"),t.$slideTrack=0===t.slideCount?e('<div class="slick-track"/>').appendTo(t.$slider):t.$slides.wrapAll('<div class="slick-track"/>').parent(),t.$list=t.$slideTrack.wrap('<div class="slick-list"/>').parent(),t.$slideTrack.css("opacity",0),!0!==t.options.centerMode&&!0!==t.options.swipeToSlide||(t.options.slidesToScroll=1),e("img[data-lazy]",t.$slider).not("[src]").addClass("slick-loading"),t.setupInfinite(),t.buildArrows(),t.buildDots(),t.updateDots(),t.setSlideClasses("number"==typeof t.currentSlide?t.currentSlide:0),!0===t.options.draggable&&t.$list.addClass("draggable")},t.prototype.buildRows=function(){var e,t,n,i,o,r,s,a=this;if(i=document.createDocumentFragment(),r=a.$slider.children(),a.options.rows>1){for(s=a.options.slidesPerRow*a.options.rows,o=Math.ceil(r.length/s),e=0;e<o;e++){var l=document.createElement("div");for(t=0;t<a.options.rows;t++){var c=document.createElement("div");for(n=0;n<a.options.slidesPerRow;n++){var u=e*s+(t*a.options.slidesPerRow+n);r.get(u)&&c.appendChild(r.get(u))}l.appendChild(c)}i.appendChild(l)}a.$slider.empty().append(i),a.$slider.children().children().children().css({width:100/a.options.slidesPerRow+"%",display:"inline-block"})}},t.prototype.checkResponsive=function(t,n){var i,o,r,s=this,a=!1,l=s.$slider.width(),c=window.innerWidth||e(window).width();if("window"===s.respondTo?r=c:"slider"===s.respondTo?r=l:"min"===s.respondTo&&(r=Math.min(c,l)),s.options.responsive&&s.options.responsive.length&&null!==s.options.responsive){for(i in o=null,s.breakpoints)s.breakpoints.hasOwnProperty(i)&&(!1===s.originalSettings.mobileFirst?r<s.breakpoints[i]&&(o=s.breakpoints[i]):r>s.breakpoints[i]&&(o=s.breakpoints[i]));null!==o?null!==s.activeBreakpoint?(o!==s.activeBreakpoint||n)&&(s.activeBreakpoint=o,"unslick"===s.breakpointSettings[o]?s.unslick(o):(s.options=e.extend({},s.originalSettings,s.breakpointSettings[o]),!0===t&&(s.currentSlide=s.options.initialSlide),s.refresh(t)),a=o):(s.activeBreakpoint=o,"unslick"===s.breakpointSettings[o]?s.unslick(o):(s.options=e.extend({},s.originalSettings,s.breakpointSettings[o]),!0===t&&(s.currentSlide=s.options.initialSlide),s.refresh(t)),a=o):null!==s.activeBreakpoint&&(s.activeBreakpoint=null,s.options=s.originalSettings,!0===t&&(s.currentSlide=s.options.initialSlide),s.refresh(t),a=o),t||!1===a||s.$slider.trigger("breakpoint",[s,a])}},t.prototype.changeSlide=function(t,n){var i,o,r=this,s=e(t.currentTarget);switch(s.is("a")&&t.preventDefault(),s.is("li")||(s=s.closest("li")),i=r.slideCount%r.options.slidesToScroll!=0?0:(r.slideCount-r.currentSlide)%r.options.slidesToScroll,t.data.message){case"previous":o=0===i?r.options.slidesToScroll:r.options.slidesToShow-i,r.slideCount>r.options.slidesToShow&&r.slideHandler(r.currentSlide-o,!1,n);break;case"next":o=0===i?r.options.slidesToScroll:i,r.slideCount>r.options.slidesToShow&&r.slideHandler(r.currentSlide+o,!1,n);break;case"index":var a=0===t.data.index?0:t.data.index||s.index()*r.options.slidesToScroll;r.slideHandler(r.checkNavigable(a),!1,n),s.children().trigger("focus");break;default:return}},t.prototype.checkNavigable=function(e){var t,n;if(n=0,e>(t=this.getNavigableIndexes())[t.length-1])e=t[t.length-1];else for(var i in t){if(e<t[i]){e=n;break}n=t[i]}return e},t.prototype.cleanUpEvents=function(){var t=this;t.options.dots&&null!==t.$dots&&(e("li",t.$dots).off("click.slick",t.changeSlide).off("mouseenter.slick",e.proxy(t.interrupt,t,!0)).off("mouseleave.slick",e.proxy(t.interrupt,t,!1)),!0===t.options.accessibility&&t.$dots.off("keydown.slick",t.keyHandler)),t.$slider.off("focus.slick blur.slick"),!0===t.options.arrows&&t.slideCount>t.options.slidesToShow&&(t.$prevArrow&&t.$prevArrow.off("click.slick",t.changeSlide),t.$nextArrow&&t.$nextArrow.off("click.slick",t.changeSlide),!0===t.options.accessibility&&(t.$prevArrow&&t.$prevArrow.off("keydown.slick",t.keyHandler),t.$nextArrow&&t.$nextArrow.off("keydown.slick",t.keyHandler))),t.$list.off("touchstart.slick mousedown.slick",t.swipeHandler),t.$list.off("touchmove.slick mousemove.slick",t.swipeHandler),t.$list.off("touchend.slick mouseup.slick",t.swipeHandler),t.$list.off("touchcancel.slick mouseleave.slick",t.swipeHandler),t.$list.off("click.slick",t.clickHandler),e(document).off(t.visibilityChange,t.visibility),t.cleanUpSlideEvents(),!0===t.options.accessibility&&t.$list.off("keydown.slick",t.keyHandler),!0===t.options.focusOnSelect&&e(t.$slideTrack).children().off("click.slick",t.selectHandler),e(window).off("orientationchange.slick.slick-"+t.instanceUid,t.orientationChange),e(window).off("resize.slick.slick-"+t.instanceUid,t.resize),e("[draggable!=true]",t.$slideTrack).off("dragstart",t.preventDefault),e(window).off("load.slick.slick-"+t.instanceUid,t.setPosition)},t.prototype.cleanUpSlideEvents=function(){var t=this;t.$list.off("mouseenter.slick",e.proxy(t.interrupt,t,!0)),t.$list.off("mouseleave.slick",e.proxy(t.interrupt,t,!1))},t.prototype.cleanUpRows=function(){var e,t=this;t.options.rows>1&&((e=t.$slides.children().children()).removeAttr("style"),t.$slider.empty().append(e))},t.prototype.clickHandler=function(e){!1===this.shouldClick&&(e.stopImmediatePropagation(),e.stopPropagation(),e.preventDefault())},t.prototype.destroy=function(t){var n=this;n.autoPlayClear(),n.touchObject={},n.cleanUpEvents(),e(".slick-cloned",n.$slider).detach(),n.$dots&&n.$dots.remove(),n.$prevArrow&&n.$prevArrow.length&&(n.$prevArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),n.htmlExpr.test(n.options.prevArrow)&&n.$prevArrow.remove()),n.$nextArrow&&n.$nextArrow.length&&(n.$nextArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),n.htmlExpr.test(n.options.nextArrow)&&n.$nextArrow.remove()),n.$slides&&(n.$slides.removeClass("slick-slide slick-active slick-center slick-visible slick-current").removeAttr("aria-hidden").removeAttr("data-slick-index").each((function(){e(this).attr("style",e(this).data("originalStyling"))})),n.$slideTrack.children(this.options.slide).detach(),n.$slideTrack.detach(),n.$list.detach(),n.$slider.append(n.$slides)),n.cleanUpRows(),n.$slider.removeClass("slick-slider"),n.$slider.removeClass("slick-initialized"),n.$slider.removeClass("slick-dotted"),n.unslicked=!0,t||n.$slider.trigger("destroy",[n])},t.prototype.disableTransition=function(e){var t=this,n={};n[t.transitionType]="",!1===t.options.fade?t.$slideTrack.css(n):t.$slides.eq(e).css(n)},t.prototype.fadeSlide=function(e,t){var n=this;!1===n.cssTransitions?(n.$slides.eq(e).css({zIndex:n.options.zIndex}),n.$slides.eq(e).animate({opacity:1},n.options.speed,n.options.easing,t)):(n.applyTransition(e),n.$slides.eq(e).css({opacity:1,zIndex:n.options.zIndex}),t&&setTimeout((function(){n.disableTransition(e),t.call()}),n.options.speed))},t.prototype.fadeSlideOut=function(e){var t=this;!1===t.cssTransitions?t.$slides.eq(e).animate({opacity:0,zIndex:t.options.zIndex-2},t.options.speed,t.options.easing):(t.applyTransition(e),t.$slides.eq(e).css({opacity:0,zIndex:t.options.zIndex-2}))},t.prototype.filterSlides=t.prototype.slickFilter=function(e){var t=this;null!==e&&(t.$slidesCache=t.$slides,t.unload(),t.$slideTrack.children(this.options.slide).detach(),t.$slidesCache.filter(e).appendTo(t.$slideTrack),t.reinit())},t.prototype.focusHandler=function(){var t=this;t.$slider.off("focus.slick blur.slick").on("focus.slick blur.slick","*",(function(n){n.stopImmediatePropagation();var i=e(this);setTimeout((function(){t.options.pauseOnFocus&&(t.focussed=i.is(":focus"),t.autoPlay())}),0)}))},t.prototype.getCurrent=t.prototype.slickCurrentSlide=function(){return this.currentSlide},t.prototype.getDotCount=function(){var e=this,t=0,n=0,i=0;if(!0===e.options.infinite)if(e.slideCount<=e.options.slidesToShow)++i;else for(;t<e.slideCount;)++i,t=n+e.options.slidesToScroll,n+=e.options.slidesToScroll<=e.options.slidesToShow?e.options.slidesToScroll:e.options.slidesToShow;else if(!0===e.options.centerMode)i=e.slideCount;else if(e.options.asNavFor)for(;t<e.slideCount;)++i,t=n+e.options.slidesToScroll,n+=e.options.slidesToScroll<=e.options.slidesToShow?e.options.slidesToScroll:e.options.slidesToShow;else i=1+Math.ceil((e.slideCount-e.options.slidesToShow)/e.options.slidesToScroll);return i-1},t.prototype.getLeft=function(e){var t,n,i,o,r=this,s=0;return r.slideOffset=0,n=r.$slides.first().outerHeight(!0),!0===r.options.infinite?(r.slideCount>r.options.slidesToShow&&(r.slideOffset=r.slideWidth*r.options.slidesToShow*-1,o=-1,!0===r.options.vertical&&!0===r.options.centerMode&&(2===r.options.slidesToShow?o=-1.5:1===r.options.slidesToShow&&(o=-2)),s=n*r.options.slidesToShow*o),r.slideCount%r.options.slidesToScroll!=0&&e+r.options.slidesToScroll>r.slideCount&&r.slideCount>r.options.slidesToShow&&(e>r.slideCount?(r.slideOffset=(r.options.slidesToShow-(e-r.slideCount))*r.slideWidth*-1,s=(r.options.slidesToShow-(e-r.slideCount))*n*-1):(r.slideOffset=r.slideCount%r.options.slidesToScroll*r.slideWidth*-1,s=r.slideCount%r.options.slidesToScroll*n*-1))):e+r.options.slidesToShow>r.slideCount&&(r.slideOffset=(e+r.options.slidesToShow-r.slideCount)*r.slideWidth,s=(e+r.options.slidesToShow-r.slideCount)*n),r.slideCount<=r.options.slidesToShow&&(r.slideOffset=0,s=0),!0===r.options.centerMode&&r.slideCount<=r.options.slidesToShow?r.slideOffset=r.slideWidth*Math.floor(r.options.slidesToShow)/2-r.slideWidth*r.slideCount/2:!0===r.options.centerMode&&!0===r.options.infinite?r.slideOffset+=r.slideWidth*Math.floor(r.options.slidesToShow/2)-r.slideWidth:!0===r.options.centerMode&&(r.slideOffset=0,r.slideOffset+=r.slideWidth*Math.floor(r.options.slidesToShow/2)),t=!1===r.options.vertical?e*r.slideWidth*-1+r.slideOffset:e*n*-1+s,!0===r.options.variableWidth&&(i=r.slideCount<=r.options.slidesToShow||!1===r.options.infinite?r.$slideTrack.children(".slick-slide").eq(e):r.$slideTrack.children(".slick-slide").eq(e+r.options.slidesToShow),t=!0===r.options.rtl?i[0]?-1*(r.$slideTrack.width()-i[0].offsetLeft-i.width()):0:i[0]?-1*i[0].offsetLeft:0,!0===r.options.centerMode&&(i=r.slideCount<=r.options.slidesToShow||!1===r.options.infinite?r.$slideTrack.children(".slick-slide").eq(e):r.$slideTrack.children(".slick-slide").eq(e+r.options.slidesToShow+1),t=!0===r.options.rtl?i[0]?-1*(r.$slideTrack.width()-i[0].offsetLeft-i.width()):0:i[0]?-1*i[0].offsetLeft:0,t+=(r.$list.width()-i.outerWidth())/2)),t},t.prototype.getOption=t.prototype.slickGetOption=function(e){return this.options[e]},t.prototype.getNavigableIndexes=function(){var e,t=this,n=0,i=0,o=[];for(!1===t.options.infinite?e=t.slideCount:(n=-1*t.options.slidesToScroll,i=-1*t.options.slidesToScroll,e=2*t.slideCount);n<e;)o.push(n),n=i+t.options.slidesToScroll,i+=t.options.slidesToScroll<=t.options.slidesToShow?t.options.slidesToScroll:t.options.slidesToShow;return o},t.prototype.getSlick=function(){return this},t.prototype.getSlideCount=function(){var t,n,i=this;return n=!0===i.options.centerMode?i.slideWidth*Math.floor(i.options.slidesToShow/2):0,!0===i.options.swipeToSlide?(i.$slideTrack.find(".slick-slide").each((function(o,r){if(r.offsetLeft-n+e(r).outerWidth()/2>-1*i.swipeLeft)return t=r,!1})),Math.abs(e(t).attr("data-slick-index")-i.currentSlide)||1):i.options.slidesToScroll},t.prototype.goTo=t.prototype.slickGoTo=function(e,t){this.changeSlide({data:{message:"index",index:parseInt(e)}},t)},t.prototype.init=function(t){var n=this;e(n.$slider).hasClass("slick-initialized")||(e(n.$slider).addClass("slick-initialized"),n.buildRows(),n.buildOut(),n.setProps(),n.startLoad(),n.loadSlider(),n.initializeEvents(),n.updateArrows(),n.updateDots(),n.checkResponsive(!0),n.focusHandler()),t&&n.$slider.trigger("init",[n]),!0===n.options.accessibility&&n.initADA(),n.options.autoplay&&(n.paused=!1,n.autoPlay())},t.prototype.initADA=function(){var t=this,n=Math.ceil(t.slideCount/t.options.slidesToShow),i=t.getNavigableIndexes().filter((function(e){return e>=0&&e<t.slideCount}));t.$slides.add(t.$slideTrack.find(".slick-cloned")).attr({"aria-hidden":"true",tabindex:"-1"}).find("a, input, button, select").attr({tabindex:"-1"}),null!==t.$dots&&(t.$slides.not(t.$slideTrack.find(".slick-cloned")).each((function(n){var o=i.indexOf(n);e(this).attr({role:"tabpanel",id:"slick-slide"+t.instanceUid+n,tabindex:-1}),-1!==o&&e(this).attr({"aria-describedby":"slick-slide-control"+t.instanceUid+o})})),t.$dots.attr("role","tablist").find("li").each((function(o){var r=i[o];e(this).attr({role:"presentation"}),e(this).find("button").first().attr({role:"tab",id:"slick-slide-control"+t.instanceUid+o,"aria-controls":"slick-slide"+t.instanceUid+r,"aria-label":o+1+" of "+n,"aria-selected":null,tabindex:"-1"})})).eq(t.currentSlide).find("button").attr({"aria-selected":"true",tabindex:"0"}).end());for(var o=t.currentSlide,r=o+t.options.slidesToShow;o<r;o++)t.$slides.eq(o).attr("tabindex",0);t.activateADA()},t.prototype.initArrowEvents=function(){var e=this;!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow.off("click.slick").on("click.slick",{message:"previous"},e.changeSlide),e.$nextArrow.off("click.slick").on("click.slick",{message:"next"},e.changeSlide),!0===e.options.accessibility&&(e.$prevArrow.on("keydown.slick",e.keyHandler),e.$nextArrow.on("keydown.slick",e.keyHandler)))},t.prototype.initDotEvents=function(){var t=this;!0===t.options.dots&&(e("li",t.$dots).on("click.slick",{message:"index"},t.changeSlide),!0===t.options.accessibility&&t.$dots.on("keydown.slick",t.keyHandler)),!0===t.options.dots&&!0===t.options.pauseOnDotsHover&&e("li",t.$dots).on("mouseenter.slick",e.proxy(t.interrupt,t,!0)).on("mouseleave.slick",e.proxy(t.interrupt,t,!1))},t.prototype.initSlideEvents=function(){var t=this;t.options.pauseOnHover&&(t.$list.on("mouseenter.slick",e.proxy(t.interrupt,t,!0)),t.$list.on("mouseleave.slick",e.proxy(t.interrupt,t,!1)))},t.prototype.initializeEvents=function(){var t=this;t.initArrowEvents(),t.initDotEvents(),t.initSlideEvents(),t.$list.on("touchstart.slick mousedown.slick",{action:"start"},t.swipeHandler),t.$list.on("touchmove.slick mousemove.slick",{action:"move"},t.swipeHandler),t.$list.on("touchend.slick mouseup.slick",{action:"end"},t.swipeHandler),t.$list.on("touchcancel.slick mouseleave.slick",{action:"end"},t.swipeHandler),t.$list.on("click.slick",t.clickHandler),e(document).on(t.visibilityChange,e.proxy(t.visibility,t)),!0===t.options.accessibility&&t.$list.on("keydown.slick",t.keyHandler),!0===t.options.focusOnSelect&&e(t.$slideTrack).children().on("click.slick",t.selectHandler),e(window).on("orientationchange.slick.slick-"+t.instanceUid,e.proxy(t.orientationChange,t)),e(window).on("resize.slick.slick-"+t.instanceUid,e.proxy(t.resize,t)),e("[draggable!=true]",t.$slideTrack).on("dragstart",t.preventDefault),e(window).on("load.slick.slick-"+t.instanceUid,t.setPosition),e(t.setPosition)},t.prototype.initUI=function(){var e=this;!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow.show(),e.$nextArrow.show()),!0===e.options.dots&&e.slideCount>e.options.slidesToShow&&e.$dots.show()},t.prototype.keyHandler=function(e){var t=this;e.target.tagName.match("TEXTAREA|INPUT|SELECT")||(37===e.keyCode&&!0===t.options.accessibility?t.changeSlide({data:{message:!0===t.options.rtl?"next":"previous"}}):39===e.keyCode&&!0===t.options.accessibility&&t.changeSlide({data:{message:!0===t.options.rtl?"previous":"next"}}))},t.prototype.lazyLoad=function(){function t(t){e("img[data-lazy]",t).each((function(){var t=e(this),n=e(this).attr("data-lazy"),i=e(this).attr("data-srcset"),o=e(this).attr("data-sizes")||r.$slider.attr("data-sizes"),s=document.createElement("img");s.onload=function(){t.animate({opacity:0},100,(function(){i&&(t.attr("srcset",i),o&&t.attr("sizes",o)),t.attr("src",n).animate({opacity:1},200,(function(){t.removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading")})),r.$slider.trigger("lazyLoaded",[r,t,n])}))},s.onerror=function(){t.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),r.$slider.trigger("lazyLoadError",[r,t,n])},s.src=n}))}var n,i,o,r=this;if(!0===r.options.centerMode?!0===r.options.infinite?o=(i=r.currentSlide+(r.options.slidesToShow/2+1))+r.options.slidesToShow+2:(i=Math.max(0,r.currentSlide-(r.options.slidesToShow/2+1)),o=r.options.slidesToShow/2+1+2+r.currentSlide):(i=r.options.infinite?r.options.slidesToShow+r.currentSlide:r.currentSlide,o=Math.ceil(i+r.options.slidesToShow),!0===r.options.fade&&(i>0&&i--,o<=r.slideCount&&o++)),n=r.$slider.find(".slick-slide").slice(i,o),"anticipated"===r.options.lazyLoad)for(var s=i-1,a=o,l=r.$slider.find(".slick-slide"),c=0;c<r.options.slidesToScroll;c++)s<0&&(s=r.slideCount-1),n=(n=n.add(l.eq(s))).add(l.eq(a)),s--,a++;t(n),r.slideCount<=r.options.slidesToShow?t(r.$slider.find(".slick-slide")):r.currentSlide>=r.slideCount-r.options.slidesToShow?t(r.$slider.find(".slick-cloned").slice(0,r.options.slidesToShow)):0===r.currentSlide&&t(r.$slider.find(".slick-cloned").slice(-1*r.options.slidesToShow))},t.prototype.loadSlider=function(){var e=this;e.setPosition(),e.$slideTrack.css({opacity:1}),e.$slider.removeClass("slick-loading"),e.initUI(),"progressive"===e.options.lazyLoad&&e.progressiveLazyLoad()},t.prototype.next=t.prototype.slickNext=function(){this.changeSlide({data:{message:"next"}})},t.prototype.orientationChange=function(){this.checkResponsive(),this.setPosition()},t.prototype.pause=t.prototype.slickPause=function(){this.autoPlayClear(),this.paused=!0},t.prototype.play=t.prototype.slickPlay=function(){var e=this;e.autoPlay(),e.options.autoplay=!0,e.paused=!1,e.focussed=!1,e.interrupted=!1},t.prototype.postSlide=function(t){var n=this;n.unslicked||(n.$slider.trigger("afterChange",[n,t]),n.animating=!1,n.slideCount>n.options.slidesToShow&&n.setPosition(),n.swipeLeft=null,n.options.autoplay&&n.autoPlay(),!0===n.options.accessibility&&(n.initADA(),n.options.focusOnChange&&e(n.$slides.get(n.currentSlide)).attr("tabindex",0).focus()))},t.prototype.prev=t.prototype.slickPrev=function(){this.changeSlide({data:{message:"previous"}})},t.prototype.preventDefault=function(e){e.preventDefault()},t.prototype.progressiveLazyLoad=function(t){t=t||1;var n,i,o,r,s,a=this,l=e("img[data-lazy]",a.$slider);l.length?(n=l.first(),i=n.attr("data-lazy"),o=n.attr("data-srcset"),r=n.attr("data-sizes")||a.$slider.attr("data-sizes"),(s=document.createElement("img")).onload=function(){o&&(n.attr("srcset",o),r&&n.attr("sizes",r)),n.attr("src",i).removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading"),!0===a.options.adaptiveHeight&&a.setPosition(),a.$slider.trigger("lazyLoaded",[a,n,i]),a.progressiveLazyLoad()},s.onerror=function(){t<3?setTimeout((function(){a.progressiveLazyLoad(t+1)}),500):(n.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),a.$slider.trigger("lazyLoadError",[a,n,i]),a.progressiveLazyLoad())},s.src=i):a.$slider.trigger("allImagesLoaded",[a])},t.prototype.refresh=function(t){var n,i,o=this;i=o.slideCount-o.options.slidesToShow,!o.options.infinite&&o.currentSlide>i&&(o.currentSlide=i),o.slideCount<=o.options.slidesToShow&&(o.currentSlide=0),n=o.currentSlide,o.destroy(!0),e.extend(o,o.initials,{currentSlide:n}),o.init(),t||o.changeSlide({data:{message:"index",index:n}},!1)},t.prototype.registerBreakpoints=function(){var t,n,i,o=this,r=o.options.responsive||null;if("array"===e.type(r)&&r.length){for(t in o.respondTo=o.options.respondTo||"window",r)if(i=o.breakpoints.length-1,r.hasOwnProperty(t)){for(n=r[t].breakpoint;i>=0;)o.breakpoints[i]&&o.breakpoints[i]===n&&o.breakpoints.splice(i,1),i--;o.breakpoints.push(n),o.breakpointSettings[n]=r[t].settings}o.breakpoints.sort((function(e,t){return o.options.mobileFirst?e-t:t-e}))}},t.prototype.reinit=function(){var t=this;t.$slides=t.$slideTrack.children(t.options.slide).addClass("slick-slide"),t.slideCount=t.$slides.length,t.currentSlide>=t.slideCount&&0!==t.currentSlide&&(t.currentSlide=t.currentSlide-t.options.slidesToScroll),t.slideCount<=t.options.slidesToShow&&(t.currentSlide=0),t.registerBreakpoints(),t.setProps(),t.setupInfinite(),t.buildArrows(),t.updateArrows(),t.initArrowEvents(),t.buildDots(),t.updateDots(),t.initDotEvents(),t.cleanUpSlideEvents(),t.initSlideEvents(),t.checkResponsive(!1,!0),!0===t.options.focusOnSelect&&e(t.$slideTrack).children().on("click.slick",t.selectHandler),t.setSlideClasses("number"==typeof t.currentSlide?t.currentSlide:0),t.setPosition(),t.focusHandler(),t.paused=!t.options.autoplay,t.autoPlay(),t.$slider.trigger("reInit",[t])},t.prototype.resize=function(){var t=this;e(window).width()!==t.windowWidth&&(clearTimeout(t.windowDelay),t.windowDelay=window.setTimeout((function(){t.windowWidth=e(window).width(),t.checkResponsive(),t.unslicked||t.setPosition()}),50))},t.prototype.removeSlide=t.prototype.slickRemove=function(e,t,n){var i=this;if(e="boolean"==typeof e?!0===(t=e)?0:i.slideCount-1:!0===t?--e:e,i.slideCount<1||e<0||e>i.slideCount-1)return!1;i.unload(),!0===n?i.$slideTrack.children().remove():i.$slideTrack.children(this.options.slide).eq(e).remove(),i.$slides=i.$slideTrack.children(this.options.slide),i.$slideTrack.children(this.options.slide).detach(),i.$slideTrack.append(i.$slides),i.$slidesCache=i.$slides,i.reinit()},t.prototype.setCSS=function(e){var t,n,i=this,o={};!0===i.options.rtl&&(e=-e),t="left"==i.positionProp?Math.ceil(e)+"px":"0px",n="top"==i.positionProp?Math.ceil(e)+"px":"0px",o[i.positionProp]=e,!1===i.transformsEnabled?i.$slideTrack.css(o):(o={},!1===i.cssTransitions?(o[i.animType]="translate("+t+", "+n+")",i.$slideTrack.css(o)):(o[i.animType]="translate3d("+t+", "+n+", 0px)",i.$slideTrack.css(o)))},t.prototype.setDimensions=function(){var e=this;!1===e.options.vertical?!0===e.options.centerMode&&e.$list.css({padding:"0px "+e.options.centerPadding}):(e.$list.height(e.$slides.first().outerHeight(!0)*e.options.slidesToShow),!0===e.options.centerMode&&e.$list.css({padding:e.options.centerPadding+" 0px"})),e.listWidth=e.$list.width(),e.listHeight=e.$list.height(),!1===e.options.vertical&&!1===e.options.variableWidth?(e.slideWidth=Math.ceil(e.listWidth/e.options.slidesToShow),e.$slideTrack.width(Math.ceil(e.slideWidth*e.$slideTrack.children(".slick-slide").length))):!0===e.options.variableWidth?e.$slideTrack.width(5e3*e.slideCount):(e.slideWidth=Math.ceil(e.listWidth),e.$slideTrack.height(Math.ceil(e.$slides.first().outerHeight(!0)*e.$slideTrack.children(".slick-slide").length)));var t=e.$slides.first().outerWidth(!0)-e.$slides.first().width();!1===e.options.variableWidth&&e.$slideTrack.children(".slick-slide").width(e.slideWidth-t)},t.prototype.setFade=function(){var t,n=this;n.$slides.each((function(i,o){t=n.slideWidth*i*-1,!0===n.options.rtl?e(o).css({position:"relative",right:t,top:0,zIndex:n.options.zIndex-2,opacity:0}):e(o).css({position:"relative",left:t,top:0,zIndex:n.options.zIndex-2,opacity:0})})),n.$slides.eq(n.currentSlide).css({zIndex:n.options.zIndex-1,opacity:1})},t.prototype.setHeight=function(){var e=this;if(1===e.options.slidesToShow&&!0===e.options.adaptiveHeight&&!1===e.options.vertical){var t=e.$slides.eq(e.currentSlide).outerHeight(!0);e.$list.css("height",t)}},t.prototype.setOption=t.prototype.slickSetOption=function(){var t,n,i,o,r,s=this,a=!1;if("object"===e.type(arguments[0])?(i=arguments[0],a=arguments[1],r="multiple"):"string"===e.type(arguments[0])&&(i=arguments[0],o=arguments[1],a=arguments[2],"responsive"===arguments[0]&&"array"===e.type(arguments[1])?r="responsive":void 0!==arguments[1]&&(r="single")),"single"===r)s.options[i]=o;else if("multiple"===r)e.each(i,(function(e,t){s.options[e]=t}));else if("responsive"===r)for(n in o)if("array"!==e.type(s.options.responsive))s.options.responsive=[o[n]];else{for(t=s.options.responsive.length-1;t>=0;)s.options.responsive[t].breakpoint===o[n].breakpoint&&s.options.responsive.splice(t,1),t--;s.options.responsive.push(o[n])}a&&(s.unload(),s.reinit())},t.prototype.setPosition=function(){var e=this;e.setDimensions(),e.setHeight(),!1===e.options.fade?e.setCSS(e.getLeft(e.currentSlide)):e.setFade(),e.$slider.trigger("setPosition",[e])},t.prototype.setProps=function(){var e=this,t=document.body.style;e.positionProp=!0===e.options.vertical?"top":"left","top"===e.positionProp?e.$slider.addClass("slick-vertical"):e.$slider.removeClass("slick-vertical"),void 0===t.WebkitTransition&&void 0===t.MozTransition&&void 0===t.msTransition||!0===e.options.useCSS&&(e.cssTransitions=!0),e.options.fade&&("number"==typeof e.options.zIndex?e.options.zIndex<3&&(e.options.zIndex=3):e.options.zIndex=e.defaults.zIndex),void 0!==t.OTransform&&(e.animType="OTransform",e.transformType="-o-transform",e.transitionType="OTransition",void 0===t.perspectiveProperty&&void 0===t.webkitPerspective&&(e.animType=!1)),void 0!==t.MozTransform&&(e.animType="MozTransform",e.transformType="-moz-transform",e.transitionType="MozTransition",void 0===t.perspectiveProperty&&void 0===t.MozPerspective&&(e.animType=!1)),void 0!==t.webkitTransform&&(e.animType="webkitTransform",e.transformType="-webkit-transform",e.transitionType="webkitTransition",void 0===t.perspectiveProperty&&void 0===t.webkitPerspective&&(e.animType=!1)),void 0!==t.msTransform&&(e.animType="msTransform",e.transformType="-ms-transform",e.transitionType="msTransition",void 0===t.msTransform&&(e.animType=!1)),void 0!==t.transform&&!1!==e.animType&&(e.animType="transform",e.transformType="transform",e.transitionType="transition"),e.transformsEnabled=e.options.useTransform&&null!==e.animType&&!1!==e.animType},t.prototype.setSlideClasses=function(e){var t,n,i,o,r=this;if(n=r.$slider.find(".slick-slide").removeClass("slick-active slick-center slick-current").attr("aria-hidden","true"),r.$slides.eq(e).addClass("slick-current"),!0===r.options.centerMode){var s=r.options.slidesToShow%2==0?1:0;t=Math.floor(r.options.slidesToShow/2),!0===r.options.infinite&&(e>=t&&e<=r.slideCount-1-t?r.$slides.slice(e-t+s,e+t+1).addClass("slick-active").attr("aria-hidden","false"):(i=r.options.slidesToShow+e,n.slice(i-t+1+s,i+t+2).addClass("slick-active").attr("aria-hidden","false")),0===e?n.eq(n.length-1-r.options.slidesToShow).addClass("slick-center"):e===r.slideCount-1&&n.eq(r.options.slidesToShow).addClass("slick-center")),r.$slides.eq(e).addClass("slick-center")}else e>=0&&e<=r.slideCount-r.options.slidesToShow?r.$slides.slice(e,e+r.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false"):n.length<=r.options.slidesToShow?n.addClass("slick-active").attr("aria-hidden","false"):(o=r.slideCount%r.options.slidesToShow,i=!0===r.options.infinite?r.options.slidesToShow+e:e,r.options.slidesToShow==r.options.slidesToScroll&&r.slideCount-e<r.options.slidesToShow?n.slice(i-(r.options.slidesToShow-o),i+o).addClass("slick-active").attr("aria-hidden","false"):n.slice(i,i+r.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false"));"ondemand"!==r.options.lazyLoad&&"anticipated"!==r.options.lazyLoad||r.lazyLoad()},t.prototype.setupInfinite=function(){var t,n,i,o=this;if(!0===o.options.fade&&(o.options.centerMode=!1),!0===o.options.infinite&&!1===o.options.fade&&(n=null,o.slideCount>o.options.slidesToShow)){for(i=!0===o.options.centerMode?o.options.slidesToShow+1:o.options.slidesToShow,t=o.slideCount;t>o.slideCount-i;t-=1)n=t-1,e(o.$slides[n]).clone(!0).attr("id","").attr("data-slick-index",n-o.slideCount).prependTo(o.$slideTrack).addClass("slick-cloned");for(t=0;t<i+o.slideCount;t+=1)n=t,e(o.$slides[n]).clone(!0).attr("id","").attr("data-slick-index",n+o.slideCount).appendTo(o.$slideTrack).addClass("slick-cloned");o.$slideTrack.find(".slick-cloned").find("[id]").each((function(){e(this).attr("id","")}))}},t.prototype.interrupt=function(e){e||this.autoPlay(),this.interrupted=e},t.prototype.selectHandler=function(t){var n=this,i=e(t.target).is(".slick-slide")?e(t.target):e(t.target).parents(".slick-slide"),o=parseInt(i.attr("data-slick-index"));o||(o=0),n.slideCount<=n.options.slidesToShow?n.slideHandler(o,!1,!0):n.slideHandler(o)},t.prototype.slideHandler=function(e,t,n){var i,o,r,s,a,l=null,c=this;if(t=t||!1,!(!0===c.animating&&!0===c.options.waitForAnimate||!0===c.options.fade&&c.currentSlide===e))if(!1===t&&c.asNavFor(e),i=e,l=c.getLeft(i),s=c.getLeft(c.currentSlide),c.currentLeft=null===c.swipeLeft?s:c.swipeLeft,!1===c.options.infinite&&!1===c.options.centerMode&&(e<0||e>c.getDotCount()*c.options.slidesToScroll))!1===c.options.fade&&(i=c.currentSlide,!0!==n?c.animateSlide(s,(function(){c.postSlide(i)})):c.postSlide(i));else if(!1===c.options.infinite&&!0===c.options.centerMode&&(e<0||e>c.slideCount-c.options.slidesToScroll))!1===c.options.fade&&(i=c.currentSlide,!0!==n?c.animateSlide(s,(function(){c.postSlide(i)})):c.postSlide(i));else{if(c.options.autoplay&&clearInterval(c.autoPlayTimer),o=i<0?c.slideCount%c.options.slidesToScroll!=0?c.slideCount-c.slideCount%c.options.slidesToScroll:c.slideCount+i:i>=c.slideCount?c.slideCount%c.options.slidesToScroll!=0?0:i-c.slideCount:i,c.animating=!0,c.$slider.trigger("beforeChange",[c,c.currentSlide,o]),r=c.currentSlide,c.currentSlide=o,c.setSlideClasses(c.currentSlide),c.options.asNavFor&&(a=(a=c.getNavTarget()).slick("getSlick")).slideCount<=a.options.slidesToShow&&a.setSlideClasses(c.currentSlide),c.updateDots(),c.updateArrows(),!0===c.options.fade)return!0!==n?(c.fadeSlideOut(r),c.fadeSlide(o,(function(){c.postSlide(o)}))):c.postSlide(o),void c.animateHeight();!0!==n?c.animateSlide(l,(function(){c.postSlide(o)})):c.postSlide(o)}},t.prototype.startLoad=function(){var e=this;!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow.hide(),e.$nextArrow.hide()),!0===e.options.dots&&e.slideCount>e.options.slidesToShow&&e.$dots.hide(),e.$slider.addClass("slick-loading")},t.prototype.swipeDirection=function(){var e,t,n,i,o=this;return e=o.touchObject.startX-o.touchObject.curX,t=o.touchObject.startY-o.touchObject.curY,n=Math.atan2(t,e),(i=Math.round(180*n/Math.PI))<0&&(i=360-Math.abs(i)),i<=45&&i>=0||i<=360&&i>=315?!1===o.options.rtl?"left":"right":i>=135&&i<=225?!1===o.options.rtl?"right":"left":!0===o.options.verticalSwiping?i>=35&&i<=135?"down":"up":"vertical"},t.prototype.swipeEnd=function(e){var t,n,i=this;if(i.dragging=!1,i.swiping=!1,i.scrolling)return i.scrolling=!1,!1;if(i.interrupted=!1,i.shouldClick=!(i.touchObject.swipeLength>10),void 0===i.touchObject.curX)return!1;if(!0===i.touchObject.edgeHit&&i.$slider.trigger("edge",[i,i.swipeDirection()]),i.touchObject.swipeLength>=i.touchObject.minSwipe){switch(n=i.swipeDirection()){case"left":case"down":t=i.options.swipeToSlide?i.checkNavigable(i.currentSlide+i.getSlideCount()):i.currentSlide+i.getSlideCount(),i.currentDirection=0;break;case"right":case"up":t=i.options.swipeToSlide?i.checkNavigable(i.currentSlide-i.getSlideCount()):i.currentSlide-i.getSlideCount(),i.currentDirection=1}"vertical"!=n&&(i.slideHandler(t),i.touchObject={},i.$slider.trigger("swipe",[i,n]))}else i.touchObject.startX!==i.touchObject.curX&&(i.slideHandler(i.currentSlide),i.touchObject={})},t.prototype.swipeHandler=function(e){var t=this;if(!(!1===t.options.swipe||"ontouchend"in document&&!1===t.options.swipe||!1===t.options.draggable&&-1!==e.type.indexOf("mouse")))switch(t.touchObject.fingerCount=e.originalEvent&&void 0!==e.originalEvent.touches?e.originalEvent.touches.length:1,t.touchObject.minSwipe=t.listWidth/t.options.touchThreshold,!0===t.options.verticalSwiping&&(t.touchObject.minSwipe=t.listHeight/t.options.touchThreshold),e.data.action){case"start":t.swipeStart(e);break;case"move":t.swipeMove(e);break;case"end":t.swipeEnd(e)}},t.prototype.swipeMove=function(e){var t,n,i,o,r,s,a=this;return r=void 0!==e.originalEvent?e.originalEvent.touches:null,!(!a.dragging||a.scrolling||r&&1!==r.length)&&(t=a.getLeft(a.currentSlide),a.touchObject.curX=void 0!==r?r[0].pageX:e.clientX,a.touchObject.curY=void 0!==r?r[0].pageY:e.clientY,a.touchObject.swipeLength=Math.round(Math.sqrt(Math.pow(a.touchObject.curX-a.touchObject.startX,2))),s=Math.round(Math.sqrt(Math.pow(a.touchObject.curY-a.touchObject.startY,2))),!a.options.verticalSwiping&&!a.swiping&&s>4?(a.scrolling=!0,!1):(!0===a.options.verticalSwiping&&(a.touchObject.swipeLength=s),n=a.swipeDirection(),void 0!==e.originalEvent&&a.touchObject.swipeLength>4&&(a.swiping=!0,e.preventDefault()),o=(!1===a.options.rtl?1:-1)*(a.touchObject.curX>a.touchObject.startX?1:-1),!0===a.options.verticalSwiping&&(o=a.touchObject.curY>a.touchObject.startY?1:-1),i=a.touchObject.swipeLength,a.touchObject.edgeHit=!1,!1===a.options.infinite&&(0===a.currentSlide&&"right"===n||a.currentSlide>=a.getDotCount()&&"left"===n)&&(i=a.touchObject.swipeLength*a.options.edgeFriction,a.touchObject.edgeHit=!0),!1===a.options.vertical?a.swipeLeft=t+i*o:a.swipeLeft=t+i*(a.$list.height()/a.listWidth)*o,!0===a.options.verticalSwiping&&(a.swipeLeft=t+i*o),!0!==a.options.fade&&!1!==a.options.touchMove&&(!0===a.animating?(a.swipeLeft=null,!1):void a.setCSS(a.swipeLeft))))},t.prototype.swipeStart=function(e){var t,n=this;if(n.interrupted=!0,1!==n.touchObject.fingerCount||n.slideCount<=n.options.slidesToShow)return n.touchObject={},!1;void 0!==e.originalEvent&&void 0!==e.originalEvent.touches&&(t=e.originalEvent.touches[0]),n.touchObject.startX=n.touchObject.curX=void 0!==t?t.pageX:e.clientX,n.touchObject.startY=n.touchObject.curY=void 0!==t?t.pageY:e.clientY,n.dragging=!0},t.prototype.unfilterSlides=t.prototype.slickUnfilter=function(){var e=this;null!==e.$slidesCache&&(e.unload(),e.$slideTrack.children(this.options.slide).detach(),e.$slidesCache.appendTo(e.$slideTrack),e.reinit())},t.prototype.unload=function(){var t=this;e(".slick-cloned",t.$slider).remove(),t.$dots&&t.$dots.remove(),t.$prevArrow&&t.htmlExpr.test(t.options.prevArrow)&&t.$prevArrow.remove(),t.$nextArrow&&t.htmlExpr.test(t.options.nextArrow)&&t.$nextArrow.remove(),t.$slides.removeClass("slick-slide slick-active slick-visible slick-current").attr("aria-hidden","true").css("width","")},t.prototype.unslick=function(e){var t=this;t.$slider.trigger("unslick",[t,e]),t.destroy()},t.prototype.updateArrows=function(){var e=this;Math.floor(e.options.slidesToShow/2),!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&!e.options.infinite&&(e.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false"),e.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false"),0===e.currentSlide?(e.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true"),e.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false")):(e.currentSlide>=e.slideCount-e.options.slidesToShow&&!1===e.options.centerMode||e.currentSlide>=e.slideCount-1&&!0===e.options.centerMode)&&(e.$nextArrow.addClass("slick-disabled").attr("aria-disabled","true"),e.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false")))},t.prototype.updateDots=function(){var e=this;null!==e.$dots&&(e.$dots.find("li").removeClass("slick-active").end(),e.$dots.find("li").eq(Math.floor(e.currentSlide/e.options.slidesToScroll)).addClass("slick-active"))},t.prototype.visibility=function(){var e=this;e.options.autoplay&&(document[e.hidden]?e.interrupted=!0:e.interrupted=!1)},e.fn.slick=function(){var e,n,i=this,o=arguments[0],r=Array.prototype.slice.call(arguments,1),s=i.length;for(e=0;e<s;e++)if("object"==typeof o||void 0===o?i[e].slick=new t(i[e],o):n=i[e].slick[o].apply(i[e].slick,r),void 0!==n)return n;return i}})),function(e){"use strict";var t=null,n=null;!function(){var t=["webkit","moz","o","ms"],n=e.document.createElement("div"),i=-1;for(i=0;i<t.length&&!e.requestAnimationFrame;i++)e.requestAnimationFrame=e[t[i]+"RequestAnimationFrame"];void 0===n.nextElementSibling&&Object.defineProperty(e.Element.prototype,"nextElementSibling",{get:function(){for(var e=this.nextSibling;e;){if(1===e.nodeType)return e;e=e.nextSibling}return null}}),function(e){e.matches=e.matches||e.machesSelector||e.mozMatchesSelector||e.msMatchesSelector||e.oMatchesSelector||e.webkitMatchesSelector||function(e){return Array.prototype.indexOf.call(this.parentElement.querySelectorAll(e),this)>-1}}(e.Element.prototype),Object.keys||(Object.keys=function(){var e,t,n,i=Object.prototype.hasOwnProperty;return e=!{toString:null}.propertyIsEnumerable("toString"),n=(t=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"]).length,function(o){var r=[],s="",a=-1;if("object"!=typeof o&&("function"!=typeof o||null===o))throw new TypeError("Object.keys called on non-object");for(s in o)i.call(o,s)&&r.push(s);if(e)for(a=0;a<n;a++)i.call(o,t[a])&&r.push(t[a]);return r}}()),Array.isArray||(Array.isArray=function(e){return"[object Array]"===Object.prototype.toString.call(e)}),"function"!=typeof Object.create&&(Object.create=function(e){var t=function(){};return function(e,n){if(e!==Object(e)&&null!==e)throw TypeError("Argument must be an object, or null");t.prototype=e||{};var i=new t;return t.prototype=null,void 0!==n&&Object.defineProperties(i,n),null===e&&(i.__proto__=null),i}}()),String.prototype.trim||(String.prototype.trim=function(){return this.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,"")}),Array.prototype.indexOf||(Array.prototype.indexOf=function(e){var t,n,i,o;if(null===this)throw new TypeError;if(0===(o=(i=Object(this)).length>>>0))return-1;if(t=0,arguments.length>1&&((t=Number(arguments[1]))!=t?t=0:0!==t&&t!==1/0&&t!==-1/0&&(t=(t>0||-1)*Math.floor(Math.abs(t)))),t>=o)return-1;for(n=t>=0?t:Math.max(o-Math.abs(t),0);n<o;n++)if(n in i&&i[n]===e)return n;return-1}),Function.prototype.bind||(Function.prototype.bind=function(e){var t,n,i,o;if("function"!=typeof this)throw new TypeError;return t=Array.prototype.slice.call(arguments,1),n=this,i=function(){},o=function(){return n.apply(this instanceof i?this:e,t.concat(Array.prototype.slice.call(arguments)))},this.prototype&&(i.prototype=this.prototype),o.prototype=new i,o}),e.Element.prototype.dispatchEvent||(e.Element.prototype.dispatchEvent=function(e){try{return this.fireEvent("on"+e.type,e)}catch(e){}})}(),(t=function(i,o,r){var s=null,a=!1,l=null,c=null,u=null,d=[],p="",f=[],h=-1;if(u=r||e.document,(a=arguments[3])&&(a="boolean"==typeof a),"string"==typeof i)f=u.querySelectorAll(i);else if(i&&"object"==typeof i&&n.isElement(i,u))f=[i];else{if(!i||"object"!=typeof i||!i.length)throw new Error(t.messages.errorFactoryInvalidContainer());f=i}if(f.length<1)throw new Error(t.messages.errorFactoryContainerNotFound());for(h=0;(s=f[h])&&(!(h>0)||a);h++)s.id?p=s.id:(p="MixItUp"+n.randomHex(),s.id=p),t.instances[p]instanceof t.Mixer?(l=t.instances[p],(!o||o&&o.debug&&!1!==o.debug.showWarnings)&&console.warn(t.messages.warningFactoryPreexistingInstance())):((l=new t.Mixer).attach(s,u,p,o),t.instances[p]=l),c=new t.Facade(l),o&&o.debug&&o.debug.enable?d.push(l):d.push(c);return a?new t.Collection(d):d[0]}).use=function(e){t.Base.prototype.callActions.call(t,"beforeUse",arguments),"function"==typeof e&&"mixitup-extension"===e.TYPE?void 0===t.extensions[e.NAME]&&(e(t),t.extensions[e.NAME]=e):e.fn&&e.fn.jquery&&(t.libraries.$=e),t.Base.prototype.callActions.call(t,"afterUse",arguments)},t.instances={},t.extensions={},t.libraries={},n={hasClass:function(e,t){return!!e.className.match(new RegExp("(\\s|^)"+t+"(\\s|$)"))},addClass:function(e,t){this.hasClass(e,t)||(e.className+=e.className?" "+t:t)},removeClass:function(e,t){if(this.hasClass(e,t)){var n=new RegExp("(\\s|^)"+t+"(\\s|$)");e.className=e.className.replace(n," ").trim()}},extend:function(e,t,n,i){var o=[],r="",s=-1;n=n||!1,i=i||!1;try{if(Array.isArray(t))for(s=0;s<t.length;s++)o.push(s);else t&&(o=Object.keys(t));for(s=0;s<o.length;s++)r=o[s],!n||"object"!=typeof t[r]||this.isElement(t[r])?e[r]=t[r]:Array.isArray(t[r])?(e[r]||(e[r]=[]),this.extend(e[r],t[r],n,i)):(e[r]||(e[r]={}),this.extend(e[r],t[r],n,i))}catch(t){if(!i)throw t;this.handleExtendError(t,e)}return e},handleExtendError:function(e,n){var i=null,o="",r="",s="",a="",l="",c=-1,u=-1;if(e instanceof TypeError&&(i=/property "?(\w*)"?[,:] object/i.exec(e.message))){for(l in o=i[1],n){for(u=0;u<o.length&&o.charAt(u)===l.charAt(u);)u++;u>c&&(c=u,a=l)}throw c>1&&(s=t.messages.errorConfigInvalidPropertySuggestion({probableMatch:a})),r=t.messages.errorConfigInvalidProperty({erroneous:o,suggestion:s}),new TypeError(r)}throw e},template:function(e){for(var t=/\${([\w]*)}/g,n={},i=null;i=t.exec(e);)n[i[1]]=new RegExp("\\${"+i[1]+"}","g");return function(t){var i="",o=e;for(i in t=t||{},n)o=o.replace(n[i],void 0!==t[i]?t[i]:"");return o}},on:function(t,n,i,o){t&&(t.addEventListener?t.addEventListener(n,i,o):t.attachEvent&&(t["e"+n+i]=i,t[n+i]=function(){t["e"+n+i](e.event)},t.attachEvent("on"+n,t[n+i])))},off:function(e,t,n){e&&(e.removeEventListener?e.removeEventListener(t,n,!1):e.detachEvent&&(e.detachEvent("on"+t,e[t+n]),e[t+n]=null))},getCustomEvent:function(t,n,i){var o=null;return i=i||e.document,"function"==typeof e.CustomEvent?o=new e.CustomEvent(t,{detail:n,bubbles:!0,cancelable:!0}):"function"==typeof i.createEvent?(o=i.createEvent("CustomEvent")).initCustomEvent(t,!0,!0,n):((o=i.createEventObject()).type=t,o.returnValue=!1,o.cancelBubble=!1,o.detail=n),o},getOriginalEvent:function(e){return e.touches&&e.touches.length?e.touches[0]:e.changedTouches&&e.changedTouches.length?e.changedTouches[0]:e},index:function(e,t){for(var n=0;null!==(e=e.previousElementSibling);)t&&!e.matches(t)||++n;return n},camelCase:function(e){return e.toLowerCase().replace(/([_-][a-z])/g,(function(e){return e.toUpperCase().replace(/[_-]/,"")}))},pascalCase:function(e){return(e=this.camelCase(e)).charAt(0).toUpperCase()+e.slice(1)},dashCase:function(e){return e.replace(/([A-Z])/g,"-$1").replace(/^-/,"").toLowerCase()},isElement:function(t,n){return n=n||e.document,!!(e.HTMLElement&&t instanceof e.HTMLElement)||!!(n.defaultView&&n.defaultView.HTMLElement&&t instanceof n.defaultView.HTMLElement)||null!==t&&1===t.nodeType&&"string"==typeof t.nodeName},createElement:function(t,n){var i=null,o=null;for(i=(n=n||e.document).createDocumentFragment(),(o=n.createElement("div")).innerHTML=t.trim();o.firstChild;)i.appendChild(o.firstChild);return i},removeWhitespace:function(e){for(var t;e&&"#text"===e.nodeName;)t=e,e=e.previousSibling,t.parentElement&&t.parentElement.removeChild(t)},isEqualArray:function(e,t){var n=e.length;if(n!==t.length)return!1;for(;n--;)if(e[n]!==t[n])return!1;return!0},deepEquals:function(e,t){var n;if("object"==typeof e&&e&&"object"==typeof t&&t){if(Object.keys(e).length!==Object.keys(t).length)return!1;for(n in e)if(!t.hasOwnProperty(n)||!this.deepEquals(e[n],t[n]))return!1}else if(e!==t)return!1;return!0},arrayShuffle:function(e){for(var t=e.slice(),n=t.length,i=n,o=-1,r=[];i--;)o=~~(Math.random()*n),r=t[i],t[i]=t[o],t[o]=r;return t},arrayFromList:function(e){var t,n;try{return Array.prototype.slice.call(e)}catch(i){for(t=[],n=0;n<e.length;n++)t.push(e[n]);return t}},debounce:function(e,t,n){var i;return function(){var o=this,r=arguments,s=n&&!i,a=null;a=function(){i=null,n||e.apply(o,r)},clearTimeout(i),i=setTimeout(a,t),s&&e.apply(o,r)}},position:function(e){for(var t=0,n=0,i=e;e;)t-=e.scrollLeft,n-=e.scrollTop,e===i&&(t+=e.offsetLeft,n+=e.offsetTop,i=e.offsetParent),e=e.parentElement;return{x:t,y:n}},getHypotenuse:function(e,t){var n=e.x-t.x,i=e.y-t.y;return n=n<0?-1*n:n,i=i<0?-1*i:i,Math.sqrt(Math.pow(n,2)+Math.pow(i,2))},getIntersectionRatio:function(e,t){var n,i=e.width*e.height;return n=Math.max(0,Math.min(e.left+e.width,t.left+t.width)-Math.max(e.left,t.left)),Math.max(0,Math.min(e.top+e.height,t.top+t.height)-Math.max(e.top,t.top))*n/i},closestParent:function(t,n,i,o){var r=t.parentNode;if(o=o||e.document,i&&t.matches(n))return t;for(;r&&r!=o.body;){if(r.matches&&r.matches(n))return r;if(!r.parentNode)return null;r=r.parentNode}return null},children:function(t,n,i){var o=[],r="";return i=i||e.doc,t&&(t.id||(r="Temp"+this.randomHexKey(),t.id=r),o=i.querySelectorAll("#"+t.id+" > "+n),r&&t.removeAttribute("id")),o},clean:function(e){var t=[],n=-1;for(n=0;n<e.length;n++)""!==e[n]&&t.push(e[n]);return t},defer:function(n){var i=null,o=null,r=null;return o=new this.Deferred,t.features.has.promises?o.promise=new Promise((function(e,t){o.resolve=e,o.reject=t})):(r=e.jQuery||n.$)&&"function"==typeof r.Deferred?(i=r.Deferred(),o.promise=i.promise(),o.resolve=i.resolve,o.reject=i.reject):e.console&&console.warn(t.messages.warningNoPromiseImplementation()),o},all:function(n,i){var o=null;return t.features.has.promises?Promise.all(n):(o=e.jQuery||i.$)&&"function"==typeof o.when?o.when.apply(o,n).done((function(){return arguments})):(e.console&&console.warn(t.messages.warningNoPromiseImplementation()),[])},getPrefix:function(e,t,i){var o=-1,r="";if(n.dashCase(t)in e.style)return"";for(o=0;r=i[o];o++)if(r+t in e.style)return r.toLowerCase();return"unsupported"},randomHex:function(){return("00000"+(16777216*Math.random()<<0).toString(16)).substr(-6).toUpperCase()},getDocumentState:function(t){return t="object"==typeof t.body?t:e.document,{scrollTop:e.pageYOffset,scrollLeft:e.pageXOffset,docHeight:t.documentElement.scrollHeight,docWidth:t.documentElement.scrollWidth,viewportHeight:t.documentElement.clientHeight,viewportWidth:t.documentElement.clientWidth}},bind:function(e,t){return function(){return t.apply(e,arguments)}},isVisible:function(t){var n=null;return!!t.offsetParent||"fixed"===(n=e.getComputedStyle(t)).position&&"hidden"!==n.visibility&&"0"!==n.opacity},seal:function(e){"function"==typeof Object.seal&&Object.seal(e)},freeze:function(e){"function"==typeof Object.freeze&&Object.freeze(e)},compareVersions:function(e,t){var n=e.split("."),i=t.split("."),o=-1,r=-1,s=-1;for(s=0;s<n.length;s++){if(o=parseInt(n[s].replace(/[^\d.]/g,"")),(r=parseInt(i[s].replace(/[^\d.]/g,"")||0))<o)return!1;if(r>o)return!0}return!0},Deferred:function(){this.promise=null,this.resolve=null,this.reject=null,this.id=n.randomHex()},isEmptyObject:function(e){var t="";if("function"==typeof Object.keys)return 0===Object.keys(e).length;for(t in e)if(e.hasOwnProperty(t))return!1;return!0},getClassname:function(e,t,n){var i="";return(i+=e.block).length&&(i+=e.delineatorElement),i+=e["element"+this.pascalCase(t)],n?(i.length&&(i+=e.delineatorModifier),i+=n):i},getProperty:function(e,t){var n,i=t.split("."),o="",r=0;if(!t)return e;for(n=function(e){return e?e[o]:null};r<i.length;)o=i[r],e=n(e),r++;return void 0!==e?e:null}},t.h=n,t.Base=function(){},t.Base.prototype={constructor:t.Base,callActions:function(e,t){var i=this.constructor.actions[e],o="";if(i&&!n.isEmptyObject(i))for(o in i)i[o].apply(this,t)},callFilters:function(e,t,i){var o=this.constructor.filters[e],r=t,s="";if(!o||n.isEmptyObject(o))return r;for(s in i=i||[],o)(i=n.arrayFromList(i)).unshift(r),r=o[s].apply(this,i);return r}},t.BaseStatic=function(){this.actions={},this.filters={},this.extend=function(e){n.extend(this.prototype,e)},this.registerAction=function(e,t,n){(this.actions[e]=this.actions[e]||{})[t]=n},this.registerFilter=function(e,t,n){(this.filters[e]=this.filters[e]||{})[t]=n}},t.Features=function(){t.Base.call(this),this.callActions("beforeConstruct"),this.boxSizingPrefix="",this.transformPrefix="",this.transitionPrefix="",this.boxSizingPrefix="",this.transformProp="",this.transformRule="",this.transitionProp="",this.perspectiveProp="",this.perspectiveOriginProp="",this.has=new t.Has,this.canary=null,this.BOX_SIZING_PROP="boxSizing",this.TRANSITION_PROP="transition",this.TRANSFORM_PROP="transform",this.PERSPECTIVE_PROP="perspective",this.PERSPECTIVE_ORIGIN_PROP="perspectiveOrigin",this.VENDORS=["Webkit","moz","O","ms"],this.TWEENABLE=["opacity","width","height","marginRight","marginBottom","x","y","scale","translateX","translateY","translateZ","rotateX","rotateY","rotateZ"],this.callActions("afterConstruct")},t.BaseStatic.call(t.Features),t.Features.prototype=Object.create(t.Base.prototype),n.extend(t.Features.prototype,{constructor:t.Features,init:function(){var e=this;e.callActions("beforeInit",arguments),e.canary=document.createElement("div"),e.setPrefixes(),e.runTests(),e.callActions("beforeInit",arguments)},runTests:function(){var t=this;t.callActions("beforeRunTests",arguments),t.has.promises="function"==typeof e.Promise,t.has.transitions="unsupported"!==t.transitionPrefix,t.callActions("afterRunTests",arguments),n.freeze(t.has)},setPrefixes:function(){var e=this;e.callActions("beforeSetPrefixes",arguments),e.transitionPrefix=n.getPrefix(e.canary,"Transition",e.VENDORS),e.transformPrefix=n.getPrefix(e.canary,"Transform",e.VENDORS),e.boxSizingPrefix=n.getPrefix(e.canary,"BoxSizing",e.VENDORS),e.boxSizingProp=e.boxSizingPrefix?e.boxSizingPrefix+n.pascalCase(e.BOX_SIZING_PROP):e.BOX_SIZING_PROP,e.transitionProp=e.transitionPrefix?e.transitionPrefix+n.pascalCase(e.TRANSITION_PROP):e.TRANSITION_PROP,e.transformProp=e.transformPrefix?e.transformPrefix+n.pascalCase(e.TRANSFORM_PROP):e.TRANSFORM_PROP,e.transformRule=e.transformPrefix?"-"+e.transformPrefix+"-"+e.TRANSFORM_PROP:e.TRANSFORM_PROP,e.perspectiveProp=e.transformPrefix?e.transformPrefix+n.pascalCase(e.PERSPECTIVE_PROP):e.PERSPECTIVE_PROP,e.perspectiveOriginProp=e.transformPrefix?e.transformPrefix+n.pascalCase(e.PERSPECTIVE_ORIGIN_PROP):e.PERSPECTIVE_ORIGIN_PROP,e.callActions("afterSetPrefixes",arguments)}}),t.Has=function(){this.transitions=!1,this.promises=!1,n.seal(this)},t.features=new t.Features,t.features.init(),t.ConfigAnimation=function(){t.Base.call(this),this.callActions("beforeConstruct"),this.enable=!0,this.effects="fade scale",this.effectsIn="",this.effectsOut="",this.duration=600,this.easing="ease",this.applyPerspective=!0,this.perspectiveDistance="3000px",this.perspectiveOrigin="50% 50%",this.queue=!0,this.queueLimit=3,this.animateResizeContainer=!0,this.animateResizeTargets=!1,this.staggerSequence=null,this.reverseOut=!1,this.nudge=!0,this.clampHeight=!0,this.clampWidth=!0,this.callActions("afterConstruct"),n.seal(this)},t.BaseStatic.call(t.ConfigAnimation),t.ConfigAnimation.prototype=Object.create(t.Base.prototype),t.ConfigAnimation.prototype.constructor=t.ConfigAnimation,t.ConfigBehavior=function(){t.Base.call(this),this.callActions("beforeConstruct"),this.liveSort=!1,this.callActions("afterConstruct"),n.seal(this)},t.BaseStatic.call(t.ConfigBehavior),t.ConfigBehavior.prototype=Object.create(t.Base.prototype),t.ConfigBehavior.prototype.constructor=t.ConfigBehavior,t.ConfigCallbacks=function(){t.Base.call(this),this.callActions("beforeConstruct"),this.onMixStart=null,this.onMixBusy=null,this.onMixEnd=null,this.onMixFail=null,this.onMixClick=null,this.callActions("afterConstruct"),n.seal(this)},t.BaseStatic.call(t.ConfigCallbacks),t.ConfigCallbacks.prototype=Object.create(t.Base.prototype),t.ConfigCallbacks.prototype.constructor=t.ConfigCallbacks,t.ConfigControls=function(){t.Base.call(this),this.callActions("beforeConstruct"),this.enable=!0,this.live=!1,this.scope="global",this.toggleLogic="or",this.toggleDefault="all",this.callActions("afterConstruct"),n.seal(this)},t.BaseStatic.call(t.ConfigControls),t.ConfigControls.prototype=Object.create(t.Base.prototype),t.ConfigControls.prototype.constructor=t.ConfigControls,t.ConfigClassNames=function(){t.Base.call(this),this.callActions("beforeConstruct"),this.block="mixitup",this.elementContainer="container",this.elementFilter="control",this.elementSort="control",this.elementMultimix="control",this.elementToggle="control",this.modifierActive="active",this.modifierDisabled="disabled",this.modifierFailed="failed",this.delineatorElement="-",this.delineatorModifier="-",this.callActions("afterConstruct"),n.seal(this)},t.BaseStatic.call(t.ConfigClassNames),t.ConfigClassNames.prototype=Object.create(t.Base.prototype),t.ConfigClassNames.prototype.constructor=t.ConfigClassNames,t.ConfigData=function(){t.Base.call(this),this.callActions("beforeConstruct"),this.uidKey="",this.dirtyCheck=!1,this.callActions("afterConstruct"),n.seal(this)},t.BaseStatic.call(t.ConfigData),t.ConfigData.prototype=Object.create(t.Base.prototype),t.ConfigData.prototype.constructor=t.ConfigData,t.ConfigDebug=function(){t.Base.call(this),this.callActions("beforeConstruct"),this.enable=!1,this.showWarnings=!0,this.fauxAsync=!1,this.callActions("afterConstruct"),n.seal(this)},t.BaseStatic.call(t.ConfigDebug),t.ConfigDebug.prototype=Object.create(t.Base.prototype),t.ConfigDebug.prototype.constructor=t.ConfigDebug,t.ConfigLayout=function(){t.Base.call(this),this.callActions("beforeConstruct"),this.allowNestedTargets=!0,this.containerClassName="",this.siblingBefore=null,this.siblingAfter=null,this.callActions("afterConstruct"),n.seal(this)},t.BaseStatic.call(t.ConfigLayout),t.ConfigLayout.prototype=Object.create(t.Base.prototype),t.ConfigLayout.prototype.constructor=t.ConfigLayout,t.ConfigLoad=function(){t.Base.call(this),this.callActions("beforeConstruct"),this.filter="all",this.sort="default:asc",this.dataset=null,this.callActions("afterConstruct"),n.seal(this)},t.BaseStatic.call(t.ConfigLoad),t.ConfigLoad.prototype=Object.create(t.Base.prototype),t.ConfigLoad.prototype.constructor=t.ConfigLoad,t.ConfigSelectors=function(){t.Base.call(this),this.callActions("beforeConstruct"),this.target=".mix",this.control="",this.callActions("afterConstruct"),n.seal(this)},t.BaseStatic.call(t.ConfigSelectors),t.ConfigSelectors.prototype=Object.create(t.Base.prototype),t.ConfigSelectors.prototype.constructor=t.ConfigSelectors,t.ConfigRender=function(){t.Base.call(this),this.callActions("beforeConstruct"),this.target=null,this.callActions("afterConstruct"),n.seal(this)},t.BaseStatic.call(t.ConfigRender),t.ConfigRender.prototype=Object.create(t.Base.prototype),t.ConfigRender.prototype.constructor=t.ConfigRender,t.ConfigTemplates=function(){t.Base.call(this),this.callActions("beforeConstruct"),this.callActions("afterConstruct"),n.seal(this)},t.BaseStatic.call(t.ConfigTemplates),t.ConfigTemplates.prototype=Object.create(t.Base.prototype),t.ConfigTemplates.prototype.constructor=t.ConfigTemplates,t.Config=function(){t.Base.call(this),this.callActions("beforeConstruct"),this.animation=new t.ConfigAnimation,this.behavior=new t.ConfigBehavior,this.callbacks=new t.ConfigCallbacks,this.controls=new t.ConfigControls,this.classNames=new t.ConfigClassNames,this.data=new t.ConfigData,this.debug=new t.ConfigDebug,this.layout=new t.ConfigLayout,this.load=new t.ConfigLoad,this.selectors=new t.ConfigSelectors,this.render=new t.ConfigRender,this.templates=new t.ConfigTemplates,this.callActions("afterConstruct"),n.seal(this)},t.BaseStatic.call(t.Config),t.Config.prototype=Object.create(t.Base.prototype),t.Config.prototype.constructor=t.Config,t.MixerDom=function(){t.Base.call(this),this.callActions("beforeConstruct"),this.document=null,this.body=null,this.container=null,this.parent=null,this.targets=[],this.callActions("afterConstruct"),n.seal(this)},t.BaseStatic.call(t.MixerDom),t.MixerDom.prototype=Object.create(t.Base.prototype),t.MixerDom.prototype.constructor=t.MixerDom,t.UiClassNames=function(){t.Base.call(this),this.callActions("beforeConstruct"),this.base="",this.active="",this.disabled="",this.callActions("afterConstruct"),n.seal(this)},t.BaseStatic.call(t.UiClassNames),t.UiClassNames.prototype=Object.create(t.Base.prototype),t.UiClassNames.prototype.constructor=t.UiClassNames,t.CommandDataset=function(){t.Base.call(this),this.callActions("beforeConstruct"),this.dataset=null,this.callActions("afterConstruct"),n.seal(this)},t.BaseStatic.call(t.CommandDataset),t.CommandDataset.prototype=Object.create(t.Base.prototype),t.CommandDataset.prototype.constructor=t.CommandDataset,t.CommandMultimix=function(){t.Base.call(this),this.callActions("beforeConstruct"),this.filter=null,this.sort=null,this.insert=null,this.remove=null,this.changeLayout=null,this.callActions("afterConstruct"),n.seal(this)},t.BaseStatic.call(t.CommandMultimix),t.CommandMultimix.prototype=Object.create(t.Base.prototype),t.CommandMultimix.prototype.constructor=t.CommandMultimix,t.CommandFilter=function(){t.Base.call(this),this.callActions("beforeConstruct"),this.selector="",this.collection=null,this.action="show",this.callActions("afterConstruct"),n.seal(this)},t.BaseStatic.call(t.CommandFilter),t.CommandFilter.prototype=Object.create(t.Base.prototype),t.CommandFilter.prototype.constructor=t.CommandFilter,t.CommandSort=function(){t.Base.call(this),this.callActions("beforeConstruct"),this.sortString="",this.attribute="",this.order="asc",this.collection=null,this.next=null,this.callActions("afterConstruct"),n.seal(this)},t.BaseStatic.call(t.CommandSort),t.CommandSort.prototype=Object.create(t.Base.prototype),t.CommandSort.prototype.constructor=t.CommandSort,t.CommandInsert=function(){t.Base.call(this),this.callActions("beforeConstruct"),this.index=0,this.collection=[],this.position="before",this.sibling=null,this.callActions("afterConstruct"),n.seal(this)},t.BaseStatic.call(t.CommandInsert),t.CommandInsert.prototype=Object.create(t.Base.prototype),t.CommandInsert.prototype.constructor=t.CommandInsert,t.CommandRemove=function(){t.Base.call(this),this.callActions("beforeConstruct"),this.targets=[],this.collection=[],this.callActions("afterConstruct"),n.seal(this)},t.BaseStatic.call(t.CommandRemove),t.CommandRemove.prototype=Object.create(t.Base.prototype),t.CommandRemove.prototype.constructor=t.CommandRemove,t.CommandChangeLayout=function(){t.Base.call(this),this.callActions("beforeConstruct"),this.containerClassName="",this.callActions("afterConstruct"),n.seal(this)},t.BaseStatic.call(t.CommandChangeLayout),t.CommandChangeLayout.prototype=Object.create(t.Base.prototype),t.CommandChangeLayout.prototype.constructor=t.CommandChangeLayout,t.ControlDefinition=function(e,i,o,r){t.Base.call(this),this.callActions("beforeConstruct"),this.type=e,this.selector=i,this.live=o||!1,this.parent=r||"",this.callActions("afterConstruct"),n.freeze(this),n.seal(this)},t.BaseStatic.call(t.ControlDefinition),t.ControlDefinition.prototype=Object.create(t.Base.prototype),t.ControlDefinition.prototype.constructor=t.ControlDefinition,t.controlDefinitions=[],t.controlDefinitions.push(new t.ControlDefinition("multimix","[data-filter][data-sort]")),t.controlDefinitions.push(new t.ControlDefinition("filter","[data-filter]")),t.controlDefinitions.push(new t.ControlDefinition("sort","[data-sort]")),t.controlDefinitions.push(new t.ControlDefinition("toggle","[data-toggle]")),t.Control=function(){t.Base.call(this),this.callActions("beforeConstruct"),this.el=null,this.selector="",this.bound=[],this.pending=-1,this.type="",this.status="inactive",this.filter="",this.sort="",this.canDisable=!1,this.handler=null,this.classNames=new t.UiClassNames,this.callActions("afterConstruct"),n.seal(this)},t.BaseStatic.call(t.Control),t.Control.prototype=Object.create(t.Base.prototype),n.extend(t.Control.prototype,{constructor:t.Control,init:function(e,n,i){var o=this;if(this.callActions("beforeInit",arguments),o.el=e,o.type=n,o.selector=i,o.selector)o.status="live";else switch(o.canDisable="boolean"==typeof o.el.disable,o.type){case"filter":o.filter=o.el.getAttribute("data-filter");break;case"toggle":o.filter=o.el.getAttribute("data-toggle");break;case"sort":o.sort=o.el.getAttribute("data-sort");break;case"multimix":o.filter=o.el.getAttribute("data-filter"),o.sort=o.el.getAttribute("data-sort")}o.bindClick(),t.controls.push(o),this.callActions("afterInit",arguments)},isBound:function(e){var t=this,n=!1;return this.callActions("beforeIsBound",arguments),n=t.bound.indexOf(e)>-1,t.callFilters("afterIsBound",n,arguments)},addBinding:function(e){var t=this;this.callActions("beforeAddBinding",arguments),t.isBound()||t.bound.push(e),this.callActions("afterAddBinding",arguments)},removeBinding:function(e){var n=this,i=-1;this.callActions("beforeRemoveBinding",arguments),(i=n.bound.indexOf(e))>-1&&n.bound.splice(i,1),n.bound.length<1&&(n.unbindClick(),i=t.controls.indexOf(n),t.controls.splice(i,1),"active"===n.status&&n.renderStatus(n.el,"inactive")),this.callActions("afterRemoveBinding",arguments)},bindClick:function(){var e=this;this.callActions("beforeBindClick",arguments),e.handler=function(t){e.handleClick(t)},n.on(e.el,"click",e.handler),this.callActions("afterBindClick",arguments)},unbindClick:function(){var e=this;this.callActions("beforeUnbindClick",arguments),n.off(e.el,"click",e.handler),e.handler=null,this.callActions("afterUnbindClick",arguments)},handleClick:function(e){var i=this,o=null,r=null,s=!1,a={},l=null,c=[],u=-1;if(this.callActions("beforeHandleClick",arguments),this.pending=0,r=i.bound[0],o=i.selector?n.closestParent(e.target,r.config.selectors.control+i.selector,!0,r.dom.document):i.el){switch(i.type){case"filter":a.filter=i.filter||o.getAttribute("data-filter");break;case"sort":a.sort=i.sort||o.getAttribute("data-sort");break;case"multimix":a.filter=i.filter||o.getAttribute("data-filter"),a.sort=i.sort||o.getAttribute("data-sort");break;case"toggle":a.filter=i.filter||o.getAttribute("data-toggle"),s="live"===i.status?n.hasClass(o,i.classNames.active):"active"===i.status}for(u=0;u<i.bound.length;u++)l=new t.CommandMultimix,n.extend(l,a),c.push(l);for(c=i.callFilters("commandsHandleClick",c,arguments),i.pending=i.bound.length,u=0;r=i.bound[u];u++)(a=c[u])&&(r.lastClicked||(r.lastClicked=o),t.events.fire("mixClick",r.dom.container,{state:r.state,instance:r,originalEvent:e,control:r.lastClicked},r.dom.document),"function"==typeof r.config.callbacks.onMixClick&&!1===r.config.callbacks.onMixClick.call(r.lastClicked,r.state,e,r)||("toggle"===i.type?s?r.toggleOff(a.filter):r.toggleOn(a.filter):r.multimix(a)));this.callActions("afterHandleClick",arguments)}else i.callActions("afterHandleClick",arguments)},update:function(e,n){var i=this,o=new t.CommandMultimix;i.callActions("beforeUpdate",arguments),i.pending--,i.pending=Math.max(0,i.pending),i.pending>0||("live"===i.status?i.updateLive(e,n):(o.sort=i.sort,o.filter=i.filter,i.callFilters("actionsUpdate",o,arguments),i.parseStatusChange(i.el,e,o,n)),i.callActions("afterUpdate",arguments))},updateLive:function(e,n){var i=this,o=null,r=null,s=null,a=-1;if(i.callActions("beforeUpdateLive",arguments),i.el){for(o=i.el.querySelectorAll(i.selector),a=0;s=o[a];a++){switch(r=new t.CommandMultimix,i.type){case"filter":r.filter=s.getAttribute("data-filter");break;case"sort":r.sort=s.getAttribute("data-sort");break;case"multimix":r.filter=s.getAttribute("data-filter"),r.sort=s.getAttribute("data-sort");break;case"toggle":r.filter=s.getAttribute("data-toggle")}r=i.callFilters("actionsUpdateLive",r,arguments),i.parseStatusChange(s,e,r,n)}i.callActions("afterUpdateLive",arguments)}},parseStatusChange:function(e,t,n,i){var o=this,r="",s=-1;switch(o.callActions("beforeParseStatusChange",arguments),o.type){case"filter":t.filter===n.filter?o.renderStatus(e,"active"):o.renderStatus(e,"inactive");break;case"multimix":t.sort===n.sort&&t.filter===n.filter?o.renderStatus(e,"active"):o.renderStatus(e,"inactive");break;case"sort":t.sort.match(/:asc/g)&&(r=t.sort.replace(/:asc/g,"")),t.sort===n.sort||r===n.sort?o.renderStatus(e,"active"):o.renderStatus(e,"inactive");break;case"toggle":for(i.length<1&&o.renderStatus(e,"inactive"),t.filter===n.filter&&o.renderStatus(e,"active"),s=0;s<i.length;s++){if(i[s]===n.filter){o.renderStatus(e,"active");break}o.renderStatus(e,"inactive")}}o.callActions("afterParseStatusChange",arguments)},renderStatus:function(e,t){var i=this;switch(i.callActions("beforeRenderStatus",arguments),t){case"active":n.addClass(e,i.classNames.active),n.removeClass(e,i.classNames.disabled),i.canDisable&&(i.el.disabled=!1);break;case"inactive":n.removeClass(e,i.classNames.active),n.removeClass(e,i.classNames.disabled),i.canDisable&&(i.el.disabled=!1);break;case"disabled":i.canDisable&&(i.el.disabled=!0),n.addClass(e,i.classNames.disabled),n.removeClass(e,i.classNames.active)}"live"!==i.status&&(i.status=t),i.callActions("afterRenderStatus",arguments)}}),t.controls=[],t.StyleData=function(){t.Base.call(this),this.callActions("beforeConstruct"),this.x=0,this.y=0,this.top=0,this.right=0,this.bottom=0,this.left=0,this.width=0,this.height=0,this.marginRight=0,this.marginBottom=0,this.opacity=0,this.scale=new t.TransformData,this.translateX=new t.TransformData,this.translateY=new t.TransformData,this.translateZ=new t.TransformData,this.rotateX=new t.TransformData,this.rotateY=new t.TransformData,this.rotateZ=new t.TransformData,this.callActions("afterConstruct"),n.seal(this)},t.BaseStatic.call(t.StyleData),t.StyleData.prototype=Object.create(t.Base.prototype),t.StyleData.prototype.constructor=t.StyleData,t.TransformData=function(){t.Base.call(this),this.callActions("beforeConstruct"),this.value=0,this.unit="",this.callActions("afterConstruct"),n.seal(this)},t.BaseStatic.call(t.TransformData),t.TransformData.prototype=Object.create(t.Base.prototype),t.TransformData.prototype.constructor=t.TransformData,t.TransformDefaults=function(){t.StyleData.apply(this),this.callActions("beforeConstruct"),this.scale.value=.01,this.scale.unit="",this.translateX.value=20,this.translateX.unit="px",this.translateY.value=20,this.translateY.unit="px",this.translateZ.value=20,this.translateZ.unit="px",this.rotateX.value=90,this.rotateX.unit="deg",this.rotateY.value=90,this.rotateY.unit="deg",this.rotateX.value=90,this.rotateX.unit="deg",this.rotateZ.value=180,this.rotateZ.unit="deg",this.callActions("afterConstruct"),n.seal(this)},t.BaseStatic.call(t.TransformDefaults),t.TransformDefaults.prototype=Object.create(t.StyleData.prototype),t.TransformDefaults.prototype.constructor=t.TransformDefaults,t.transformDefaults=new t.TransformDefaults,t.EventDetail=function(){this.state=null,this.futureState=null,this.instance=null,this.originalEvent=null},t.Events=function(){t.Base.call(this),this.callActions("beforeConstruct"),this.mixStart=null,this.mixBusy=null,this.mixEnd=null,this.mixFail=null,this.mixClick=null,this.callActions("afterConstruct"),n.seal(this)},t.BaseStatic.call(t.Events),t.Events.prototype=Object.create(t.Base.prototype),t.Events.prototype.constructor=t.Events,t.Events.prototype.fire=function(e,i,o,r){var s=this,a=null,l=new t.EventDetail;if(s.callActions("beforeFire",arguments),void 0===s[e])throw new Error('Event type "'+e+'" not found.');l.state=new t.State,n.extend(l.state,o.state),o.futureState&&(l.futureState=new t.State,n.extend(l.futureState,o.futureState)),l.instance=o.instance,o.originalEvent&&(l.originalEvent=o.originalEvent),a=n.getCustomEvent(e,l,r),s.callFilters("eventFire",a,arguments),i.dispatchEvent(a)},t.events=new t.Events,t.QueueItem=function(){t.Base.call(this),this.callActions("beforeConstruct"),this.args=[],this.instruction=null,this.triggerElement=null,this.deferred=null,this.isToggling=!1,this.callActions("afterConstruct"),n.seal(this)},t.BaseStatic.call(t.QueueItem),t.QueueItem.prototype=Object.create(t.Base.prototype),t.QueueItem.prototype.constructor=t.QueueItem,t.Mixer=function(){t.Base.call(this),this.callActions("beforeConstruct"),this.config=new t.Config,this.id="",this.isBusy=!1,this.isToggling=!1,this.incPadding=!0,this.controls=[],this.targets=[],this.origOrder=[],this.cache={},this.toggleArray=[],this.targetsMoved=0,this.targetsImmovable=0,this.targetsBound=0,this.targetsDone=0,this.staggerDuration=0,this.effectsIn=null,this.effectsOut=null,this.transformIn=[],this.transformOut=[],this.queue=[],this.state=null,this.lastOperation=null,this.lastClicked=null,this.userCallback=null,this.userDeferred=null,this.dom=new t.MixerDom,this.callActions("afterConstruct"),n.seal(this)},t.BaseStatic.call(t.Mixer),t.Mixer.prototype=Object.create(t.Base.prototype),n.extend(t.Mixer.prototype,{constructor:t.Mixer,attach:function(i,o,r,s){var a=this,l=null,c=-1;for(a.callActions("beforeAttach",arguments),a.id=r,s&&n.extend(a.config,s,!0,!0),a.sanitizeConfig(),a.cacheDom(i,o),a.config.layout.containerClassName&&n.addClass(a.dom.container,a.config.layout.containerClassName),t.features.has.transitions||(a.config.animation.enable=!1),void 0===e.console&&(a.config.debug.showWarnings=!1),a.config.data.uidKey&&(a.config.controls.enable=!1),a.indexTargets(),a.state=a.getInitialState(),c=0;l=a.lastOperation.toHide[c];c++)l.hide();a.config.controls.enable&&(a.initControls(),a.buildToggleArray(null,a.state),a.updateControls({filter:a.state.activeFilter,sort:a.state.activeSort})),a.parseEffects(),a.callActions("afterAttach",arguments)},sanitizeConfig:function(){var e=this;e.callActions("beforeSanitizeConfig",arguments),e.config.controls.scope=e.config.controls.scope.toLowerCase().trim(),e.config.controls.toggleLogic=e.config.controls.toggleLogic.toLowerCase().trim(),e.config.controls.toggleDefault=e.config.controls.toggleDefault.toLowerCase().trim(),e.config.animation.effects=e.config.animation.effects.trim(),e.callActions("afterSanitizeConfig",arguments)},getInitialState:function(){var e=this,n=new t.State,i=new t.Operation;if(e.callActions("beforeGetInitialState",arguments),n.activeContainerClassName=e.config.layout.containerClassName,e.config.load.dataset){if(!e.config.data.uidKey||"string"!=typeof e.config.data.uidKey)throw new TypeError(t.messages.errorConfigDataUidKeyNotSet());i.startDataset=i.newDataset=n.activeDataset=e.config.load.dataset.slice(),i.startContainerClassName=i.newContainerClassName=n.activeContainerClassName,i.show=e.targets.slice(),n=e.callFilters("stateGetInitialState",n,arguments)}else n.activeFilter=e.parseFilterArgs([e.config.load.filter]).command,n.activeSort=e.parseSortArgs([e.config.load.sort]).command,n.totalTargets=e.targets.length,(n=e.callFilters("stateGetInitialState",n,arguments)).activeSort.collection||n.activeSort.attribute||"random"===n.activeSort.order||"desc"===n.activeSort.order?(i.newSort=n.activeSort,e.sortOperation(i),e.printSort(!1,i),e.targets=i.newOrder):i.startOrder=i.newOrder=e.targets,i.startFilter=i.newFilter=n.activeFilter,i.startSort=i.newSort=n.activeSort,i.startContainerClassName=i.newContainerClassName=n.activeContainerClassName,"all"===i.newFilter.selector?i.newFilter.selector=e.config.selectors.target:"none"===i.newFilter.selector&&(i.newFilter.selector="");return i=e.callFilters("operationGetInitialState",i,[n]),e.lastOperation=i,i.newFilter&&e.filterOperation(i),e.buildState(i)},cacheDom:function(e,t){var n=this;n.callActions("beforeCacheDom",arguments),n.dom.document=t,n.dom.body=n.dom.document.querySelector("body"),n.dom.container=e,n.dom.parent=e,n.callActions("afterCacheDom",arguments)},indexTargets:function(){var e=this,i=null,o=null,r=null,s=-1;if(e.callActions("beforeIndexTargets",arguments),e.dom.targets=e.config.layout.allowNestedTargets?e.dom.container.querySelectorAll(e.config.selectors.target):n.children(e.dom.container,e.config.selectors.target,e.dom.document),e.dom.targets=n.arrayFromList(e.dom.targets),e.targets=[],(r=e.config.load.dataset)&&r.length!==e.dom.targets.length)throw new Error(t.messages.errorDatasetPrerenderedMismatch());if(e.dom.targets.length){for(s=0;o=e.dom.targets[s];s++)(i=new t.Target).init(o,e,r?r[s]:void 0),i.isInDom=!0,e.targets.push(i);e.dom.parent=e.dom.targets[0].parentElement===e.dom.container?e.dom.container:e.dom.targets[0].parentElement}e.origOrder=e.targets,e.callActions("afterIndexTargets",arguments)},initControls:function(){var e=this,n="",i=null,o=null,r=null,s=null,a=null,l=-1,c=-1;switch(e.callActions("beforeInitControls",arguments),e.config.controls.scope){case"local":r=e.dom.container;break;case"global":r=e.dom.document;break;default:throw new Error(t.messages.errorConfigInvalidControlsScope())}for(l=0;n=t.controlDefinitions[l];l++)if(e.config.controls.live||n.live){if(n.parent){if(!(s=e.dom[n.parent])||s.length<0)continue;"number"!=typeof s.length&&(s=[s])}else s=[r];for(c=0;o=s[c];c++)a=e.getControl(o,n.type,n.selector),e.controls.push(a)}else for(i=r.querySelectorAll(e.config.selectors.control+n.selector),c=0;o=i[c];c++)(a=e.getControl(o,n.type,""))&&e.controls.push(a);e.callActions("afterInitControls",arguments)},getControl:function(e,i,o){var r=this,s=null,a=-1;if(r.callActions("beforeGetControl",arguments),!o)for(a=0;s=t.controls[a];a++){if(s.el===e&&s.isBound(r))return r.callFilters("controlGetControl",null,arguments);if(s.el===e&&s.type===i&&s.selector===o)return s.addBinding(r),r.callFilters("controlGetControl",s,arguments)}return(s=new t.Control).init(e,i,o),s.classNames.base=n.getClassname(r.config.classNames,i),s.classNames.active=n.getClassname(r.config.classNames,i,r.config.classNames.modifierActive),s.classNames.disabled=n.getClassname(r.config.classNames,i,r.config.classNames.modifierDisabled),s.addBinding(r),r.callFilters("controlGetControl",s,arguments)},getToggleSelector:function(){var e=this,t="or"===e.config.controls.toggleLogic?", ":"",i="";return e.callActions("beforeGetToggleSelector",arguments),e.toggleArray=n.clean(e.toggleArray),""===(i=e.toggleArray.join(t))&&(i=e.config.controls.toggleDefault),e.callFilters("selectorGetToggleSelector",i,arguments)},buildToggleArray:function(e,t){var i=this,o="";if(i.callActions("beforeBuildToggleArray",arguments),e&&e.filter)o=e.filter.selector.replace(/\s/g,"");else{if(!t)return;o=t.activeFilter.selector.replace(/\s/g,"")}o!==i.config.selectors.target&&"all"!==o||(o=""),"or"===i.config.controls.toggleLogic?i.toggleArray=o.split(","):i.toggleArray=i.splitCompoundSelector(o),i.toggleArray=n.clean(i.toggleArray),i.callActions("afterBuildToggleArray",arguments)},splitCompoundSelector:function(e){var t=e.split(/([\.\[])/g),n=[],i="",o=-1;for(""===t[0]&&t.shift(),o=0;o<t.length;o++)o%2==0&&(i=""),i+=t[o],o%2!=0&&n.push(i);return n},updateControls:function(e){var i=this,o=null,r=new t.CommandMultimix,s=-1;for(i.callActions("beforeUpdateControls",arguments),e.filter?r.filter=e.filter.selector:r.filter=i.state.activeFilter.selector,e.sort?r.sort=i.buildSortString(e.sort):r.sort=i.buildSortString(i.state.activeSort),r.filter===i.config.selectors.target&&(r.filter="all"),""===r.filter&&(r.filter="none"),n.freeze(r),s=0;o=i.controls[s];s++)o.update(r,i.toggleArray);i.callActions("afterUpdateControls",arguments)},buildSortString:function(e){var t="";return t+=e.sortString,e.next&&(t+=" "+this.buildSortString(e.next)),t},insertTargets:function(e,i){var o=this,r=null,s=-1,a=null,l=null,c=null,u=-1;if(o.callActions("beforeInsertTargets",arguments),void 0===e.index&&(e.index=0),r=o.getNextSibling(e.index,e.sibling,e.position),a=o.dom.document.createDocumentFragment(),s=r?n.index(r,o.config.selectors.target):o.targets.length,e.collection){for(u=0;c=e.collection[u];u++){if(o.dom.targets.indexOf(c)>-1)throw new Error(t.messages.errorInsertPreexistingElement());c.style.display="none",a.appendChild(c),a.appendChild(o.dom.document.createTextNode(" ")),n.isElement(c,o.dom.document)&&c.matches(o.config.selectors.target)&&((l=new t.Target).init(c,o),l.isInDom=!0,o.targets.splice(s,0,l),s++)}o.dom.parent.insertBefore(a,r)}i.startOrder=o.origOrder=o.targets,o.callActions("afterInsertTargets",arguments)},getNextSibling:function(e,t,n){var i=this,o=null;return e=Math.max(e,0),t&&"before"===n?o=t:t&&"after"===n?o=t.nextElementSibling||null:i.targets.length>0&&void 0!==e?o=e<i.targets.length||!i.targets.length?i.targets[e].dom.el:i.targets[i.targets.length-1].dom.el.nextElementSibling:0===i.targets.length&&i.dom.parent.children.length>0&&(i.config.layout.siblingAfter?o=i.config.layout.siblingAfter:i.config.layout.siblingBefore?o=i.config.layout.siblingBefore.nextElementSibling:i.dom.parent.children[0]),i.callFilters("elementGetNextSibling",o,arguments)},filterOperation:function(e){var t=this,n=!1,i=-1,o="",r=null,s=-1;for(t.callActions("beforeFilterOperation",arguments),o=e.newFilter.action,s=0;r=e.newOrder[s];s++)n=e.newFilter.collection?e.newFilter.collection.indexOf(r.dom.el)>-1:""!==e.newFilter.selector&&r.dom.el.matches(e.newFilter.selector),t.evaluateHideShow(n,r,o,e);if(e.toRemove.length)for(s=0;r=e.show[s];s++)e.toRemove.indexOf(r)>-1&&(e.show.splice(s,1),(i=e.toShow.indexOf(r))>-1&&e.toShow.splice(i,1),e.toHide.push(r),e.hide.push(r),s--);e.matching=e.show.slice(),0===e.show.length&&""!==e.newFilter.selector&&0!==t.targets.length&&(e.hasFailed=!0),t.callActions("afterFilterOperation",arguments)},evaluateHideShow:function(e,t,n,i){var o=this,r=!1,s=Array.prototype.slice.call(arguments,1);r=o.callFilters("testResultEvaluateHideShow",e,s),o.callActions("beforeEvaluateHideShow",arguments),!0===r&&"show"===n||!1===r&&"hide"===n?(i.show.push(t),!t.isShown&&i.toShow.push(t)):(i.hide.push(t),t.isShown&&i.toHide.push(t)),o.callActions("afterEvaluateHideShow",arguments)},sortOperation:function(e){var i=this,o=[],r=null,s=null,a=-1;if(i.callActions("beforeSortOperation",arguments),e.startOrder=i.targets,e.newSort.collection){for(o=[],a=0;s=e.newSort.collection[a];a++){if(i.dom.targets.indexOf(s)<0)throw new Error(t.messages.errorSortNonExistentElement());(r=new t.Target).init(s,i),r.isInDom=!0,o.push(r)}e.newOrder=o}else"random"===e.newSort.order?e.newOrder=n.arrayShuffle(e.startOrder):""===e.newSort.attribute?(e.newOrder=i.origOrder.slice(),"desc"===e.newSort.order&&e.newOrder.reverse()):(e.newOrder=e.startOrder.slice(),e.newOrder.sort((function(t,n){return i.compare(t,n,e.newSort)})));n.isEqualArray(e.newOrder,e.startOrder)&&(e.willSort=!1),i.callActions("afterSortOperation",arguments)},compare:function(e,t,n){var i=this,o=n.order,r=i.getAttributeValue(e,n.attribute),s=i.getAttributeValue(t,n.attribute);return isNaN(1*r)||isNaN(1*s)?(r=r.toLowerCase(),s=s.toLowerCase()):(r*=1,s*=1),r<s?"asc"===o?-1:1:r>s?"asc"===o?1:-1:r===s&&n.next?i.compare(e,t,n.next):0},getAttributeValue:function(e,n){var i=this,o="";return null===(o=e.dom.el.getAttribute("data-"+n))&&i.config.debug.showWarnings&&console.warn(t.messages.warningInconsistentSortingAttributes({attribute:"data-"+n})),i.callFilters("valueGetAttributeValue",o||0,arguments)},printSort:function(t,i){var o=this,r=t?i.newOrder:i.startOrder,s=t?i.startOrder:i.newOrder,a=r.length?r[r.length-1].dom.el.nextElementSibling:null,l=e.document.createDocumentFragment(),c=null,u=null,d=null,p=-1;for(o.callActions("beforePrintSort",arguments),p=0;u=r[p];p++)"absolute"!==(d=u.dom.el).style.position&&(n.removeWhitespace(d.previousSibling),d.parentElement.removeChild(d));for((c=a?a.previousSibling:o.dom.parent.lastChild)&&"#text"===c.nodeName&&n.removeWhitespace(c),p=0;u=s[p];p++)d=u.dom.el,n.isElement(l.lastChild)&&l.appendChild(e.document.createTextNode(" ")),l.appendChild(d);o.dom.parent.firstChild&&o.dom.parent.firstChild!==a&&l.insertBefore(e.document.createTextNode(" "),l.childNodes[0]),a?(l.appendChild(e.document.createTextNode(" ")),o.dom.parent.insertBefore(l,a)):o.dom.parent.appendChild(l),o.callActions("afterPrintSort",arguments)},parseSortString:function(e,i){var o=this,r=e.split(" "),s=i,a=[],l=-1;for(l=0;l<r.length;l++){switch(a=r[l].split(":"),s.sortString=r[l],s.attribute=n.dashCase(a[0]),s.order=a[1]||"asc",s.attribute){case"default":s.attribute="";break;case"random":s.attribute="",s.order="random"}if(!s.attribute||"random"===s.order)break;l<r.length-1&&(s.next=new t.CommandSort,n.freeze(s),s=s.next)}return o.callFilters("commandsParseSort",i,arguments)},parseEffects:function(){var e=this,n="",i=e.config.animation.effectsIn||e.config.animation.effects,o=e.config.animation.effectsOut||e.config.animation.effects;for(n in e.callActions("beforeParseEffects",arguments),e.effectsIn=new t.StyleData,e.effectsOut=new t.StyleData,e.transformIn=[],e.transformOut=[],e.effectsIn.opacity=e.effectsOut.opacity=1,e.parseEffect("fade",i,e.effectsIn,e.transformIn),e.parseEffect("fade",o,e.effectsOut,e.transformOut,!0),t.transformDefaults)t.transformDefaults[n]instanceof t.TransformData&&(e.parseEffect(n,i,e.effectsIn,e.transformIn),e.parseEffect(n,o,e.effectsOut,e.transformOut,!0));e.parseEffect("stagger",i,e.effectsIn,e.transformIn),e.parseEffect("stagger",o,e.effectsOut,e.transformOut,!0),e.callActions("afterParseEffects",arguments)},parseEffect:function(e,n,i,o,r){var s=this,a=/\(([^)]+)\)/,l=-1,c="",u="",d=["%","px","em","rem","vh","vw","deg"],p="",f=-1;if(s.callActions("beforeParseEffect",arguments),"string"!=typeof n)throw new TypeError(t.messages.errorConfigInvalidAnimationEffects());if(n.indexOf(e)<0)"stagger"===e&&(s.staggerDuration=0);else{switch((l=n.indexOf(e+"("))>-1&&(c=n.substring(l),u=a.exec(c)[1]),e){case"fade":i.opacity=u?parseFloat(u):0;break;case"stagger":s.staggerDuration=u?parseFloat(u):100;break;default:if(r&&s.config.animation.reverseOut&&"scale"!==e?i[e].value=-1*(u?parseFloat(u):t.transformDefaults[e].value):i[e].value=u?parseFloat(u):t.transformDefaults[e].value,u){for(f=0;p=d[f];f++)if(u.indexOf(p)>-1){i[e].unit=p;break}}else i[e].unit=t.transformDefaults[e].unit;o.push(e+"("+i[e].value+i[e].unit+")")}s.callActions("afterParseEffect",arguments)}},buildState:function(e){var n=this,i=new t.State,o=null,r=-1;for(n.callActions("beforeBuildState",arguments),r=0;o=n.targets[r];r++)(!e.toRemove.length||e.toRemove.indexOf(o)<0)&&i.targets.push(o.dom.el);for(r=0;o=e.matching[r];r++)i.matching.push(o.dom.el);for(r=0;o=e.show[r];r++)i.show.push(o.dom.el);for(r=0;o=e.hide[r];r++)(!e.toRemove.length||e.toRemove.indexOf(o)<0)&&i.hide.push(o.dom.el);return i.id=n.id,i.container=n.dom.container,i.activeFilter=e.newFilter,i.activeSort=e.newSort,i.activeDataset=e.newDataset,i.activeContainerClassName=e.newContainerClassName,i.hasFailed=e.hasFailed,i.totalTargets=n.targets.length,i.totalShow=e.show.length,i.totalHide=e.hide.length,i.totalMatching=e.matching.length,i.triggerElement=e.triggerElement,n.callFilters("stateBuildState",i,arguments)},goMix:function(i,o){var r=this,s=null;return r.callActions("beforeGoMix",arguments),r.config.animation.duration&&r.config.animation.effects&&n.isVisible(r.dom.container)||(i=!1),o.toShow.length||o.toHide.length||o.willSort||o.willChangeLayout||(i=!1),o.startState.show.length||o.show.length||(i=!1),t.events.fire("mixStart",r.dom.container,{state:o.startState,futureState:o.newState,instance:r},r.dom.document),"function"==typeof r.config.callbacks.onMixStart&&r.config.callbacks.onMixStart.call(r.dom.container,o.startState,o.newState,r),n.removeClass(r.dom.container,n.getClassname(r.config.classNames,"container",r.config.classNames.modifierFailed)),s=r.userDeferred?r.userDeferred:r.userDeferred=n.defer(t.libraries),r.isBusy=!0,i&&t.features.has.transitions?(e.pageYOffset!==o.docState.scrollTop&&e.scrollTo(o.docState.scrollLeft,o.docState.scrollTop),r.config.animation.applyPerspective&&(r.dom.parent.style[t.features.perspectiveProp]=r.config.animation.perspectiveDistance,r.dom.parent.style[t.features.perspectiveOriginProp]=r.config.animation.perspectiveOrigin),r.config.animation.animateResizeContainer&&o.startHeight!==o.newHeight&&o.viewportDeltaY!==o.startHeight-o.newHeight&&(r.dom.parent.style.height=o.startHeight+"px"),r.config.animation.animateResizeContainer&&o.startWidth!==o.newWidth&&o.viewportDeltaX!==o.startWidth-o.newWidth&&(r.dom.parent.style.width=o.startWidth+"px"),o.startHeight===o.newHeight&&(r.dom.parent.style.height=o.startHeight+"px"),o.startWidth===o.newWidth&&(r.dom.parent.style.width=o.startWidth+"px"),o.startHeight===o.newHeight&&o.startWidth===o.newWidth&&(r.dom.parent.style.overflow="hidden"),requestAnimationFrame((function(){r.moveTargets(o)})),r.callFilters("promiseGoMix",s.promise,arguments)):(r.config.debug.fauxAsync?setTimeout((function(){r.cleanUp(o)}),r.config.animation.duration):r.cleanUp(o),r.callFilters("promiseGoMix",s.promise,arguments))},getStartMixData:function(n){var i=this,o=e.getComputedStyle(i.dom.parent),r=i.dom.parent.getBoundingClientRect(),s=null,a={},l=-1,c=o[t.features.boxSizingProp];for(i.incPadding="border-box"===c,i.callActions("beforeGetStartMixData",arguments),l=0;s=n.show[l];l++)a=s.getPosData(),n.showPosData[l]={startPosData:a};for(l=0;s=n.toHide[l];l++)a=s.getPosData(),n.toHidePosData[l]={startPosData:a};n.startX=r.left,n.startY=r.top,n.startHeight=i.incPadding?r.height:r.height-parseFloat(o.paddingTop)-parseFloat(o.paddingBottom)-parseFloat(o.borderTop)-parseFloat(o.borderBottom),n.startWidth=i.incPadding?r.width:r.width-parseFloat(o.paddingLeft)-parseFloat(o.paddingRight)-parseFloat(o.borderLeft)-parseFloat(o.borderRight),i.callActions("afterGetStartMixData",arguments)},setInter:function(e){var t=this,i=null,o=-1;for(t.callActions("beforeSetInter",arguments),t.config.animation.clampHeight&&(t.dom.parent.style.height=e.startHeight+"px",t.dom.parent.style.overflow="hidden"),t.config.animation.clampWidth&&(t.dom.parent.style.width=e.startWidth+"px",t.dom.parent.style.overflow="hidden"),o=0;i=e.toShow[o];o++)i.show();e.willChangeLayout&&(n.removeClass(t.dom.container,e.startContainerClassName),n.addClass(t.dom.container,e.newContainerClassName)),t.callActions("afterSetInter",arguments)},getInterMixData:function(e){var t=this,n=null,i=-1;for(t.callActions("beforeGetInterMixData",arguments),i=0;n=e.show[i];i++)e.showPosData[i].interPosData=n.getPosData();for(i=0;n=e.toHide[i];i++)e.toHidePosData[i].interPosData=n.getPosData();t.callActions("afterGetInterMixData",arguments)},setFinal:function(e){var t=this,n=null,i=-1;for(t.callActions("beforeSetFinal",arguments),e.willSort&&t.printSort(!1,e),i=0;n=e.toHide[i];i++)n.hide();t.callActions("afterSetFinal",arguments)},getFinalMixData:function(t){var i=this,o=null,r=null,s=null,a=-1;for(i.callActions("beforeGetFinalMixData",arguments),a=0;s=t.show[a];a++)t.showPosData[a].finalPosData=s.getPosData();for(a=0;s=t.toHide[a];a++)t.toHidePosData[a].finalPosData=s.getPosData();for((i.config.animation.clampHeight||i.config.animation.clampWidth)&&(i.dom.parent.style.height=i.dom.parent.style.width=i.dom.parent.style.overflow=""),i.incPadding||(o=e.getComputedStyle(i.dom.parent)),r=i.dom.parent.getBoundingClientRect(),t.newX=r.left,t.newY=r.top,t.newHeight=i.incPadding?r.height:r.height-parseFloat(o.paddingTop)-parseFloat(o.paddingBottom)-parseFloat(o.borderTop)-parseFloat(o.borderBottom),t.newWidth=i.incPadding?r.width:r.width-parseFloat(o.paddingLeft)-parseFloat(o.paddingRight)-parseFloat(o.borderLeft)-parseFloat(o.borderRight),t.viewportDeltaX=t.docState.viewportWidth-this.dom.document.documentElement.clientWidth,t.viewportDeltaY=t.docState.viewportHeight-this.dom.document.documentElement.clientHeight,t.willSort&&i.printSort(!0,t),a=0;s=t.toShow[a];a++)s.hide();for(a=0;s=t.toHide[a];a++)s.show();t.willChangeLayout&&(n.removeClass(i.dom.container,t.newContainerClassName),n.addClass(i.dom.container,i.config.layout.containerClassName)),i.callActions("afterGetFinalMixData",arguments)},getTweenData:function(e){var n=this,i=null,o=null,r=Object.getOwnPropertyNames(n.effectsIn),s="",a=null,l=-1,c=-1,u=-1,d=-1;for(n.callActions("beforeGetTweenData",arguments),u=0;i=e.show[u];u++)for((o=e.showPosData[u]).posIn=new t.StyleData,o.posOut=new t.StyleData,o.tweenData=new t.StyleData,i.isShown?(o.posIn.x=o.startPosData.x-o.interPosData.x,o.posIn.y=o.startPosData.y-o.interPosData.y):o.posIn.x=o.posIn.y=0,o.posOut.x=o.finalPosData.x-o.interPosData.x,o.posOut.y=o.finalPosData.y-o.interPosData.y,o.posIn.opacity=i.isShown?1:n.effectsIn.opacity,o.posOut.opacity=1,o.tweenData.opacity=o.posOut.opacity-o.posIn.opacity,i.isShown||n.config.animation.nudge||(o.posIn.x=o.posOut.x,o.posIn.y=o.posOut.y),o.tweenData.x=o.posOut.x-o.posIn.x,o.tweenData.y=o.posOut.y-o.posIn.y,n.config.animation.animateResizeTargets&&(o.posIn.width=o.startPosData.width,o.posIn.height=o.startPosData.height,l=(o.startPosData.width||o.finalPosData.width)-o.interPosData.width,o.posIn.marginRight=o.startPosData.marginRight-l,c=(o.startPosData.height||o.finalPosData.height)-o.interPosData.height,o.posIn.marginBottom=o.startPosData.marginBottom-c,o.posOut.width=o.finalPosData.width,o.posOut.height=o.finalPosData.height,l=(o.finalPosData.width||o.startPosData.width)-o.interPosData.width,o.posOut.marginRight=o.finalPosData.marginRight-l,c=(o.finalPosData.height||o.startPosData.height)-o.interPosData.height,o.posOut.marginBottom=o.finalPosData.marginBottom-c,o.tweenData.width=o.posOut.width-o.posIn.width,o.tweenData.height=o.posOut.height-o.posIn.height,o.tweenData.marginRight=o.posOut.marginRight-o.posIn.marginRight,o.tweenData.marginBottom=o.posOut.marginBottom-o.posIn.marginBottom),d=0;s=r[d];d++)(a=n.effectsIn[s])instanceof t.TransformData&&a.value&&(o.posIn[s].value=a.value,o.posOut[s].value=0,o.tweenData[s].value=o.posOut[s].value-o.posIn[s].value,o.posIn[s].unit=o.posOut[s].unit=o.tweenData[s].unit=a.unit);for(u=0;i=e.toHide[u];u++)for((o=e.toHidePosData[u]).posIn=new t.StyleData,o.posOut=new t.StyleData,o.tweenData=new t.StyleData,o.posIn.x=i.isShown?o.startPosData.x-o.interPosData.x:0,o.posIn.y=i.isShown?o.startPosData.y-o.interPosData.y:0,o.posOut.x=n.config.animation.nudge?0:o.posIn.x,o.posOut.y=n.config.animation.nudge?0:o.posIn.y,o.tweenData.x=o.posOut.x-o.posIn.x,o.tweenData.y=o.posOut.y-o.posIn.y,n.config.animation.animateResizeTargets&&(o.posIn.width=o.startPosData.width,o.posIn.height=o.startPosData.height,l=o.startPosData.width-o.interPosData.width,o.posIn.marginRight=o.startPosData.marginRight-l,c=o.startPosData.height-o.interPosData.height,o.posIn.marginBottom=o.startPosData.marginBottom-c),o.posIn.opacity=1,o.posOut.opacity=n.effectsOut.opacity,o.tweenData.opacity=o.posOut.opacity-o.posIn.opacity,d=0;s=r[d];d++)(a=n.effectsOut[s])instanceof t.TransformData&&a.value&&(o.posIn[s].value=0,o.posOut[s].value=a.value,o.tweenData[s].value=o.posOut[s].value-o.posIn[s].value,o.posIn[s].unit=o.posOut[s].unit=o.tweenData[s].unit=a.unit);n.callActions("afterGetTweenData",arguments)},moveTargets:function(e){var i=this,o=null,r=null,s=null,a="",l=!1,c=-1,u=-1,d=i.checkProgress.bind(i);for(i.callActions("beforeMoveTargets",arguments),u=0;o=e.show[u];u++)r=new t.IMoveData,s=e.showPosData[u],a=o.isShown?"none":"show",(l=i.willTransition(a,e.hasEffect,s.posIn,s.posOut))&&c++,o.show(),r.posIn=s.posIn,r.posOut=s.posOut,r.statusChange=a,r.staggerIndex=c,r.operation=e,r.callback=l?d:null,o.move(r);for(u=0;o=e.toHide[u];u++)s=e.toHidePosData[u],r=new t.IMoveData,a="hide",l=i.willTransition(a,s.posIn,s.posOut),r.posIn=s.posIn,r.posOut=s.posOut,r.statusChange=a,r.staggerIndex=u,r.operation=e,r.callback=l?d:null,o.move(r);i.config.animation.animateResizeContainer&&(i.dom.parent.style[t.features.transitionProp]="height "+i.config.animation.duration+"ms ease, width "+i.config.animation.duration+"ms ease ",requestAnimationFrame((function(){e.startHeight!==e.newHeight&&e.viewportDeltaY!==e.startHeight-e.newHeight&&(i.dom.parent.style.height=e.newHeight+"px"),e.startWidth!==e.newWidth&&e.viewportDeltaX!==e.startWidth-e.newWidth&&(i.dom.parent.style.width=e.newWidth+"px")}))),e.willChangeLayout&&(n.removeClass(i.dom.container,i.config.layout.ContainerClassName),n.addClass(i.dom.container,e.newContainerClassName)),i.callActions("afterMoveTargets",arguments)},hasEffect:function(){var e=this,t=["scale","translateX","translateY","translateZ","rotateX","rotateY","rotateZ"],n="",i=null,o=!1,r=-1;if(1!==e.effectsIn.opacity)return e.callFilters("resultHasEffect",!0,arguments);for(r=0;n=t[r];r++)if(0!==("undefined"!==(i=e.effectsIn[n]).value?i.value:i)){o=!0;break}return e.callFilters("resultHasEffect",o,arguments)},willTransition:function(e,t,i,o){var r=this,s=!1;return s=!(!n.isVisible(r.dom.container)||!("none"!==e&&t||i.x!==o.x||i.y!==o.y)&&(!r.config.animation.animateResizeTargets||i.width===o.width&&i.height===o.height&&i.marginRight===o.marginRight&&i.marginTop===o.marginTop)),r.callFilters("resultWillTransition",s,arguments)},checkProgress:function(e){var t=this;t.targetsDone++,t.targetsBound===t.targetsDone&&t.cleanUp(e)},cleanUp:function(e){var i=this,o=null,r=null,s=null,a=null,l=-1;for(i.callActions("beforeCleanUp",arguments),i.targetsMoved=i.targetsImmovable=i.targetsBound=i.targetsDone=0,l=0;o=e.show[l];l++)o.cleanUp(),o.show();for(l=0;o=e.toHide[l];l++)o.cleanUp(),o.hide();if(e.willSort&&i.printSort(!1,e),i.dom.parent.style[t.features.transitionProp]=i.dom.parent.style.height=i.dom.parent.style.width=i.dom.parent.style.overflow=i.dom.parent.style[t.features.perspectiveProp]=i.dom.parent.style[t.features.perspectiveOriginProp]="",e.willChangeLayout&&(n.removeClass(i.dom.container,e.startContainerClassName),n.addClass(i.dom.container,e.newContainerClassName)),e.toRemove.length){for(l=0;o=i.targets[l];l++)e.toRemove.indexOf(o)>-1&&((r=o.dom.el.previousSibling)&&"#text"===r.nodeName&&(s=o.dom.el.nextSibling)&&"#text"===s.nodeName&&n.removeWhitespace(r),e.willSort||i.dom.parent.removeChild(o.dom.el),i.targets.splice(l,1),o.isInDom=!1,l--);i.origOrder=i.targets}e.willSort&&(i.targets=e.newOrder),i.state=e.newState,i.lastOperation=e,i.dom.targets=i.state.targets,t.events.fire("mixEnd",i.dom.container,{state:i.state,instance:i},i.dom.document),"function"==typeof i.config.callbacks.onMixEnd&&i.config.callbacks.onMixEnd.call(i.dom.container,i.state,i),e.hasFailed&&(t.events.fire("mixFail",i.dom.container,{state:i.state,instance:i},i.dom.document),"function"==typeof i.config.callbacks.onMixFail&&i.config.callbacks.onMixFail.call(i.dom.container,i.state,i),n.addClass(i.dom.container,n.getClassname(i.config.classNames,"container",i.config.classNames.modifierFailed))),"function"==typeof i.userCallback&&i.userCallback.call(i.dom.container,i.state,i),"function"==typeof i.userDeferred.resolve&&i.userDeferred.resolve(i.state),i.userCallback=null,i.userDeferred=null,i.lastClicked=null,i.isToggling=!1,i.isBusy=!1,i.queue.length&&(i.callActions("beforeReadQueueCleanUp",arguments),a=i.queue.shift(),i.userDeferred=a.deferred,i.isToggling=a.isToggling,i.lastClicked=a.triggerElement,a.instruction.command instanceof t.CommandMultimix?i.multimix.apply(i,a.args):i.dataset.apply(i,a.args)),i.callActions("afterCleanUp",arguments)},parseMultimixArgs:function(e){var i=this,o=new t.UserInstruction,r=null,s=-1;for(o.animate=i.config.animation.enable,o.command=new t.CommandMultimix,s=0;s<e.length;s++)null!==(r=e[s])&&("object"==typeof r?n.extend(o.command,r):"boolean"==typeof r?o.animate=r:"function"==typeof r&&(o.callback=r));return!o.command.insert||o.command.insert instanceof t.CommandInsert||(o.command.insert=i.parseInsertArgs([o.command.insert]).command),!o.command.remove||o.command.remove instanceof t.CommandRemove||(o.command.remove=i.parseRemoveArgs([o.command.remove]).command),!o.command.filter||o.command.filter instanceof t.CommandFilter||(o.command.filter=i.parseFilterArgs([o.command.filter]).command),!o.command.sort||o.command.sort instanceof t.CommandSort||(o.command.sort=i.parseSortArgs([o.command.sort]).command),!o.command.changeLayout||o.command.changeLayout instanceof t.CommandChangeLayout||(o.command.changeLayout=i.parseChangeLayoutArgs([o.command.changeLayout]).command),o=i.callFilters("instructionParseMultimixArgs",o,arguments),n.freeze(o),o},parseFilterArgs:function(e){var i=this,o=new t.UserInstruction,r=null,s=-1;for(o.animate=i.config.animation.enable,o.command=new t.CommandFilter,s=0;s<e.length;s++)"string"==typeof(r=e[s])?o.command.selector=r:null===r?o.command.collection=[]:"object"==typeof r&&n.isElement(r,i.dom.document)?o.command.collection=[r]:"object"==typeof r&&void 0!==r.length?o.command.collection=n.arrayFromList(r):"object"==typeof r?n.extend(o.command,r):"boolean"==typeof r?o.animate=r:"function"==typeof r&&(o.callback=r);if(o.command.selector&&o.command.collection)throw new Error(t.messages.errorFilterInvalidArguments());return o=i.callFilters("instructionParseFilterArgs",o,arguments),n.freeze(o),o},parseSortArgs:function(e){var i=this,o=new t.UserInstruction,r=null,s="",a=-1;for(o.animate=i.config.animation.enable,o.command=new t.CommandSort,a=0;a<e.length;a++)if(null!==(r=e[a]))switch(typeof r){case"string":s=r;break;case"object":r.length&&(o.command.collection=n.arrayFromList(r));break;case"boolean":o.animate=r;break;case"function":o.callback=r}return s&&(o.command=i.parseSortString(s,o.command)),o=i.callFilters("instructionParseSortArgs",o,arguments),n.freeze(o),o},parseInsertArgs:function(e){var i=this,o=new t.UserInstruction,r=null,s=-1;for(o.animate=i.config.animation.enable,o.command=new t.CommandInsert,s=0;s<e.length;s++)null!==(r=e[s])&&("number"==typeof r?o.command.index=r:"string"==typeof r&&["before","after"].indexOf(r)>-1?o.command.position=r:"string"==typeof r?o.command.collection=n.arrayFromList(n.createElement(r).childNodes):"object"==typeof r&&n.isElement(r,i.dom.document)?o.command.collection.length?o.command.sibling=r:o.command.collection=[r]:"object"==typeof r&&r.length?o.command.collection.length?o.command.sibling=r[0]:o.command.collection=r:"object"==typeof r&&r.childNodes&&r.childNodes.length?o.command.collection.length?o.command.sibling=r.childNodes[0]:o.command.collection=n.arrayFromList(r.childNodes):"object"==typeof r?n.extend(o.command,r):"boolean"==typeof r?o.animate=r:"function"==typeof r&&(o.callback=r));if(o.command.index&&o.command.sibling)throw new Error(t.messages.errorInsertInvalidArguments());return!o.command.collection.length&&i.config.debug.showWarnings&&console.warn(t.messages.warningInsertNoElements()),o=i.callFilters("instructionParseInsertArgs",o,arguments),n.freeze(o),o},parseRemoveArgs:function(e){var i=this,o=new t.UserInstruction,r=null,s=null,a=-1;for(o.animate=i.config.animation.enable,o.command=new t.CommandRemove,a=0;a<e.length;a++)if(null!==(s=e[a]))switch(typeof s){case"number":i.targets[s]&&(o.command.targets[0]=i.targets[s]);break;case"string":o.command.collection=n.arrayFromList(i.dom.parent.querySelectorAll(s));break;case"object":s&&s.length?o.command.collection=s:n.isElement(s,i.dom.document)?o.command.collection=[s]:n.extend(o.command,s);break;case"boolean":o.animate=s;break;case"function":o.callback=s}if(o.command.collection.length)for(a=0;r=i.targets[a];a++)o.command.collection.indexOf(r.dom.el)>-1&&o.command.targets.push(r);return!o.command.targets.length&&i.config.debug.showWarnings&&console.warn(t.messages.warningRemoveNoElements()),n.freeze(o),o},parseDatasetArgs:function(e){var i=new t.UserInstruction,o=null,r=-1;for(i.animate=this.config.animation.enable,i.command=new t.CommandDataset,r=0;r<e.length;r++)if(null!==(o=e[r]))switch(typeof o){case"object":Array.isArray(o)||"number"==typeof o.length?i.command.dataset=o:n.extend(i.command,o);break;case"boolean":i.animate=o;break;case"function":i.callback=o}return n.freeze(i),i},parseChangeLayoutArgs:function(e){var i=new t.UserInstruction,o=null,r=-1;for(i.animate=this.config.animation.enable,i.command=new t.CommandChangeLayout,r=0;r<e.length;r++)if(null!==(o=e[r]))switch(typeof o){case"string":i.command.containerClassName=o;break;case"object":n.extend(i.command,o);break;case"boolean":i.animate=o;break;case"function":i.callback=o}return n.freeze(i),i},queueMix:function(e){var i=this,o=null,r="";return i.callActions("beforeQueueMix",arguments),o=n.defer(t.libraries),i.config.animation.queue&&i.queue.length<i.config.animation.queueLimit?(e.deferred=o,i.queue.push(e),i.config.controls.enable&&(i.isToggling?(i.buildToggleArray(e.instruction.command),r=i.getToggleSelector(),i.updateControls({filter:{selector:r}})):i.updateControls(e.instruction.command))):(i.config.debug.showWarnings&&console.warn(t.messages.warningMultimixInstanceQueueFull()),o.resolve(i.state),t.events.fire("mixBusy",i.dom.container,{state:i.state,instance:i},i.dom.document),"function"==typeof i.config.callbacks.onMixBusy&&i.config.callbacks.onMixBusy.call(i.dom.container,i.state,i)),i.callFilters("promiseQueueMix",o.promise,arguments)},getDataOperation:function(e){var i=this,o=new t.Operation,r=[];if(o=i.callFilters("operationUnmappedGetDataOperation",o,arguments),i.dom.targets.length&&!(r=i.state.activeDataset||[]).length)throw new Error(t.messages.errorDatasetNotSet());return o.id=n.randomHex(),o.startState=i.state,o.startDataset=r,o.newDataset=e.slice(),i.diffDatasets(o),o.startOrder=i.targets,o.newOrder=o.show,i.config.animation.enable&&(i.getStartMixData(o),i.setInter(o),o.docState=n.getDocumentState(i.dom.document),i.getInterMixData(o),i.setFinal(o),i.getFinalMixData(o),i.parseEffects(),o.hasEffect=i.hasEffect(),i.getTweenData(o)),i.targets=o.show.slice(),o.newState=i.buildState(o),Array.prototype.push.apply(i.targets,o.toRemove),i.callFilters("operationMappedGetDataOperation",o,arguments)},diffDatasets:function(e){var i=this,o=[],r=[],s=[],a=null,l=null,c=null,u=null,d=null,p={},f="",h=-1;for(i.callActions("beforeDiffDatasets",arguments),h=0;a=e.newDataset[h];h++){if(void 0===(f=a[i.config.data.uidKey])||f.toString().length<1)throw new TypeError(t.messages.errorDatasetInvalidUidKey({uidKey:i.config.data.uidKey}));if(p[f])throw new Error(t.messages.errorDatasetDuplicateUid({uid:f}));p[f]=!0,(l=i.cache[f])instanceof t.Target?(i.config.data.dirtyCheck&&!n.deepEquals(a,l.data)&&(c=l.render(a),l.data=a,c!==l.dom.el&&(l.isInDom&&(l.unbindEvents(),i.dom.parent.replaceChild(c,l.dom.el)),l.isShown||(c.style.display="none"),l.dom.el=c,l.isInDom&&l.bindEvents())),c=l.dom.el):((l=new t.Target).init(null,i,a),l.hide()),l.isInDom?(d=l.dom.el.nextElementSibling,r.push(f),u&&(u.lastElementChild&&u.appendChild(i.dom.document.createTextNode(" ")),i.insertDatasetFrag(u,l.dom.el,s),u=null)):(u||(u=i.dom.document.createDocumentFragment()),u.lastElementChild&&u.appendChild(i.dom.document.createTextNode(" ")),u.appendChild(l.dom.el),l.isInDom=!0,l.unbindEvents(),l.bindEvents(),l.hide(),e.toShow.push(l),s.push(l)),e.show.push(l)}for(u&&((d=d||i.config.layout.siblingAfter)&&u.appendChild(i.dom.document.createTextNode(" ")),i.insertDatasetFrag(u,d,s)),h=0;a=e.startDataset[h];h++)f=a[i.config.data.uidKey],l=i.cache[f],e.show.indexOf(l)<0?(e.hide.push(l),e.toHide.push(l),e.toRemove.push(l)):o.push(f);n.isEqualArray(o,r)||(e.willSort=!0),i.callActions("afterDiffDatasets",arguments)},insertDatasetFrag:function(e,t,i){var o=this,r=t?n.arrayFromList(o.dom.parent.children).indexOf(t):o.targets.length;for(o.dom.parent.insertBefore(e,t);i.length;)o.targets.splice(r,0,i.shift()),r++},willSort:function(e,t){var n=this,i=!1;return i=!!(n.config.behavior.liveSort||"random"===e.order||e.attribute!==t.attribute||e.order!==t.order||e.collection!==t.collection||null===e.next&&t.next||e.next&&null===t.next)||!(!e.next||!t.next)&&n.willSort(e.next,t.next),n.callFilters("resultWillSort",i,arguments)},show:function(){return this.filter("all")},hide:function(){return this.filter("none")},isMixing:function(){return this.isBusy},filter:function(){var e=this,t=e.parseFilterArgs(arguments);return e.multimix({filter:t.command},t.animate,t.callback)},toggleOn:function(){var e=this,t=e.parseFilterArgs(arguments),n=t.command.selector,i="";return e.isToggling=!0,e.toggleArray.indexOf(n)<0&&e.toggleArray.push(n),i=e.getToggleSelector(),e.multimix({filter:i},t.animate,t.callback)},toggleOff:function(){var e=this,t=e.parseFilterArgs(arguments),n=t.command.selector,i=e.toggleArray.indexOf(n),o="";return e.isToggling=!0,i>-1&&e.toggleArray.splice(i,1),o=e.getToggleSelector(),e.multimix({filter:o},t.animate,t.callback)},sort:function(){var e=this,t=e.parseSortArgs(arguments);return e.multimix({sort:t.command},t.animate,t.callback)},changeLayout:function(){var e=this,t=e.parseChangeLayoutArgs(arguments);return e.multimix({changeLayout:t.command},t.animate,t.callback)},dataset:function(){var e=this,n=e.parseDatasetArgs(arguments),i=null,o=null,r=!1;return e.callActions("beforeDataset",arguments),e.isBusy?((o=new t.QueueItem).args=arguments,o.instruction=n,e.queueMix(o)):(n.callback&&(e.userCallback=n.callback),r=n.animate^e.config.animation.enable?n.animate:e.config.animation.enable,i=e.getDataOperation(n.command.dataset),e.goMix(r,i))},multimix:function(){var e=this,n=null,i=!1,o=null,r=e.parseMultimixArgs(arguments);return e.callActions("beforeMultimix",arguments),e.isBusy?((o=new t.QueueItem).args=arguments,o.instruction=r,o.triggerElement=e.lastClicked,o.isToggling=e.isToggling,e.queueMix(o)):(n=e.getOperation(r.command),e.config.controls.enable&&(r.command.filter&&!e.isToggling&&(e.toggleArray.length=0,e.buildToggleArray(n.command)),e.queue.length<1&&e.updateControls(n.command)),r.callback&&(e.userCallback=r.callback),i=r.animate^e.config.animation.enable?r.animate:e.config.animation.enable,e.callFilters("operationMultimix",n,arguments),e.goMix(i,n))},getOperation:function(e){var i=this,o=e.sort,r=e.filter,s=e.changeLayout,a=e.remove,l=e.insert,c=new t.Operation;return(c=i.callFilters("operationUnmappedGetOperation",c,arguments)).id=n.randomHex(),c.command=e,c.startState=i.state,c.triggerElement=i.lastClicked,i.isBusy?(i.config.debug.showWarnings&&console.warn(t.messages.warningGetOperationInstanceBusy()),null):(l&&i.insertTargets(l,c),a&&(c.toRemove=a.targets),c.startSort=c.newSort=c.startState.activeSort,c.startOrder=c.newOrder=i.targets,o&&(c.startSort=c.startState.activeSort,c.newSort=o,c.willSort=i.willSort(o,c.startState.activeSort),c.willSort&&i.sortOperation(c)),c.startFilter=c.startState.activeFilter,c.newFilter=r||n.extend(new t.CommandFilter,c.startFilter),"all"===c.newFilter.selector?c.newFilter.selector=i.config.selectors.target:"none"===c.newFilter.selector&&(c.newFilter.selector=""),i.filterOperation(c),c.startContainerClassName=c.startState.activeContainerClassName,s?(c.newContainerClassName=s.containerClassName,c.newContainerClassName!==c.startContainerClassName&&(c.willChangeLayout=!0)):c.newContainerClassName=c.startContainerClassName,i.config.animation.enable&&(i.getStartMixData(c),i.setInter(c),c.docState=n.getDocumentState(i.dom.document),i.getInterMixData(c),i.setFinal(c),i.getFinalMixData(c),i.parseEffects(),c.hasEffect=i.hasEffect(),i.getTweenData(c)),c.willSort&&(i.targets=c.newOrder),c.newState=i.buildState(c),i.callFilters("operationMappedGetOperation",c,arguments))},tween:function(e,t){var n=null,i=null,o=-1,r=-1;for(t=Math.min(t,1),t=Math.max(t,0),r=0;n=e.show[r];r++)i=e.showPosData[r],n.applyTween(i,t);for(r=0;n=e.hide[r];r++)n.isShown&&n.hide(),(o=e.toHide.indexOf(n))>-1&&(i=e.toHidePosData[o],n.isShown||n.show(),n.applyTween(i,t))},insert:function(){var e=this,t=e.parseInsertArgs(arguments);return e.multimix({insert:t.command},t.animate,t.callback)},insertBefore:function(){var e=this,t=e.parseInsertArgs(arguments);return e.insert(t.command.collection,"before",t.command.sibling,t.animate,t.callback)},insertAfter:function(){var e=this,t=e.parseInsertArgs(arguments);return e.insert(t.command.collection,"after",t.command.sibling,t.animate,t.callback)},prepend:function(){var e=this,t=e.parseInsertArgs(arguments);return e.insert(0,t.command.collection,t.animate,t.callback)},append:function(){var e=this,t=e.parseInsertArgs(arguments);return e.insert(e.state.totalTargets,t.command.collection,t.animate,t.callback)},remove:function(){var e=this,t=e.parseRemoveArgs(arguments);return e.multimix({remove:t.command},t.animate,t.callback)},getConfig:function(e){var t=this,i=null;return i=e?n.getProperty(t.config,e):t.config,t.callFilters("valueGetConfig",i,arguments)},configure:function(e){var t=this;t.callActions("beforeConfigure",arguments),n.extend(t.config,e,!0,!0),t.callActions("afterConfigure",arguments)},getState:function(){var e=this,i=null;return i=new t.State,n.extend(i,e.state),n.freeze(i),e.callFilters("stateGetState",i,arguments)},forceRefresh:function(){this.indexTargets()},forceRender:function(){var e=this,t=null,n=null,i="";for(i in e.cache)(n=(t=e.cache[i]).render(t.data))!==t.dom.el&&(t.isInDom&&(t.unbindEvents(),e.dom.parent.replaceChild(n,t.dom.el)),t.isShown||(n.style.display="none"),t.dom.el=n,t.isInDom&&t.bindEvents());e.state=e.buildState(e.lastOperation)},destroy:function(e){var n=this,i=null,o=null,r=0;for(n.callActions("beforeDestroy",arguments),r=0;i=n.controls[r];r++)i.removeBinding(n);for(r=0;o=n.targets[r];r++)e&&o.show(),o.unbindEvents();n.dom.container.id.match(/^MixItUp/)&&n.dom.container.removeAttribute("id"),delete t.instances[n.id],n.callActions("afterDestroy",arguments)}}),t.IMoveData=function(){t.Base.call(this),this.callActions("beforeConstruct"),this.posIn=null,this.posOut=null,this.operation=null,this.callback=null,this.statusChange="",this.duration=-1,this.staggerIndex=-1,this.callActions("afterConstruct"),n.seal(this)},t.BaseStatic.call(t.IMoveData),t.IMoveData.prototype=Object.create(t.Base.prototype),t.IMoveData.prototype.constructor=t.IMoveData,t.TargetDom=function(){t.Base.call(this),this.callActions("beforeConstruct"),this.el=null,this.callActions("afterConstruct"),n.seal(this)},t.BaseStatic.call(t.TargetDom),t.TargetDom.prototype=Object.create(t.Base.prototype),t.TargetDom.prototype.constructor=t.TargetDom,t.Target=function(){t.Base.call(this),this.callActions("beforeConstruct"),this.id="",this.sortString="",this.mixer=null,this.callback=null,this.isShown=!1,this.isBound=!1,this.isExcluded=!1,this.isInDom=!1,this.handler=null,this.operation=null,this.data=null,this.dom=new t.TargetDom,this.callActions("afterConstruct"),n.seal(this)},t.BaseStatic.call(t.Target),t.Target.prototype=Object.create(t.Base.prototype),n.extend(t.Target.prototype,{constructor:t.Target,init:function(e,n,i){var o=this,r="";if(o.callActions("beforeInit",arguments),o.mixer=n,e||(e=o.render(i)),o.cacheDom(e),o.bindEvents(),"none"!==o.dom.el.style.display&&(o.isShown=!0),i&&n.config.data.uidKey){if(void 0===(r=i[n.config.data.uidKey])||r.toString().length<1)throw new TypeError(t.messages.errorDatasetInvalidUidKey({uidKey:n.config.data.uidKey}));o.id=r,o.data=i,n.cache[r]=o}o.callActions("afterInit",arguments)},render:function(e){var i=this,o=null,r=null,s=null,a="";if(i.callActions("beforeRender",arguments),"function"!=typeof(o=i.callFilters("renderRender",i.mixer.config.render.target,arguments)))throw new TypeError(t.messages.errorDatasetRendererNotSet());return(a=o(e))&&"object"==typeof a&&n.isElement(a)?r=a:"string"==typeof a&&((s=document.createElement("div")).innerHTML=a,r=s.firstElementChild),i.callFilters("elRender",r,arguments)},cacheDom:function(e){var t=this;t.callActions("beforeCacheDom",arguments),t.dom.el=e,t.callActions("afterCacheDom",arguments)},getSortString:function(e){var t=this,n=t.dom.el.getAttribute("data-"+e)||"";t.callActions("beforeGetSortString",arguments),n=isNaN(1*n)?n.toLowerCase():1*n,t.sortString=n,t.callActions("afterGetSortString",arguments)},show:function(){var e=this;e.callActions("beforeShow",arguments),e.isShown||(e.dom.el.style.display="",e.isShown=!0),e.callActions("afterShow",arguments)},hide:function(){var e=this;e.callActions("beforeHide",arguments),e.isShown&&(e.dom.el.style.display="none",e.isShown=!1),e.callActions("afterHide",arguments)},move:function(e){var t=this;t.callActions("beforeMove",arguments),t.isExcluded||t.mixer.targetsMoved++,t.applyStylesIn(e),requestAnimationFrame((function(){t.applyStylesOut(e)})),t.callActions("afterMove",arguments)},applyTween:function(e,n){var i=this,o="",r=null,s=e.posIn,a=[],l=new t.StyleData,c=-1;for(i.callActions("beforeApplyTween",arguments),l.x=s.x,l.y=s.y,0===n?i.hide():i.isShown||i.show(),c=0;o=t.features.TWEENABLE[c];c++)if(r=e.tweenData[o],"x"===o){if(!r)continue;l.x=s.x+r*n}else if("y"===o){if(!r)continue;l.y=s.y+r*n}else if(r instanceof t.TransformData){if(!r.value)continue;l[o].value=s[o].value+r.value*n,l[o].unit=r.unit,a.push(o+"("+l[o].value+r.unit+")")}else{if(!r)continue;l[o]=s[o]+r*n,i.dom.el.style[o]=l[o]}(l.x||l.y)&&a.unshift("translate("+l.x+"px, "+l.y+"px)"),a.length&&(i.dom.el.style[t.features.transformProp]=a.join(" ")),i.callActions("afterApplyTween",arguments)},applyStylesIn:function(e){var n=this,i=e.posIn,o=1!==n.mixer.effectsIn.opacity,r=[];n.callActions("beforeApplyStylesIn",arguments),r.push("translate("+i.x+"px, "+i.y+"px)"),n.mixer.config.animation.animateResizeTargets&&("show"!==e.statusChange&&(n.dom.el.style.width=i.width+"px",n.dom.el.style.height=i.height+"px"),n.dom.el.style.marginRight=i.marginRight+"px",n.dom.el.style.marginBottom=i.marginBottom+"px"),o&&(n.dom.el.style.opacity=i.opacity),"show"===e.statusChange&&(r=r.concat(n.mixer.transformIn)),n.dom.el.style[t.features.transformProp]=r.join(" "),n.callActions("afterApplyStylesIn",arguments)},applyStylesOut:function(e){var n=this,i=[],o=[],r=n.mixer.config.animation.animateResizeTargets,s=void 0!==n.mixer.effectsIn.opacity;if(n.callActions("beforeApplyStylesOut",arguments),i.push(n.writeTransitionRule(t.features.transformRule,e.staggerIndex)),"none"!==e.statusChange&&i.push(n.writeTransitionRule("opacity",e.staggerIndex,e.duration)),r&&(i.push(n.writeTransitionRule("width",e.staggerIndex,e.duration)),i.push(n.writeTransitionRule("height",e.staggerIndex,e.duration)),i.push(n.writeTransitionRule("margin",e.staggerIndex,e.duration))),!e.callback)return n.mixer.targetsImmovable++,void(n.mixer.targetsMoved===n.mixer.targetsImmovable&&n.mixer.cleanUp(e.operation));switch(n.operation=e.operation,n.callback=e.callback,!n.isExcluded&&n.mixer.targetsBound++,n.isBound=!0,n.applyTransition(i),r&&e.posOut.width>0&&e.posOut.height>0&&(n.dom.el.style.width=e.posOut.width+"px",n.dom.el.style.height=e.posOut.height+"px",n.dom.el.style.marginRight=e.posOut.marginRight+"px",n.dom.el.style.marginBottom=e.posOut.marginBottom+"px"),n.mixer.config.animation.nudge||"hide"!==e.statusChange||o.push("translate("+e.posOut.x+"px, "+e.posOut.y+"px)"),e.statusChange){case"hide":s&&(n.dom.el.style.opacity=n.mixer.effectsOut.opacity),o=o.concat(n.mixer.transformOut);break;case"show":s&&(n.dom.el.style.opacity=1)}(n.mixer.config.animation.nudge||!n.mixer.config.animation.nudge&&"hide"!==e.statusChange)&&o.push("translate("+e.posOut.x+"px, "+e.posOut.y+"px)"),n.dom.el.style[t.features.transformProp]=o.join(" "),n.callActions("afterApplyStylesOut",arguments)},writeTransitionRule:function(e,t,n){var i=this,o=i.getDelay(t),r="";return r=e+" "+(n>0?n:i.mixer.config.animation.duration)+"ms "+o+"ms "+("opacity"===e?"linear":i.mixer.config.animation.easing),i.callFilters("ruleWriteTransitionRule",r,arguments)},getDelay:function(e){var t=this,n=-1;return"function"==typeof t.mixer.config.animation.staggerSequence&&(e=t.mixer.config.animation.staggerSequence.call(t,e,t.state)),n=t.mixer.staggerDuration?e*t.mixer.staggerDuration:0,t.callFilters("delayGetDelay",n,arguments)},applyTransition:function(e){var n=this,i=e.join(", ");n.callActions("beforeApplyTransition",arguments),n.dom.el.style[t.features.transitionProp]=i,n.callActions("afterApplyTransition",arguments)},handleTransitionEnd:function(e){var t=this,n=e.propertyName,i=t.mixer.config.animation.animateResizeTargets;t.callActions("beforeHandleTransitionEnd",arguments),t.isBound&&e.target.matches(t.mixer.config.selectors.target)&&(n.indexOf("transform")>-1||n.indexOf("opacity")>-1||i&&n.indexOf("height")>-1||i&&n.indexOf("width")>-1||i&&n.indexOf("margin")>-1)&&(t.callback.call(t,t.operation),t.isBound=!1,t.callback=null,t.operation=null),t.callActions("afterHandleTransitionEnd",arguments)},eventBus:function(e){var t=this;switch(t.callActions("beforeEventBus",arguments),e.type){case"webkitTransitionEnd":case"transitionend":t.handleTransitionEnd(e)}t.callActions("afterEventBus",arguments)},unbindEvents:function(){var e=this;e.callActions("beforeUnbindEvents",arguments),n.off(e.dom.el,"webkitTransitionEnd",e.handler),n.off(e.dom.el,"transitionend",e.handler),e.callActions("afterUnbindEvents",arguments)},bindEvents:function(){var e=this,i="";e.callActions("beforeBindEvents",arguments),i="webkit"===t.features.transitionPrefix?"webkitTransitionEnd":"transitionend",e.handler=function(t){return e.eventBus(t)},n.on(e.dom.el,i,e.handler),e.callActions("afterBindEvents",arguments)},getPosData:function(n){var i=this,o={},r=null,s=new t.StyleData;return i.callActions("beforeGetPosData",arguments),s.x=i.dom.el.offsetLeft,s.y=i.dom.el.offsetTop,(i.mixer.config.animation.animateResizeTargets||n)&&(r=i.dom.el.getBoundingClientRect(),s.top=r.top,s.right=r.right,s.bottom=r.bottom,s.left=r.left,s.width=r.width,s.height=r.height),i.mixer.config.animation.animateResizeTargets&&(o=e.getComputedStyle(i.dom.el),s.marginBottom=parseFloat(o.marginBottom),s.marginRight=parseFloat(o.marginRight)),i.callFilters("posDataGetPosData",s,arguments)},cleanUp:function(){var e=this;e.callActions("beforeCleanUp",arguments),e.dom.el.style[t.features.transformProp]="",e.dom.el.style[t.features.transitionProp]="",e.dom.el.style.opacity="",e.mixer.config.animation.animateResizeTargets&&(e.dom.el.style.width="",e.dom.el.style.height="",e.dom.el.style.marginRight="",e.dom.el.style.marginBottom=""),e.callActions("afterCleanUp",arguments)}}),t.Collection=function(e){var t=null,i=-1;for(this.callActions("beforeConstruct"),i=0;t=e[i];i++)this[i]=t;this.length=e.length,this.callActions("afterConstruct"),n.freeze(this)},t.BaseStatic.call(t.Collection),t.Collection.prototype=Object.create(t.Base.prototype),n.extend(t.Collection.prototype,{constructor:t.Collection,mixitup:function(e){var i=this,o=null,r=Array.prototype.slice.call(arguments),s=[],a=-1;for(this.callActions("beforeMixitup"),r.shift(),a=0;o=i[a];a++)s.push(o[e].apply(o,r));return i.callFilters("promiseMixitup",n.all(s,t.libraries),arguments)}}),t.Operation=function(){t.Base.call(this),this.callActions("beforeConstruct"),this.id="",this.args=[],this.command=null,this.showPosData=[],this.toHidePosData=[],this.startState=null,this.newState=null,this.docState=null,this.willSort=!1,this.willChangeLayout=!1,this.hasEffect=!1,this.hasFailed=!1,this.triggerElement=null,this.show=[],this.hide=[],this.matching=[],this.toShow=[],this.toHide=[],this.toMove=[],this.toRemove=[],this.startOrder=[],this.newOrder=[],this.startSort=null,this.newSort=null,this.startFilter=null,this.newFilter=null,this.startDataset=null,this.newDataset=null,this.viewportDeltaX=0,this.viewportDeltaY=0,this.startX=0,this.startY=0,this.startHeight=0,this.startWidth=0,this.newX=0,this.newY=0,this.newHeight=0,this.newWidth=0,this.startContainerClassName="",this.startDisplay="",this.newContainerClassName="",this.newDisplay="",this.callActions("afterConstruct"),n.seal(this)},t.BaseStatic.call(t.Operation),t.Operation.prototype=Object.create(t.Base.prototype),t.Operation.prototype.constructor=t.Operation,t.State=function(){t.Base.call(this),this.callActions("beforeConstruct"),this.id="",this.activeFilter=null,this.activeSort=null,this.activeContainerClassName="",this.container=null,this.targets=[],this.hide=[],this.show=[],this.matching=[],this.totalTargets=-1,this.totalShow=-1,this.totalHide=-1,this.totalMatching=-1,this.hasFailed=!1,this.triggerElement=null,this.activeDataset=null,this.callActions("afterConstruct"),n.seal(this)},t.BaseStatic.call(t.State),t.State.prototype=Object.create(t.Base.prototype),t.State.prototype.constructor=t.State,t.UserInstruction=function(){t.Base.call(this),this.callActions("beforeConstruct"),this.command={},this.animate=!1,this.callback=null,this.callActions("afterConstruct"),n.seal(this)},t.BaseStatic.call(t.UserInstruction),t.UserInstruction.prototype=Object.create(t.Base.prototype),t.UserInstruction.prototype.constructor=t.UserInstruction,t.Messages=function(){t.Base.call(this),this.callActions("beforeConstruct"),this.ERROR_FACTORY_INVALID_CONTAINER="[MixItUp] An invalid selector or element reference was passed to the mixitup factory function",this.ERROR_FACTORY_CONTAINER_NOT_FOUND="[MixItUp] The provided selector yielded no container element",this.ERROR_CONFIG_INVALID_ANIMATION_EFFECTS="[MixItUp] Invalid value for `animation.effects`",this.ERROR_CONFIG_INVALID_CONTROLS_SCOPE="[MixItUp] Invalid value for `controls.scope`",this.ERROR_CONFIG_INVALID_PROPERTY='[MixitUp] Invalid configuration object property "${erroneous}"${suggestion}',this.ERROR_CONFIG_INVALID_PROPERTY_SUGGESTION='. Did you mean "${probableMatch}"?',this.ERROR_CONFIG_DATA_UID_KEY_NOT_SET="[MixItUp] To use the dataset API, a UID key must be specified using `data.uidKey`",this.ERROR_DATASET_INVALID_UID_KEY='[MixItUp] The specified UID key "${uidKey}" is not present on one or more dataset items',this.ERROR_DATASET_DUPLICATE_UID='[MixItUp] The UID "${uid}" was found on two or more dataset items. UIDs must be unique.',this.ERROR_INSERT_INVALID_ARGUMENTS="[MixItUp] Please provider either an index or a sibling and position to insert, not both",this.ERROR_INSERT_PREEXISTING_ELEMENT="[MixItUp] An element to be inserted already exists in the container",this.ERROR_FILTER_INVALID_ARGUMENTS="[MixItUp] Please provide either a selector or collection `.filter()`, not both",this.ERROR_DATASET_NOT_SET="[MixItUp] To use the dataset API with pre-rendered targets, a starting dataset must be set using `load.dataset`",this.ERROR_DATASET_PRERENDERED_MISMATCH="[MixItUp] `load.dataset` does not match pre-rendered targets",this.ERROR_DATASET_RENDERER_NOT_SET="[MixItUp] To insert an element via the dataset API, a target renderer function must be provided to `render.target`",this.ERROR_SORT_NON_EXISTENT_ELEMENT="[MixItUp] An element to be sorted does not already exist in the container",this.WARNING_FACTORY_PREEXISTING_INSTANCE="[MixItUp] WARNING: This element already has an active MixItUp instance. The provided configuration object will be ignored. If you wish to perform additional methods on this instance, please create a reference.",this.WARNING_INSERT_NO_ELEMENTS="[MixItUp] WARNING: No valid elements were passed to `.insert()`",this.WARNING_REMOVE_NO_ELEMENTS="[MixItUp] WARNING: No valid elements were passed to `.remove()`",this.WARNING_MULTIMIX_INSTANCE_QUEUE_FULL="[MixItUp] WARNING: An operation was requested but the MixItUp instance was busy. The operation was rejected because the queue is full or queuing is disabled.",this.WARNING_GET_OPERATION_INSTANCE_BUSY="[MixItUp] WARNING: Operations can be be created while the MixItUp instance is busy.",this.WARNING_NO_PROMISE_IMPLEMENTATION="[MixItUp] WARNING: No Promise implementations could be found. If you wish to use promises with MixItUp please install an ES6 Promise polyfill.",this.WARNING_INCONSISTENT_SORTING_ATTRIBUTES='[MixItUp] WARNING: The requested sorting data attribute "${attribute}" was not present on one or more target elements which may product unexpected sort output',this.callActions("afterConstruct"),this.compileTemplates(),n.seal(this)},t.BaseStatic.call(t.Messages),t.Messages.prototype=Object.create(t.Base.prototype),t.Messages.prototype.constructor=t.Messages,t.Messages.prototype.compileTemplates=function(){var e="",t="";for(e in this)"string"==typeof(t=this[e])&&(this[n.camelCase(e)]=n.template(t))},t.messages=new t.Messages,t.Facade=function(e){t.Base.call(this),this.callActions("beforeConstruct",arguments),this.configure=e.configure.bind(e),this.show=e.show.bind(e),this.hide=e.hide.bind(e),this.filter=e.filter.bind(e),this.toggleOn=e.toggleOn.bind(e),this.toggleOff=e.toggleOff.bind(e),this.sort=e.sort.bind(e),this.changeLayout=e.changeLayout.bind(e),this.multimix=e.multimix.bind(e),this.dataset=e.dataset.bind(e),this.tween=e.tween.bind(e),this.insert=e.insert.bind(e),this.insertBefore=e.insertBefore.bind(e),this.insertAfter=e.insertAfter.bind(e),this.prepend=e.prepend.bind(e),this.append=e.append.bind(e),this.remove=e.remove.bind(e),this.destroy=e.destroy.bind(e),this.forceRefresh=e.forceRefresh.bind(e),this.forceRender=e.forceRender.bind(e),this.isMixing=e.isMixing.bind(e),this.getOperation=e.getOperation.bind(e),this.getConfig=e.getConfig.bind(e),this.getState=e.getState.bind(e),this.callActions("afterConstruct",arguments),n.freeze(this),n.seal(this)},t.BaseStatic.call(t.Facade),t.Facade.prototype=Object.create(t.Base.prototype),t.Facade.prototype.constructor=t.Facade,"object"==typeof exports&&"object"==typeof module?module.exports=t:"function"==typeof define&&define.amd?define((function(){return t})):void 0!==e.mixitup&&"function"==typeof e.mixitup||(e.mixitup=t),t.BaseStatic.call(t.constructor),t.NAME="mixitup",t.CORE_VERSION="3.3.1"}(window),$((function(){$(".header__btn").on("click",(function(){$(".rightside-menu").removeClass("rightside-menu--close")})),$(".rightside-menu__close").on("click",(function(){$(".rightside-menu").addClass("rightside-menu--close")})),$(".top__slider").slick({dots:!0,arrows:!1,fade:!0,autoplay:!0});mixitup(".gallery__inner",{load:{filter:".living"}})}));
//# sourceMappingURL=data:application/json;charset=utf8;base64,
